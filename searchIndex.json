[
{
		"title": "README",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/",
		"content": "Sugar Labs\nWelcome to documentation for contributors and developers.\nGetting started\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/code-of-conduct/\">Code of Conduct</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/how-can-i-help/\">How can I help?</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/contributing/\">Contribute code</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/languages/\">Programming Languages</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/contact/\">Contact</a>\n\nDesign\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/hig/\">Human Interface Guidelines</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/sugar-iconify/\">Sugar Iconify</a>\n\nSugar Desktop\n\nSetup a development environment\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/desktop-activity/\">Write your own Sugar desktop activity</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/python-style/\">Python code style</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/memory-leaks/\">Memory leaks</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/gtk3-porting-guide/\">GTK 3 Porting Guide</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/python-porting-guide/\">Python 3 Porting Guide</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/python-coverage-guide/\">Python Coverage Guide</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/sugar-on-debian/\">Guide to installing Sugar on Debian</a>\n\nSugar Web\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/web-activity/\">Write your own Sugar web activity</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/web-architecture/\">Architecture</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/javascript-style/\">JavaScript style</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/web-style/\">Web code style</a>\nComponents showcase\n\nSugar Android\n\nSugarizer\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/android/\">Web activity</a>\n\nDocumentation\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/src/docs/\">Improving this documentation</a>\n\nTranslation\n\nWeblate",
		"tags": [ "note","gardenEntry"]
},

{
		"title": "notes",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/index/",
		"content": "Page Moved\nWe have moved this page to GitHub.\nHow did you get here? Please report any lingering links.\n2018-02-14",
		"tags": [ "note"]
},

{
		"title": "android",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/android/",
		"content": "Sugar on Android\nWeb activity on Android\nCurrently there are several manual steps that need to be executed in\norder to create a web activity for Android. When things stabilize the\nprocess can be automated, ideally we would enhance the setup.py\ncommand to build an Android application package file (APK) ready for\ndistribution and installation on a device running Android.\n./setup.py dist-apk\nThe APK could be built using the android sdk and after that, an APK\nwould appear in the activity dist/ directory.\nActivity icon\nAndroid stores app icons in different sizes: : 512x512, 144x144,\n96x96, 72x72, 48x48 . For details see\nhttp://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html.\nTo convert an SVG icon to a PNG suitable as a launcher icon you can\nuse the 'convert' command from http://www.imagemagick.org.\nconvert -background none -density 1200 -resize 512x512 activity/activity-icon.svg activity-icon.png\nAndroid project\nMake an Android app with one android.app.Activity inside, which is the\ndefault project the IDE creates. See\nhttps://developer.android.com/training/basics/firstapp/creating-project.html.\nFor the icon, select the converted PNG icon in the Activity icon\nsection above.\nCopy all the web activity contents to the assets directory. You\ncan copy the boilerplate and adjust from\nhttps://github.com/manuq/clockjs-android.\nAndroid shell\nHere is an Android project that contains a bound service to which\nother apps can bind to: https://github.com/manuq/aboutmejs-android/.\nThis service needs to be separated in its own app. The important bits\nare:\n\nthe Intent filter in\nAndroidManifest.xml\n\nSugarService.java\n\nAn activity launcher for Android shell\nIn Android is possible to replace the default launcher. A launcher is\nbasically a normal app, that has an Intent with a category\nCATEGORY_HOME.\nBeing a normal Android app, it can be a web activity. And it would be\npossible to put colors to the launcher SVG icons and organize them in\na spiral, just like the GTK+ Sugar desktop home.\nThere is a Home screen replacement sample in the\nandroid-sdk samples. It\ncan be built and installed as any other app, following the steps at\nhttps://developer.android.com/training/basics/firstapp/creating-project.html.\nDebugging web activities on Android\nTo get the inspector in your web activity using Chrome, see Remote\nDebugging on\nAndroid.",
		"tags": [ "note"]
},

{
		"title": "code-of-conduct",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/code-of-conduct/",
		"content": "Code of Conduct\nTo be effective, the members of the Sugar Labs community must work\ntogether; our code of conduct lays down the &quot;ground rules&quot; for our\ncooperative efforts.\nThe Sugar Labs community supports the educators and software\ndevelopers who use and develop the Sugar Learning Platform. Sugar is a\nplace for children to explore, learn, teach, and reflect. Sugar Labs\nis a place where we all can explore, learn, teach, and reflect. The\nsame underlying principles that make Sugar great—discovery,\ncollaboration, and reflection—are central to the way the Sugar\ncommunity operates.\nWe chose the name Sugar Labs, plural, because we are more than one\nlab, one person, or one idea. Plurality captures the spirit of\nsharing, cooperation, and criticism that is at the heart of the free\nsoftware/open-source movement. We collaborate freely on a volunteer\nbasis to build software for everyone's benefit. We improve on the work\nof others, which we have been given freely, and then share our\nimprovements on the same basis.\nThat collaboration depends on good relationships between developers\n(and end-users). We have agreed upon the following Code of Conduct as\na guide to our collaboration and cooperation.\nThis Code of Conduct covers your behavior as a member of the Sugar\nLabs community, in any forum, mailing list, wiki, web site, IRC\nchannel, code-sprint, public meeting, or private correspondence. The\nOversight Board will arbitrate in any dispute over the conduct of a\nmember of the community.\nBe considerate\nYour work will be used by other people, and you in turn will depend on\nthe work of others. Any decision you take will affect users and\ncolleagues, and we expect you to take those consequences into account\nwhen making decisions. For example, when we are in a feature freeze,\nplease don't upload dramatically new versions of critical system\nsoftware, as other people will be testing the frozen system and not be\nexpecting big changes.\nBe respectful\nThe Sugar Labs community and its members treat one another with\nrespect. Everyone can make a valuable contribution to Sugar. We may\nnot always agree, but disagreement is no excuse for poor behavior and\npoor manners. We might all experience some frustration now and then,\nbut we cannot allow that frustration to turn into a personal\nattack. It's important to remember that a community where people feel\nuncomfortable or threatened is not a productive one. We expect members\nof the Sugar community to be respectful when dealing with other\ncontributors as well as with people outside the Sugar project, and\nwith users of Sugar.\nBe collaborative\nSugar Labs and Free Software are about collaboration and working\ntogether. Collaboration reduces redundancy of work done in the Free\nSoftware world, and improves the quality of the software produced. You\nshould aim to collaborate with other Sugar contributors, as well as\nwith the entire Sugar ecosystem that is interested in the work you\ndo. Your work should be done transparently and patches from Sugar\nshould be given back to the community when they are made, not just\nwhen the distribution releases. If you wish to work on new code for\nexisting upstream projects, at least keep those projects informed of\nyour ideas and progress. It may not be possible to get consensus from\nupstream or even from your colleagues about the correct implementation\nof an idea, so don't feel obliged to have that agreement before you\nbegin, but at least keep the outside world informed of your work, and\npublish your work in a way that allows outsiders to test, discuss and\ncontribute to your efforts.\nBe flexible\nThe Sugar Labs community and its members come from various backgrounds\nand cultures. It is important to remember that Sugar Labs is a place\nfor educators and developers; parents, teachers, and children; and\nspeakers of many languages to work together. Try to find the\nappropriate forum for your topic, level or expertises, or language.\nIf you come across a post that is in an incorrect forum, please\nrespectfully redirect the poster to the appropriate. However, a\nproject such as Sugar Labs requires communication between groups and\nlanguages.\nWhen you disagree, consult others\nThe Sugar community is not immune to disagreements—both political and\ntechnical. We do not try to avoid disagreements or differing views,\nbut we do try to resolve them constructively. Turn to the community\nand to community processes to seek advice and to mediate and resolve\ndisagreements. Community resources include an Oversight Board which\nwill help to decide the right course for Sugar Labs, project teams and\nteam leaders who may be able to help you, and an ombudsman who will\ninvestigate complaints and, where possible, resolve them by making\nrecommendations to the community. We welcome you to fork the Sugar\ncode base if you are determined to go your own way; enabling the\ncommunity to test your ideas and possibly merge them back into the\nmainstream.\nWhen you are unsure, ask for help\nNobody knows everything, and nobody is expected to be perfect in the\nSugar community. Asking questions avoids many problems down the road,\nand so questions are encouraged. Those who are asked should be\nresponsive and helpful. However, when asking a question, care must be\ntaken to do so in an appropriate forum.\nStep down considerately\nDevelopers on every project come and go and Sugar Labs is no\ndifferent. When you leave or disengage from the project, in whole or\nin part, we ask that you do so in a way that minimizes disruption to\nthe project. This means you should tell people you are leaving and\ntake the proper steps to ensure that others can pick up where you\nleave off.\nMailing lists and web forums\nThis code of conduct applies very much to your behavior in mailing\nlists and web forums.\n\nPlease watch your language. The Sugar community is a family-friendly place.\nPlease use a valid email address to which direct responses can be made.\nPlease avoid flamewars, trolling, personal attacks, and repetitive arguments.\n\nThe Sugar Labs Code of Conduct is based on the Ubuntu Code of\nConduct. It is licensed\nunder the Creative Commons Attribution-Share Alike 3.0 license. You\nmay re-use it for your own project, and modify it as you wish, just\nplease allow others to use your modifications and give credit to the\nUbuntu Project!",
		"tags": [ "note"]
},

{
		"title": "contact",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/contact/",
		"content": "Contact\nJoin us at Sugar-devel mailing list\nhttp://lists.sugarlabs.org/listinfo/sugar-devel.\nWe have a Matrix channel where real time discussions mostly happen.\nSome important channels are:\n\n#sugar:matrix.org: General Sugar Labs discussion\n#sugar-systems:matrix.org: Questions and discussion about Sugar Labs Infrastructure.\n#music-blocks:matrix.org: Share your projects and asks questions about Music Blocks (musicblocks.sugarlabs.org)\n#musicblocksdev:matrix.org: Development for Music Blocks visual programming language.\n\nFor Sugarizer specific discussions, join the Discord server.",
		"tags": ["sugar", "sugar-systems", "music-blocks", "musicblocksdev", "note"]
},

{
		"title": "contributing",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/contributing/",
		"content": "Contributing\nWe use the pull-request model, see GitHub's help on pull-request.\nIn brief, you will:\n\non GitHub, find and fork the source repository;\non your computer, clone your fork repository,\ncommit your changes in a new branch;\npush your branch and submit a pull-request for it;\ngo through the review process until your pull-request is merged; and\n\nPlease note there is no need to ask permission to work on an\nissue. You should check for pull requests linked to an issue you are\naddressing; if there are none, then assume nobody has done\nanything. Begin to fix the problem, test, make your commits, push your\ncommits, then make a pull request. Mention an issue number in the\npull request, but not the commit message. These practices allow the\ncompetition of ideas (Sugar Labs is a meritocracy).\nModifying Activities\nMost activity repositories can be found in our GitHub sugarlabs\norganization.\nA few activity repositories are somewhere else; read the\nactivity/activity.info file, check the metadata on the\nactivities.sugarlabs.org app\nstore, or the Activity page on\nwiki.sugarlabs.org, or our\ndeprecated gitorious instance.\nFor new activities, see Write your own Sugar desktop\nactivity, or Write your own Sugar web\nactivity, then make a new repository in your\nGitHub account, put the source code in it, then ask the systems@\nlist to move it to the\nGitHub sugarlabs organization.\nAfter modifying an activity, a new release may be needed. Some activities have no maintainer, so you may need to be the maintainer for a short time.\nChecklist - anyone\n\nrun the activity and confirm that you understand what it is for, what it does, and how a child will use it,\n\nmake a fork and clone it,\n\ncheck if what you want to change is available already in any other branches or forks,\n\nmake and test your changes,\n\nif your changes add a new feature or will affect users; update the NEWS file, the README.md file, and the help-activity,\n\nif there is a po/*.pot file, and your changes affect translated strings; regenerate using python setup.py genpot,\n\nmake a branch, one or more commits, and a pull request, see Workflow below.\n\nChecklist - maintainer\n\nfor Python 2 branches, check version of latest bundle release in\nactivities.sugarlabs.org,\n\ncheck version of latest tarball release in download.sugarlabs.org/sources/sucrose/fructose/ or download.sugarlabs.org/sources/honey/,\n\ncheck for a release version git tag, e.g. v34,\n\ncorrelate with activity_version metadata in activity/activity.info,\n\nlook for commits after any of these, in either;\n\nmaster branch of repository at sugarlabs,\nany other branches,\nany other forks,\norphaned repositories with the same bundle_id value, using GitHub or Google Search,\ndeprecated repositories at git.sugarlabs.org,\n\nreview and merge all pull requests,\n\napply all desired commits, making pull requests if review is needed,\n\napply any translate.sugarlabs.org changes, e.g. using a download script,\n\nif there is a po/*.pot file, regenerate using python setup.py genpot, review the changes, and commit,\n\nIf the activity is on weblate, be sure to merged any open PRs raised\nfrom the weblate-sync workflow.\n\nupdate the README.md file if necessary,\n\nwrite release notes for the NEWS file, change the activity_version metadata in activity/activity.info, commit, and git tag the version,\n\nupdate the activity documentation in the help-activity repository,\n\nfor activities that include a tarball release, or where Fedora or Debian packages may be made, create a tarball using python setup.py dist_source, and upload tarball to download.sugarlabs.org using shell account,\n\ncreate bundle using python setup.py dist_xo, and test that it\ncan be installed by Browse,\n\nfor Python 2 branches only, upload to activities.sugarlabs.org\nusing developer account,\n\nrebase any other maintained branches or pull requests, such as\nthose for past or future versions of Python, or past releases of\nFedora, Ubuntu or libraries.\n\nfor Python 3 Activities, copy the bundle to ~activities-v4/bundles,\nremove any other old versions of the bundle from ~activities-v4/bundles, and trigger\na rebuild of the static site using rebuild-aslo command, verify if your bundle is\nvisible on https://v4.activities.sugarlabs.org . For more information, it is\nrecommended to take a look at the Activities4 wiki page\n\nModifying Sugar\nSugar repositories can be found in our GitHub sugarlabs\norganization. Sugar desktop\nenvironment repositories are:\n\nhttps://github.com/sugarlabs/sugar (the desktop shell);\nhttps://github.com/sugarlabs/sugar-artwork (images, icons, themes);\nhttps://github.com/sugarlabs/sugar-toolkit-gtk3 (graphical widget library); and,\nhttps://github.com/sugarlabs/sugar-datastore (journal backend).\n\nWorkflow\nOpen an Issue\nWe track issues in http://bugs.sugarlabs.org/ or in the GitHub Issues tab of repositories.\nAn improvement to Sugar may start with an issue discussion, to build consensus and ensure that work isn't wasted. An issue may be avoided for fixing bugs that are obvious to everyone or part of a project.\nForking\nYou should first fork a repository on GitHub.\nThis step is needed only once.\nSee complete help in GitHub.\nCloning\nYou should clone your fork.\nThis step is needed only once.\nUsing sugar as example;\ngit clone git@github.com:YOUR-NAME/sugar.git\ncd sugar\ngit remote add upstream https://github.com/sugarlabs/sugar.git\ngit fetch upstream\n\nBranching\nCreate a branch per set of changes; e.g. to fix a problem or add a feature;\ngit checkout -b BRANCH-NAME\n\nYour BRANCH-NAME can be anything, other than master. The scope is your forked repository. The branch name will be shown on pull-requests.\nMaking commits\nChange files, and commit. Commit messages are kept by git, and are used later when problems are being solved. When writing a commit message;\n\nstart with a one line summary of the change;\nleave a blank line after the summary;\nexplain the problem that is solved, unless the summary makes it obvious;\nwhen the problem was introduced by a previous commit, mention the hash;\nwhen the problem is in an issue or ticket, add &quot;Fixes #1234&quot;;\navoid mentioning GitHub or other pull-requests, as these are not kept in git;\navoid mentioning any contest tasks or mentors; use pull-request comments instead; and\nuse imperative mood, like &quot;add foo&quot;, or &quot;port to bar&quot;; (if English is not your first language, see imperative mood, git documentation and blog post by Dan Clarke).\n\nMake one or more commits and push the branch to your repository;\ngit push origin BRANCH-NAME\n\nSending a pull-request\nSend a pull-request for your branch.\nNavigate to your repository page in GitHub, switch to the branch you made, and then press the Pull Request button.\nWhen writing a pull-request message;\n\nif there is only one commit, begin with the GitHub default of the commit message, otherwise write a summary of the series of commits;\nlink to any relevant pull-requests, issues, or tickets; and\nlink to any contest tasks, and name your @mentors to subscribe them.\n\nA review will happen in the pull-request, and a reviewer will either;\n\nmerge, squash, or rebase your commits;\nmerge your commits with their own changes;\nask you to make changes; or\nclose and reject your pull-request giving reasons.\n\nWhen they ask you for changes, you may have to change both files, commits or commit messages.\nWhen squashing commits to different files, use interactive rebase.\ngit rebase -i master\n\nAfter resolving any conflicts, push the changes to the same branch;\ngit push --force origin\n\nThen respond on the pull-request.\nKeep your pull-request up to date\nWhen there have been upstream commits while your pull-request was open, you should rebase your pull-request;\ngit pull --rebase upstream\n\nThen push the changes to the same branch;\ngit push --force origin\n\nThe pull-request will be updated.\nKeep your fork up to date\nWhen there have been upstream commits since your fork was made, you should bring these into your fork:\ngit checkout master\ngit pull upstream\ngit checkout BRANCH-NAME\n\nReview\nWe encourage testing before merging a pull-request.\nSo instead of merging directly with the &quot;merge&quot; button on GitHub, we may do a local merge, then test, then push.\nSee GitHub help on merging a pull-request.\nThe GitHub page for the pull-request will provide you the right commands to do the local merge, similar to the following.\nGet the changes from that branch to a new local branch:\ngit checkout -b SOME-USER-topic1 master\ngit pull https://github.com/SOME-USER/sugar.git topic1\n\nTest! If everything is fine, merge:\ngit checkout master\ngit rebase SOME-USER-topic1\ngit push origin master\n\nClose Issue\nOnce your pull-request is merged, you should close any issue or ticket. GitHub issues named as &quot;Fixes&quot; in a commit message may be automatically closed.\nBe sure to thank everyone who helped you out along the way.\nTesting\nWhen testing activities;\n\nactivity must start,\n\nactivity must refresh entire display when focus is restored,\n\nactivity must behave predictably (except where randomness is designed),\n\nactivity must save data to journal,\n\nactivity must restore the saved data from journal (click on the journal entry),\n\nother activities must be able to use saved data, if it is declared with the relevant content type,\n\nevery coded feature should either work properly, or be removed if it cannot be fixed,\n\ncollaboration support, if present, must function properly between two or more systems,\n\nactivity should not consume all available battery power (e.g. pygame clock rate too high),\n\nactivity should not contain any security vulnerabilities,\n\nactivity should not reveal personal information.\n\nGuide for Reviewers\nGoals\nGoals for review are to;\n\ndetect trivial mistakes,\n\nmaintain consistent and good code quality,\n\nreproduce test results, (especially for critical repositories),\n\nmaintain a useful git commit history for use by git bisect, and developers who read it,\n\nmaintain other records, such as issues, tickets, and documentation,\n\nnot waste the time of the contributor, by doing anything trivial that otherwise the contributor might have to do.\n\nChecklist\n\ndoes the change have consensus of the community, see also code of conduct (if a reviewer is in doubt, seek opinions by @mentioning people),\n\ndoes the commit message explain the summary, problem, and solution, so that it can be used in future analysis, see also making commits (if a reviewer can fix it by squash or manual rebase, do so),\n\ndoes the commit message reference any issue, bugs.sugarlabs.org ticket number, or downstream ticket numbers, (if a reviewer can fix it by squash or manual rebase, do so),\n\nare the number of commits excessive for future analysis, (a reviewer may squash or rebase if necessary),\n\nis the changed code consistent in style with the existing code, see also coding standards, (on the other hand, expect flake8 changes to be in separate commits),\n\nfor critical repositories, does the change work properly on our latest version of Sugar on either Fedora, Debian, or Ubuntu.\n\nCritical repositories\n\nsugar, sugar-toolkit, sugar-toolkit-gtk3, sugar-artwork, sugar-datastore, gst-plugins-espeak,\n\neach of the Fructose activity set repositories,\n\nFrequently Asked Questions\nI've used the GitHub editor, how can I rebase or amend commits?\nMake a local clone of your GitHub repository, use git commit --amend or the other advanced CLI features, then git push back to GitHub.\nError 403 on git push\nMost likely you have cloned someone else's repository, and you should\ninstead fork their repository, clone your own repository, make your\nchanges, then push. See Getting error 403 while submitting\nPR\nand D. Joe's\nreply.",
		"tags": ["1234", "note"]
},

{
		"title": "desktop-activity",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/desktop-activity/",
		"content": "Write your own Sugar desktop activity\nMost Sugar desktop activities are written in Python, using our Sugar\nToolkit libraries.\nSome Sugar desktop activities are written in languages other than\nPython, such as Smalltalk, C, and JavaScript. For new activities to\nrun on both Sugar desktop and Sugarizer, please consider Write your\nown Sugar web activity.\nThis page shows how to develop an activity using Python 3 with Sugar Toolkit.\nSetting up a development environment\nSetup a development\nenvironment, for testing your activity and\nreleasing it for distribution.\nCreate a new activity from a template\nLocate the activity directories. They may include:\n\n~/Activities for native Sugar desktop, and packaged Sugar desktop on Fedora, Debian or Ubuntu;\n/usr/share/sugar/activities for packaged Sugar desktop; and,\n~/sugar-build/activities for sugar-build only.\n\nEach installed activity is in a directory under the activity\ndirectories. This is where you will create your new activity.\nClone the Hello World activity from\nhello-world on GitHub:\ngit clone https://github.com/sugarlabs/hello-world-fork.git Name.activity\n\nUse the .activity suffix in the directory name of an activity,\nbecause that's the way an activity bundle is released.\nCustomize\nYour clone of the Hello World activity contains a file,\nactivity/activity.info:\n[Activity]\nname = HelloWorld\nactivity_version = 1\nbundle_id = org.sugarlabs.HelloWorld\nexec = sugar-activity3 activity.HelloWorldActivity\nicon = activity-helloworld\nlicence = GPLv3+\nrepository = https://github.com/sugarlabs/hello-world-fork.git\n\nYou must set a new name and a unique bundle_id for your activity.\nAvoid punctuation in your bundle_id, e.g.,\norg.sugarlabs.my-activity-name is not valid. Instead, use\nCamelCase, e.g., org.sugarlabs.MyActivity.\nYou should change the Activity class in your activity.py file, e.g., from:\nclass HelloWorldActivity(activity.Activity):\n\nto:\nclass MyActivity(activity.Activity):\n\nYou must change the exec field as well, e.g., from:\nexec = sugar-activity3 activity.HelloWorldActivity\n\nto:\nexec = sugar-activity3 activity.MyActivity\n\nYou should set the repository field to the URL of the git repository\nof your project.\nAnd we recommend that you use a GPLv3+ license.\nYour activity.info file will look something like:\n[Activity]\nname = MyActivity\nactivity_version = 1\nbundle_id = org.sugarlabs.MyActivity\nexec = sugar-activity3 activity.MyActivity\nicon = activity-helloworld\nlicence = GPLv3+\nrepository = https://github.com/MyGitHubAccount/MyActivityRepo.git\n\nTo read more about the activity.info file, see Activity\nBundles\non our Wiki.\nYou must make your activity icon unique in the Sugar interface by\nmaking a new one, or borrowing from another icon and making changes.\nAsk for help from the community if you don't feel comfortable with\ngraphic design.\nHere is activity/activity-helloworld.svg;\n\nYou should rename this file and change icon in the activity.info\nfile.\nYour activity icon must follow the guidelines as described in\nThe Sugar Interface:\nIcons on our Wiki.\nThere is a helper script, Sugar\nIconify that will help\nyou create Sugar-compliant icons.\nOf course, the interesting changes will be the ones you make to the\nactivity itself. Below you will find links to some resources\non Sugar Activity development, but perhaps the\nbest way to get started is to modify an existing activity that has\nfeatures similar to the one you want to create.\nRunning your activity\nLaunch Sugar and your new activity should be immediately available,\nalthough since it has not yet been selected as a favorite, it will\nnot appear by default on the Sugar Home View (F3). You need to either;\n\ntype the name of your activity into the search entry and press enter; or,\n\nselect the List View (ctrl+2) to see your activity, and click on it.\n\nIf all goes well, your activity will launch.\nThere are many opportunities to make mistakes. Don't get discouraged,\nas debugging is a great way to learn. One useful tool is the Log\nActivity, which will show you the log files of the operating system,\nSugar and activities. Alternatively, you can look at the log files\nfrom the command line.\nLog files are usually in the directory ~/.sugar/default/logs.\nLog files for sugar-build are in the directory ~/sugar-build/home/dotsugar/default/logs.\nLog files are named using the bundle_id.\nYou may also test interactively by starting Terminal, then cd to the activity directory, and type:\nsugar-activity .\n\nif your activity uses python2. If it uses python3, type:\nsugar-activity3 .\n\nFile structure\nAll activities should follow this file structure:\nMyActivity.activity/\n|-- activity/\n| |-- activity.info\n| `-- activity-icon.svg\n|-- activity.py\n`-- setup.py\n\nactivity/ contains information about your activity, including the\nname, bundle_id, and the icon.\n\nactivity.py contains an instance of the activity class, which is\nrun when your activity is launched.\n\nsetup.py lets you install your activity or make an installable\nbundle with it.\n\nTranslation\nSugar serves a global audience, so it is important to enable your\nactivity for internationalization and localization. A guide to best\npractices\nis on our Wiki.\nRevision control your code\nFor development you can initialize the repository as a git\nrepository. This will help you to track your changes. First use git\ninit\nto initialize the repository:\ngit init\n\nWith git\nstatus\nyou can show the available files in the folder they are still\nuntracked. Now add all the files in the directory and commit those\nchanges, you can use git status again to see the current state:\ngit add .\ngit commit -a -m 'Initial import'\ngit status\n\nWe recommend that you use github to host your\nactivity.\nCheck Python Coverage of your activity\nYou can check the Python Coverage of your activity by following this guide.\nReady to release\nOnce your activity is working, you can ask to have\nyour activity repository hosted under the Sugar Labs github\norganization.\nMake an XO bundle.\npython setup.py dist_xo\n\nAnd if it works with Python 2 then upload it to the Sugar Activity\nLibrary http://activities.sugarlabs.org/.\nAfter that, users of Sugar can download and install your activity.\nFor further releases, you must update the activity_version in\nactivity/activity.info.\nMore details\n\nSugar Toolkit Documentation.\n\nPython GTK+ 3 Tutorial.\n\nMake Your Own Sugar Activities, a book by James Simmons.\n\nCoding standards\nWe currently use Python 3 for\nthe Sugar Toolkit and Sugar activity development.\nWe recommend flake8 as a\nwrapper around the pep8\nand pyflakes code checkers.\nTo check for flake8 warnings in the current directory, run this command\npython3 -m flake8 *.py",
		"tags": [ "note"]
},

{
		"title": "dev-environment",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/dev-environment/",
		"content": "Setup a development environment\nMoved to docs/development-environment.md.",
		"tags": [ "note"]
},

{
		"title": "docs",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/docs/",
		"content": "Improving this documentation\nHave you found an error in these docs, or want to improve them?\nPlease contact us or directly send pull requests to\nthe GitHub repository.\nThis documentation lives in https://github.com/sugarlabs/sugar-docs\nContributing images\n\nMake them 600px width, or less.\n\nYou may need to highlight parts of the image. Use color yellow (rgb\n255, 255, 0) at 30% opacity, in a layer with Multiply mode, over the\nscreenshot layer.\n\nCode screenshots: use gedit and default GNOME theme to make them.",
		"tags": [ "note"]
},

{
		"title": "gtk3-porting-guide",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/gtk3-porting-guide/",
		"content": "GTK 3 Porting Guide\nGuide to porting Sugar Activities to GTK 3.\nGTK\nGTK is a library for creating graphical user interfaces. GTK is written in C. GTK for Python is a language binding.\n\nGTK\n\nGTK 2 is the previous major version of GTK. GTK 2 for Python is a static binding, and is called PyGTK. GTK 2 is soon to be obsolete and unavailable.\n\nPyGTK\nGTK 2 Reference Manual\n\nGTK 3 is the current major version of GTK. It breaks both API and ABI compared with GTK 2. GTK 3 for Python is a GObject Introspection binding, using PyGObject.\n\nPyGObject\nPyGObject API Reference\nGTK 3 Reference Manual\n\nSugar Toolkit\nSugar Toolkit provides services and a set of GTK widgets to build activities and other Sugar components on Linux based computers using Python.\n\nSugar Toolkit for GTK 2, module name sugar, uses PyGTK,\nSugar Toolkit for GTK 3, module name sugar3, uses PyGObject,\nSugar Toolkit for GTK 3 Documentation\n\nSugar Activities\nNew Sugar activities are written in either;\n\nJavaScript using the Sugar Web tools, or\nPython using GTK 3 and Sugar Toolkit for GTK 3,\n\nOld Sugar activities were written in Python using GTK 2 and Sugar Toolkit for GTK 2.\nThese old activities are to be ported to GTK 3. This guide explains how.\nRequired Skills\n\napplication development in Python,\napplication development in GTK 2 and GTK 3, using the event loop model,\nSugar activity development,\nuse of PyGObject API libraries.\n\nHow to Port to GTK 3\nGeneral information for all GTK applications;\n\nPyGObject - Porting from Static Bindings part of the PyGObject documentation, focusing on Python,\nPyGObject - Introspection Porting on the GNOME Wiki, focusing on Python,\nMigrating from GTK 2 to GTK 3 part of the GTK documentation, focusing on the underlying C library and object classes, but is relevant to Python porting because the same classes are used.\n\nHow to Port a Sugar Activity to GTK 3\n\nSet up development environment for Sugar on GTK 3; such as Ubuntu 18.04,\n\nSet up test environments capable of both GTK 2 and GTK 3 at the same time; such as Ubuntu 16.04,\n\nQuiesce the activity source by making sure the activity works properly before porting, fixing any bugs, closing any solved issues, merging any pull requests or branches and releasing the last GTK 2 version; see the activity maintainer checklist.\n\nPort to Sugar Toolkit for GTK 3 (see below),\n\nPort to GTK 3, using the PyGObject script pygi-convert.sh to convert automatically much as it can.\n\nPort to any other libraries, such as Sugargame, Cairo, Pango, GConf to Gio.Settings, GStreamer 0.10 to GStreamer 1.0,\n\nTest and iterate until original functionality is reached.\n\nFollow the Code Guidelines during all porting.\nWrite any comments in the code, by adding # README:, # TODO: and # FIXME: explaining what are the problems that you are having with that chunk of code. Put a link if it's necessary.\nPort to Sugar Toolkit for GTK 3\n\nThe namespace is changed from sugar to sugar3, which reflects\nthat GTK 3 is the underlying technology, use a script to automate the rename of the imports sugar to\nsugar3, sugar-convert.sh,\nThe keep button has been removed\nThe old-style toolbar has been removed\nset_toolbar_box is used instead of set_toolbox\nRemove import of deprecated ActivityToolbox (see\nhello-world)\nSupport for service_name and class tags in activity.info has\nbeen removed. Use bundle_id instead of service_name and exec\ninstead of class (see in\nRecord)\nsugar3.activity.Activity does not have the window attribute. Use\nthe .get_window() method instead.\n\nPort to GTK 3\nTo start, change the importing instruction for GTK from\nimport gtk\n\nto\nimport gi\ngi.require_version('Gtk', '3.0')\nfrom gi.repository import Gtk\n\nNote that require_version needs to called only the first time when GTK\nis being imported.\nSimilar imports that may be used are:\nfrom gi.repository import Gdk, Pango, GObject\n\nThen you have to change each call that involves GTK, for example\ncreating a button will look now like this:\nbutton = Gtk.Button()\n\nA simple hello world program in GTK 3 looks like this:\nfrom gi.repository import Gtk\n\ndef _destroy_cb(widget, data=None):\nGtk.main_quit()\n\nw = Gtk.Window()\nw.connect(&quot;destroy&quot;, _destroy_cb)\nlabel = Gtk.Label('Hello World!')\nw.add(label)\nw.show_all()\n\nGtk.main()\n\nThe changes that were needed to port the hello-world activity can be\nseen in this\ncommit.\nProblems\nSeveral common problems arise during a port.\nSimple example on creating a toolbar\nA Sugar Activity has a toolbar.\nThese are the relevant modules required to create a simple toolbar containing the activity button and the stop button.\nfrom sugar3.activity import activity\nfrom sugar3.graphics.toolbarbox import ToolbarBox\nfrom sugar3.activity.widgets import ActivityToolbarButton\nfrom sugar3.activity.widgets import StopButton\nfrom sugar3.graphics.toolbarbox import ToolbarButton\nfrom sugar3.graphics import style\n\nSince the ActivityToolbar() module has been deprecated, the toolbar can\nnow be called using ToolbarBox()\nThen, from the ToolbarBox(), include the ActivityButton and StopButton.\nIn order for the StopButton to be align to the right as per Sugar\nactivity interface, a separator has to be included as well.\ntoolbar_box = ToolbarBox()\n\nactivity_button = ActivityToolbarButton(self)\ntoolbar_box.toolbar.insert(activity_button, 0)\nactivity_button.show()\n\nseparator = Gtk.SeparatorToolItem()\nseparator.props.draw = False\nseparator.set_expand(True)\ntoolbar_box.toolbar.insert(separator, -1)\nseparator.show()\n\nstop_button = StopButton(self)\ntoolbar_box.toolbar.insert(stop_button, -1)\nstop_button.show()\nself.set_toolbar_box(toolbar_box)\ntoolbar_box.show()\n\nTools\nIf you are having trouble finding how a particular GTK\nclass/method/constant has been named in PyGI, run\npygi-enumerate.py\nand grep the output. (this app lists all identified methods and\nconstants). Usage example:\n$ python pygi-enumerate.py | grep get_selection\nGtk.AccelLabel.get_selection_bounds() (instance method)\nGtk.Editable.get_selection_bounds() (instance method)\nGtk.Entry.get_selection_bounds() (instance method)\nGtk.IconView.get_selection_mode() (instance method)\nGtk.Label.get_selection_bounds() (instance method)\nGtk.SelectionData.get_selection() (instance method)\nGtk.SpinButton.get_selection_bounds() (instance method)\nGtk.TextBuffer.get_selection_bound() (instance method)\nGtk.TextBuffer.get_selection_bounds() (instance method)\nGtk.TreeView.get_selection() (instance method)\n\nConstructor considerations\nWith PyGI it is possible to use Python-like constructors, or “new”\nfunctions e.g. the following are (usually) equivalent:\nlabel = Gtk.Button()\nlabel = Gtk.Button.new()\n\nHowever, the first form is preferred: it is more Python-like.\nInternally, the difference is that Gtk.Label.new() translates to a call\nto gtk_label_new(), whereas Gtk.Label() will\ndirectly construct an instance of GtkLabel at the GObject level.\nIf the constructor takes parameters, they must be named. The\nparameters correspond to GObject properties in the API documentation\nwhich are usually marked as “Construct”. For example, the following code\nwill not work:\nexpander = Gtk.Expander(&quot;my expander&quot;)\n\nThe (confusing) error is:\nTypeError: GObject.__init__() takes exactly 0 arguments (1 given)\n\nThe solution is to go to the GtkExpander API\ndocumentation\nand find the appropriate property that we wish to set. In this case it\nis label (which is a Construct property, further increasing our\nconfidence of success), so the code should be:\nexpander = Gtk.Expander(label=&quot;my expander&quot;)\n\nCombining the two points above, if you wish to call a construct-like\nfunction such as gtk_button_new_with_label(), you do have the option\nof calling Gtk.Button.new_with_label(), however if we check the\nGtkButton\nproperties\nwe see one called &quot;label&quot; which is equivalent. Therefore\ngtk_button_new_with_label(&quot;foo&quot;) should be called as:\nbutton = Gtk.Button(label=&quot;foo&quot;)\n\nHBox, VBox, pack_start and pack_end\nGtkHBox and GtkVBox, commonly used containers in GTK 2 code, have\npack_start and pack_end methods. These take 4 parameters:\n\nwidget: The widget to pack into the container\nexpand: Whether the child should receive extra space when the\ncontainer grows (default True)\nfill: True if space given to child by the expand option is\nactually allocated to child, rather than just padding it. This\nparameter has no effect if expand is set to False. A child is always\nallocated the full height of a gtk.HBox and the full width of a\ngtk.VBox. This option affects the other dimension. (default True)\npadding: extra space in pixels to put between child and its\nneighbor (default 0)\n\nIn PyGTK, the expand, fill and padding parameters were optional: if\nunspecified, the default values above were used. In PyGI, these\nparameters are not optional: all 4 must be specified. Hence the\nrules for adding in the extra parameters are:\n\nIf expand was not set, use value True\nIf fill was not set, use value True. (however, if expand is\nFalse, this parameter gets ignored so False is an equally acceptable\noption when expand=False)\nIf padding was not set, use value 0.\n\nThese parameters can be specified either as positional arguments or as\nnamed keyword arguments, however all 4 must always be specified. Some\ndevelopers prefer keyword arguments, arguing that the following:\nbox.pack_start(widget, expand=True, fill=False, padding=4)\n\nis much more readable than:\nbox.pack_start(widget, True, False, 4)\n\nIf you are using pack_start with the default values (expand=True,\nfill=True and padding=0), you can avoid using pack_start (and the\nparameter pain that it brings with it) by just using .add for some added\ncleanliness, e.g.\nbox.pack_start(widget, True, True, 0)\n\ncan be replaced with:\nbox.add(widget)\n\nIn GTK 3, GtkVBox and GtkHBox have been deprecated, which means they might be removed later. The replacement is to use GtkBox directly, and you may wish to\nmake this change now. e.g.:\nvbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)\nhbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, homogeneous=True, spacing=8)\n\nHowever, it must be noted that if GtkBox is used directly (instead of\nusing GtkHBox/GtkVBox), the default value of expand is now\nFalse. The implications of this are:\n\nYou need to check your .add() calls, as previously they would behave\nas pack_start with expand=True, but now they will behave as\nexpand=False (you need to change them to use pack_start with\nexpand=True to retain the old behaviour)\nEvery single pack_start call that has expand=False and padding=0\n(and any value of fill) can be converted to .add() for cleanliness\n\nGtkAlignment considerations\nIn PyGTK, the gtk.Alignment constructor takes four optional parameters:\n\nxalign: the fraction of horizontal free space to the left of the\nchild widget. Ranges from 0.0 to 1.0. Default 0.0.\nyalign: the fraction of vertical free space above the child widget.\nRanges from 0.0 to 1.0. Default 0.0.\nxscale: the fraction of horizontal free space that the child widget\nabsorbs, from 0.0 to 1.0. Default 0.0.\nyscale: the fraction of vertical free space that the child widget\nabsorbs, from 0.0 to 1.0. Default 0.0\n\nIn PyGI/GTK3, these parameters are still optional, however, the default values have changed. They are now:\n\nxalign: default 0.5\nyalign: default 0.5\nxscale: default 1\nyscale: default 1\n\nAdditionally, PyGTK accepted these construction parameters as positional\narguments. As explained above, they must now be converted to keyword\narguments.\nGtk Menu Popup\nThe Gtk.Menu.popup function now works slightly differently. The user\nsupplied positioning function now takes different parameters. These are\nmenu, x, y, push_in and user_data.\nGdk\nPreviously, gdk was an attribute of the GTK module, which means that it\ncan be called through GTK. For example, if we want to use\ncolor_parse():\ngtk.gdk.color_parse(color)\n\nHowever, what we have to do now is:\nfrom gi.repository import Gdk\n\nThen we can modify the code to the following:\nGdk.color_parse(color)\n\nPango\nFollowing the release of GTK 3, we should not be importing pango like\nthis:\nimport pango\n\nIn fact, we can now import pango as an attribute within the GTK 3\nlibrary:\nfrom gi.repository import Pango as pango\n\nGio.Settings from GConf\nAny use of GConf should be ported to Gio.Settings.\nOther considerations\nself.allocation property is no longer available. self.get_allocation() should be used instead.\nSo to get the allocation size:\nself.allocation.width\nself.allocation.height\n\nshould be replaced by:\nself.get_allocated_width()\nself.get_allocated_height()\n\nConstants\nMost of the constants have slightly different formats, e.g.,\n\ngtk.STATE_NORMAL became Gtk.StateFlags.NORMAL\ngtk.RESPONSE_ACCEPT became Gtk.ResponseType.ACCEPT\ngtk.JUSTIFY_CENTER became Gtk.Justification.CENTER\ngtk.RELIEF_NONE became Gtk.ReliefStyle.NONE\n\nPixbufs\nThe pixbuf libraries are in their own repository\nfrom gi.repository import GdkPixbuf\nGdkPixbuf.Pixbuf.new_from_file()\n\nChanges to the Clipboard\nTwo things to note:\n\nYou need to specify a clipboard using get()\n\nclipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)\n\nYou need to pass a length to set_text()\n\nclipboard.set_text(string, len(string))\n\nSee python-gtk-3-tutorial/clipboard for more details.\nChanges to Drag-and-Drop\nSlightly different syntax:\nself.drag_dest_set(Gtk.DestDefaults.ALL, [],\n                   Gdk.DragAction.COPY)\nself.drag_dest_set_target_list(Gtk.TargetList.new([]))\nself.drag_dest_add_text_targets()\nself.connect('drag_data_received', self._drag_data_received)\n\nand:\ndata.get_text()\n\nor:\ndata.get_image()\n\nSee\npython-gtk-3-tutorial/drag_and_drop\nfor more details.\nPort from Drawable to Cairo\nGTK 3 does not support GTK Drawable objects, so the first step is to\nget your activity running under Cairo.\nimport cairo\n\n# From activity.Activity, you inherit a canvas.\n# Create a Cairo context from the window.\ncairo_context = self.canvas.get_window().cairo_create()\n# Create an XLib surface to be used for drawing\nxlib_surface = surface.create_similar(cairo.CONTENT_COLOR,\nGdk.Screen.width(),\nGdk.Screen.height())\n# Although Gdk.Screen.width() and Gdk.Screen.height() have been\n# deprecated from version 3.22 they can still be used.\n#\n# You'll need a Cairo context from which you'll build a GTK Cairo context\ncairo_context = cairo.Context(xlib_surface)\n# Use this context as you would a Drawable, substituting Cairo commands\n# for gtk commands, e.g.,\n# draw_line changes to line_to\ncairo_context.move_to(0, 0)\ncairo_context.line_to(100, 100)\n# Cairo uses floats from 0 to 1 for RGB values\ncairo_context.set_source_rgb(r, g, b)\ncairo_context.rectangle(x, y, w, h)\ncairo_context.fill()\n# To invalidate a region to force a refresh, use:\nself.canvas.queue_draw_area(x, y, w, h)\n# Handle the expose event\n# &quot;expose-event&quot; signal became &quot;draw&quot; signal for Gtk Widget\n# And it takes a cairo context instead of an expose event\ndef draw(self, widget, cr):\nx, y = cr.get_current_point()\nwidth, height = widget.get_allocated_width(), widget.get_allocated_height()\ncr.rectangle(x, y, width, height)\ncr.clip()\ncr.set_source_surface(xlib_surface)\ncr.paint()\n\nPango is a bit different when used with Cairo:\nimport pango, pangocairo\n\n# Again, from the xlib_surface...\ncairo_context = cairo.Context(xlib_surface)\n\n# Create a PangoCairo context\ncairo_context = pangocairo.CairoContext(cairo_context)\n\n# The pango layout is created from the Cairo context\npango_layout = cairo_context.create_layout()\n\n# You still use pango to set up font descriptions.\nfd = pango.FontDescription('Sans')\nfd.set_size(12 * pango.SCALE)\n\n# Tell your pango layout about your font description\npango_layout.set_font_description(fd)\n\n# Write text to your pango layout\npango_layout.set_text('Hello world', -1)\n\n# Position it within the Cairo context\ncairo_context.save()\ncairo_context.translate(x, y)\ncairo_context.rotate(pi / 3) # You can rotate text and images in Cairo\ncairo_context.set_source_rgb(1, 0, 0)\n\n# Finally, draw the text\ncairo_context.update_layout(pango_layout)\ncairo_context.show_layout(pango_layout)\ncairo_context.restore()\n\nTo draw a bitmap...\n# Again, from the xlib_surface...\ncairo_context = cairo.Context(xlib_surface)\n\nGdk.cairo_set_source_pixbuf(cairo_context, pixbuf, x, y)\ncairo_context.rectangle(x, y, w, h)\ncairo_context.fill()\n\nTo read a pixel from the xlib surface...\n# create a new 1x1 cairo surface\ncairo_surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 1, 1);\ncairo_context = cairo.Context(cairo_surface)\n# translate xlib_surface so that target pixel is at 0, 0\ncairo_context.set_source_surface(xlib_surface, -x, -y)\ncairo_context.rectangle(0,0,1,1)\ncairo_context.set_operator(cairo.OPERATOR_SOURCE)\ncairo_context.fill()\ncairo_surface.flush() # ensure all writing is done\n# Read the pixel\nreturn (ord(pixels[2]), ord(pixels[1]), ord(pixels[0]), 0)\n\nPort from Cairo in GTK 2 to Cairo in GTK 3\nThe Cairo/Pango interaction is a little different:\nfrom gi.repository import Pango, PangoCairo\ncairo_context = ...\npango_layout = PangoCairo.create_layout(cairo_context)\nfd = Pango.FontDescription('Sans')\nfd.set_size(12 * Pango.SCALE)\npango_layout.set_font_description(fd)\npango_layout.set_text('Hello World', -1)\ncairo_context.set_source_rgb(1, 0, 0)\nPangoCairo.update_layout(cairo_context, pango_layout)\nPangoCairo.show_layout(cairo_context, pango_layout)\n\nThe get_extents() method if different in PangoCairo. It calculates an\nextent as a Rectangle, but doesn't return anything. There is a method,\nget_logical_extents() that returns a Rectangle. Alas, it is not\nnecessarily available after v1.16. Note that Rectangle is not a list but\na class with methods for get_x(), get_y(), get_width(), and\nget_height(), so you cannot iter over it.\n(For more details, see\nhttp://developer.gnome.org/pangomm/2.28/annotated.html)\nReplacing pixmaps with Cairo\nYou need to replace your pixmaps with Cairo in GTK 3.\nwin = gtk.gdk.get_default_root_window()\ngc = gtk.gdk.GC(win)\npix = gtk.gdk.pixbuf_new_from_file(&quot;filename.png&quot;)\nmap = gtk.gdk.Pixmap(win, pix.get_width(), pix.get_height())\nmap.draw_rectangle(gc, True, 0, 0, pix.get_width(), pix.get_height())\nmap.draw_pixbuf(gc, pix, 0, 0, 0, 0, pix.get_width(), pix.get_height(), gtk.gdk.RGB_DITHER_NONE)\n\nBecomes;\npix = GdkPixbuf.Pixbuf.new_from_file(&quot;filename.png&quot;)\nimagesurface = cairo.ImageSurface(\ncairo.Format.ARGB32,\npix.get_width(),\npix.get_height())\ncontext = cairo.Context(imagesurface)\ncontext.rectangle(0, 0, pix.get_width(), pix.get_height())\nGdk.cairo_set_source_pixbuf(pix)\ncontext.fill()\n\nTaking a screenshot and making a thumbnail\nTo make a screenshot of the window:\nwidth, height = window.get_width(), window.get_height()\nthumb_surface = Gdk.Window.create_similar_surface(window,\ncairo.CONTENT_COLOR,\nwidth, height)\n\nthumb_width, thumb_height = style.zoom(100), style.zoom(80)\ncairo_context = cairo.Context(thumb_surface)\nthumb_scale_w = thumb_width * 1.0 / width\nthumb_scale_h = thumb_height * 1.0 / height\ncairo_context.scale(thumb_scale_w, thumb_scale_h)\nGdk.cairo_set_source_window(cairo_context, window, 0, 0)\ncairo_context.paint()\nthumb_surface.write_to_png(png_path_or_filelike_object)\n\nCreating a video widget\nSome necessary changes include:\nUsing\nget_property('window').get_xid()\n\nInstead of\nwindow.xid\n\nUsing\nset_double_buffered(False)\nset_app_paintable(True)\n\nInstead of\nunset_flags(gtk.DOUBLE_BUFFERED)\nset_flags(gtk.APP_PAINTABLE)\n\nHacks to help in porting\nUse a virtual machine\nUse an editor with remote file access to a virtual machine, such as emacs with tramp.\nStart Terminal inside Sugar and then start Screen. Change to the activity source directory. Use an SSH client to reach into the Terminal shell to run sugar-activity.\nUse an iterative restarter\nTemporarily add code to detect when your editor rewrites files. For example in activity.Activity.__init__;\n# testing restarter\nct = os.stat('file.py').st_ctime\ndef restarter():\nif os.stat('file.py').st_ctime != ct:\nself.close()\nreturn False\nreturn True\nGObject.timeout_add(233, restarter)\n\nUse Extended Python debugger\nepdb library is useful to inspect the code while the Activity is running.\nsudo yum install python-epdb\n\nYou can put trace point in the code to stop and make tests by doing this:\nimport epdb;epdb.set_trace()\n\nFinally I run Get Books Activity from the Terminal Activity to be able\nto write some code on a shell. This is the command that I use:\nsugar-launch org.laptop.sugar.GetBooksActivity\n\nSee also: Development Team/Debugging\nCheck logs with multitail\nmultitail is really helpful for developing Sugar Activities. It can be used to read the latest log that an Activity wrote and see how it's growing.\nFor example, if we run an Activity three times it will create 3 different .log files behind ~/.sugar/default/logs directory. With multitail we will be seeing the most recent version of the activity log.\nInstall multitail using:\nsudo yum install multitail\n\nShow the proper log files\ncd ~/.sugar/default/logs\nmultitail -iw &quot;*&lt;Activity Name&gt;*&quot; 1 -m 0\n\n-iw is to inform to multitail about the input files and check for them every 1 second\n-m is to let multitail know about the buffersize (0 is infinite)\nUse the pygobject code as example\npygobject is what we use to make\nGTK 3 activities. So, it's really useful to take a look at the code\nexamples that are there. Even more, you can run some demo application\nthat show how to use something specific about the library.\n\nClone the code:git clone git://git.gnome.org/pygobject\n\nRun an examplecd pygobject\ncd demos/gtk-demo/demos\npython pixbuf.py\n\nGrep the code to search for something usefulcd pygobject\ngit grep GdkPixbuf\n\nMonitoring DBus\nNot sure how this command works, but it can give us an interesting\ninformation. If you run this command and plug an USB drive you will see\nuseful information\ndbus-monitor --system\n\nPort to Python 3\nWe are migrating towards Python 3. Python 3 does not support GTK 2.\nHence, once the activity is ported to GTK 3, please consider porting\nthe activity from Python 2 to Python 3.\nRef: Guide to port activities to Python\n3\nReleasing Activities (For maintainers)\nOnce an activity is ported, a new release can be made. The major version\nshould be greater than the existing one.\nPlease follow\nthis\nguide for releasing a new version\nNotes\nThese are the changes noted by developers while porting activities\n\nGtk.Widget.hide_all() does not exist anymore. We should use just .hide Ref\n\nIf the code creates some own object, and it defines some properties,\nyou should use __gproperties__ dictionary. Ref\n\nGtk.ListStore doesn't have the method .reorder. There is a\nticket reported\nupstream about this.\n\nI replaced the use of dbus by Gio to monitor (dis)connection of pen drives\n\nMigrate custom signals:\nIf you have defined custom gtk objects with custom signal you need to update them to the new way\nYou should replace this:\nfrom gobject import signal_new, TYPE_INT, TYPE_STRING, TYPE_BOOLEAN, TYPE_PYOBJECT, TYPE_NONESIGNAL_RUN_LAST, signal_new('extlistview-modified', gtk.TreeView,\nSIGNAL_RUN_LAST, TYPE_NONE, ())\n\nby adding the signal definition inside the object that you are creating using the __gsignals__ dictionary like this (in this case Gtk.TreeView\nis the class that our object inherits):\nfrom gi.repository\nimport GObject\nclass ExtListView(Gtk.TreeView):\n__gsignals__ = { 'extlistview-modified': (GObject.SignalFlags.RUN_LAST, None, ()), }\n\nThe last argument of the signal definition are the\nargument types that the callback will receive.\n\nChange the mouse cursor\n\nExample use case:\nWhen the activity is working and we want to show a work in progress cursor.\n\nReplace this:\nself.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.WATCH))\n\nwith:\nfrom gi.repository import Gdk\nself.get_window().set_cursor(Gdk.Cursor(Gdk.CursorType.WATCH))\n\nResources\n\nPython GTK 3 Tutorial: http://python-gtk-3-tutorial.readthedocs.org\nPyGTK or GTK 2: http://www.pygtk.org/docs/pygtk/\nSugar Toolkit GTK 3 Documentation:\nhttps://developer.sugarlabs.org/sugar3/\nGTK 3 Reference Manual http://developer.gnome.org/gtk3/stable/\nOLPC Documentation:\nhttp://wiki.laptop.org/go/Activities/PortingToGtk3\nPango documentation: http://developer.gnome.org/pangomm\nGStreamer-1.0 documentation:\nhttp://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/index.html\nGStreamer-1.0 porting hints:\nhttps://wiki.ubuntu.com/Novacut/GStreamer1.0\n\nPorting examples\n\nBiorhythm (GTK 3 and PangoCairo)\nPeru Learns English (GTK 3 and GStreamer 1.0)\nJump (GTK 3 and Sugargame)\nI know Madagascar (GTK 3 and Sugargame)",
		"tags": [ "note"]
},

{
		"title": "hig",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/hig/",
		"content": "Human Interface Guidelines\nSee Human Interface Guidelines on our Wiki.",
		"tags": [ "note"]
},

{
		"title": "how-can-i-help",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/how-can-i-help/",
		"content": "How Can I Help?\nTable Of Contents\n\nPrepare\nCoding/Documentation/Quality Assurance\nDesign\nMarketing/Outreach\nImportant Links\nI'm Stuck!\n\nPrepare\nBefore contributing to Sugar Labs, you should use Music Blocks, Sugarizer or Sugar Desktop.\nMusic Blocks\n\nYour Equipment\nYour Operating System\nRecommendations\n\nYou have a computer\nLinux, Windows or macOS\nClone the Music Blocks git repository.\n\nYou have just a browser\nAny\nTest Music Blocks on the Music Blocks web site from your computer, tablet, or phone.\n\nSugarizer\n\nYour Equipment\nYour Operating System\nRecommendations\n\nYou have a computer\nLinux, Windows or macOS\nInstall the Sugarizer package for your operating system.\n\nYou have a tablet or phone\nAndroid\nInstall the Sugarizer app from Google Play.\n\nYou have a tablet or phone\niOS\nInstall the Sugarizer app from the App Store.\n\nYou have just a browser\nAny\nTest Sugarizer on the Sugarizer web site.\n\nComplete the activity development tutorial\n\nSugar Desktop\n\nYour Equipment\nYour Operating System\nRecommendations\n\nYou have only one computer and don't want to erase it\nLinux, Windows, macOS, or iOS\nInstall virtualisation software, make a new virtual machine and install Sugar Live Build, Sugar on a Stick, Ubuntu, Fedora, or Debian.\n\nYou have only one computer and don't want to erase it\nLinux\nInstall Sugar packages from your distribution, see Ubuntu, Fedora, or Debian. For other distributions, contact your distribution community.\n\nYou have another computer that can be erased\nDoesn't matter\nInstall Sugar Live Build, Sugar on a Stick, Ubuntu, Fedora, or Debian.\n\nLearn how to use Sugar and activities, see Help,\nSetup a development environment\n\nCoding, Documentation and Quality Assurance\nCoding, documentation and quality assurance is important - it is required everywhere from producing new software, rolling out new features, maintaining and upgrading current releases, distributing instructions for others to know how to operate the software, and ensuring that others can use software without any problem.\n\nWe have critical projects listed under the Projects Tab, including porting to GTK 3 and migrating to Python 3. These are great places for Python programmers to jump in.\nWe have mentoring opportunities through our participation in programs such as Google Summer Of Code. Please note that only experienced community members can be mentors.\nAnother way you can contribute to Sugar Labs is the Release Engineer's Feature Tracking page. These are features proposed and implemented by other Sugar Labs community contributors. The progress of the feature is also indicated in the page - please contribute to tasks which are &quot;In Progress&quot;.\nYou can test Sugar and Activities and familiarise yourself with Sugar, making a note of where your expectation is betrayed by your observations, then seek feedback from others to learn if your expectation was right, and post inconsistencies to the corresponding GitHub repository issues page, Wiki, or mailing list sugar-devel@lists.laptop.org,\nYou can go to a specific GitHub repository and work on the bugs in the source code. Choose the &quot;Issues&quot; tabs and work through the various issues listed in it. The main Sugar Labs GitHub Repositories are listed in the &quot;Important Sugar Labs Links&quot;.\nYou can write documentation, see the Wiki, the Help Activity which is kept in the Help repository, and this developer documentation.\nYou can update web sites, see www.sugarlabs.org which is kept in the www-sugarlabs repository.\nYou can choose to write your own desktop activity or write your own web activity.\nYou can port activities which are in GTK+ 2 to GTK+ 3, using the guide.\nYou can port activities which are in Python 2 to Python 3, using the guide.\nYou can test code coverage of activities, using the guide.\n\nDesign\nDesign is also crucial to Sugar Labs - it is where new ideas and initiatives are formed into proper reports which can be worked on. You can either contribute a new design proposal or implement an existing one in the Design Team User Experience Proposals wiki page.\nMarketing/Outreach\nYou can help to increase the number of Sugar Labs users through -\n\nWrite translations, see Translation Team and translate.sugarlabs.org, thereby the user experience of users speaking other languages.\nPublish blogs and detail your experience using Sugar Labs software, introducing more people to use Sugar Labs software.\nDesign and execute lesson plans to introduce more children and youth to Sugar Labs, either in schools, outside school or in an informal setting.\n\nImportant Sugar Labs Links\nThe links listed below are of important Sugar Labs code repositories, wiki and website. Some of the code repositories are based under the Sugar Labs GitHub Organisation, while others are not.\nGithub Organisation Page\n\nSugar Labs\n\nGitHub Repositories Under Sugar Labs\n\nSugar Shell for GTK+ 3\nSugar Toolkit for GTK+ 2\nSugar Toolkit for GTK+ 3\nSugar Build/Development Scripts\nSugar Artwork\nSugar Labs Documentation\nSugar Labs Website\nTurtleBlocksJS\nMusicBlocks\nHelp Activity\n\nGitHub Repositories Not Under Sugar Labs\n\nSugarizer\n\nOther Relevant Links\n\nSugar Labs Website\nSugar Labs Wiki\nSugar Labs Matrix Channel\n\nI'm Stuck!\nWell, don't worry; there are real people here who will try to help you. Some\nways to get in touch with real people are:\n\nHang out on the Matrix channel.\nSend an email on the mailing list",
		"tags": [ "note"]
},

{
		"title": "javascript-style",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/javascript-style/",
		"content": "Code style for Sugar JavaScript development\nGeneral\n\nAvoid lines longer than 79 characters\n\nJavascript\n\nMake your code conform to JSHint. See explanation below.\n\nWhen writing new code, use 4 spaces for indentation, but when editing existing code, use the same indentation style.\n\nThe js-beautify tool can be handy for the indentation part. See\nexplanation below.\nHere is a good reading about javascript code conventions\nhttp://javascript.crockford.com/code.html .\nFor public and private members of an object, read\nhttp://javascript.crockford.com/private.html. To make the object\navailable in private members, keep a private variable named that:\nvar that = this;\nTools\nJSHint\nUse JSHint http://jshint.com/ to check for errors and make the\nsource compatible with our coding conventions. The jshint command is\nprovided by sugar-build.\nTo check JavaScript code:\njshint js/main.js\nAdd it to your editor to ease development. There are several plugins\nat http://jshint.com/install/ .\njs-beautify\nUse js-beautify https://github.com/einars/js-beautify to make the\nsources compatible with our indentation conventions. The js-beautify\ncommand is provided by sugar-build.\nTo clean javascript code:\njs-beautify --replace --good-stuff js/main.js\nWarning: the --replace option will modify your source. But you will\nbe safe if you are versioning it (we use git for Sugar Web).\nIt can do HTML as well:\njs-beautify --type html --replace --indent-size 2 index.html\nAdd it to your editor to ease development. There are several plugins\nat http://jsbeautifier.org/ .",
		"tags": [ "note"]
},

{
		"title": "languages",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/languages/",
		"content": "Sugar Labs Programming Languages\nAt Sugar Labs we have opportunities for contributing with many\ndifferent programming languages and libraries;\nPython, PyGObject, GTK+, Pygame, GStreamer,\n\nSugar,\nActivities for Sugar,\nSugar Toolkit (API),\nSugar Datastore (API),\n\nJavaScript, HTML5 and CSS\n\nSugarizer,\nMusic Blocks,\nActivities for Sugarizer or Sugar,\nSugar Web (API),\nBrowse, Help and Wikipedia activities for Sugar,\n\nC\n\nPaint activity for Sugar,\nSugar Toolkit (API; display session management, audio),\ngst-plugins-espeak (API; GStreamer, GObject),\nsugarize (API; X11),\nSugar Runner,\nProsody Jabber/XMPP server jabber.sugarlabs.org,\nTelepathy (API; collaboration),\nWikipedia activity for Sugar (data compression algorithms),\n\nPHP\n\nactivities.sugarlabs.org, the activity store for Python 2 and web\nactivities compatible with Sugar 0.112 and earlier,\nMusic Blocks Planet,\n\nC#\n\nRiverHex activity for Sugar,\n\nSmallTalk, Squeak\n\nEToys activity for Sugar,\n\nShell\n\nSugar,\nbuild tools,\n\nAnything New\n\nas long as it works, and you can demonstrate it works, and it\ndoesn't make something more complicated than it needs to be, it is\nprobably welcome.",
		"tags": [ "note"]
},

{
		"title": "memory-leaks",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/memory-leaks/",
		"content": "Finding Memory Leaks\nThis is a guide to finding and fixing memory leaks.\nMemory leaks are a common bug where a program retains allocated memory after it is no longer needed, and over time this makes the program slow (and even slows down the whole operating system.)\nTo see if they are happening, you can log and graph the memory consumption of your Activity.\n1. Log the memory usage\nStart sugar, your Activity, then the Terminal Activity.\nIn Terminal run htop, look for the pid of your Activity, and quit.\nRun a loop that measures the memory consumption of your Activity,\nwhile true; do\necho $(date +%s.%N) \\\n$(awk '/VmSize/ { print $2; }' /proc/$(pgrep -f jarabe)/status)\nsleep 1\ndone | tee memory.log\n\nSwitch to your Activity, and follow some procedure to test it, then stop using it and wait a couple of minutes to let it settle down.\nTip: Use xdotool to script the interaction with your activity, so you can reliably reproduce the testing procedure.\nFor example, xdotool key F6\nSwitch to Terminal and stop the loop by pressing CTRL-C\n2. Graph the log\nCreate a graph of the data, either quickly with plotutils,\ngraph -T png data &gt; graph.png;\nor with gnuplot, run this script\n#!/bin/bash\ngnuplot -persist &lt;&lt;EOF\n# comment out the following 2 lines to display on screen\nset terminal png\nset output &quot;memory.png&quot;\n\nset title &quot;XO-1.5 ... \\nVmSize leak test\\n2015-10-06\\nby James Cameron&quot;\nset xlabel &quot;Clock time MM:SS&quot;\nset ylabel &quot;VmSize kb&quot;\nset nokey\n\nset xdata time\nset timefmt &quot;%s&quot;\n\nset grid\nset style data step\n\nplot &quot;memory.log&quot; using 1:2 title &quot;run #1&quot; lw 2\n\nThe memory.png might look like this:\n\nFinally removes the files,\nrm data graph.png memory.log memory.png;\nReal World Example\nA memory leak was found and discussed in the Sugar Desktop programs (jarabe), https://github.com/sugarlabs/sugar/pull/520, with a fix in https://github.com/sugarlabs/sugar/pull/614.\nThat discussions is the source for this guide.",
		"tags": ["1", "note"]
},

{
		"title": "python-coverage-guide",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/python-coverage-guide/",
		"content": "Measuring coverage of Python activities\n\ninstall the python3-coverage package,\n\nsudo apt install python3-coverage\n\nstart Terminal activity inside Sugar,\nchange to the directory that holds activity source code,\nrun the activity like this;\n\npython3-coverage run /usr/bin/sugar-activity3\n\nrun any test scripts, such as those using xdotool, or your test plan,\nstop the activity,\ngenerate annotated HTML listings,\n\npython3-coverage html\n\nrun the http.server module in a background process,\n\npython3 -m http.server &amp;\n\nbrowse to http://localhost:8000/htmlcov\n\nTested on Ubuntu 18.04 and 19.04.\nSee the Python Coverage documentation.\nMeasuring coverage during collaboration\nWhen an activity is started to join a collaboration, there is little opportunity to intercept and add the command-line wrapper.\n/usr/bin/sugar-activity3 may be edited to add coverage API calls. See Coverage.py API.",
		"tags": [ "note"]
},

{
		"title": "python-porting-guide",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/python-porting-guide/",
		"content": "Python 3 Porting Guide\nGuide to porting Sugar Activities to Python 3.\nMany activities were written in Python 2 with the PyGObject introspection library, GTK, GDK, GStreamer, and other dependencies. Activities usually did not have test cases or test coverage.\nRequired Skills\n\napplication development in Python,\nSugar activity development,\nknowledge of differences between Python 2 and Python 3.\n\nHow to Port an Activity to Python 3:\n\nQuiesce the activity source by making sure the activity works properly before porting, closing any solved issues, merging any pull requests or branches and releasing the last Python 2 version; see the activity maintainer checklist.\n\nCheck that a Python 3 port has not already been done; look for a python3 branch in the main repository, or any developer fork.\n\nFor activities known to work with Fedora 18, create a fedora18 branch and push; this branch will be for any future maintenance with Python 2,\n\nUse Sugar Toolkit for GTK 3 version 0.115 or later, built for Python 3, and test that /usr/bin/python3 can import it, for example;\npython3 -c 'import sugar3'\n\nPrepare a test plan to cover each feature and user interface widget, and consider assessing coverage,\n\nIf the activity uses telepathy-python, test and fix collaboration, then port to PyGObject binding TelepathyGLib, and test again, for example;\nimport telepathy\n\nshould change to:\nfrom gi.repository import TelepathyGLib\n\nUse constants from TelepathyGLib, and minimise changes, for example;\nfrom telepathy.interfaces import CHANNEL\n\nshould change to:\nCHANNEL = TelepathyGLib.IFACE_CHANNEL\n\nReplace calls to Channel and Connection classes of\ntelepathy-python with a dictionary of dbus.Interface(). Look\nthrough the source code for constants used by Channel and Connection\nobjects as keys. Use these constants as keys to a dictionary of the\ndbus.Interface() objects. For example;\nChannel(self._connection.requested_bus_name, channel_path,\nready_handler=self.__text_channel_ready_cb)\n\nshould change to (ensure adding all key-interface pairs):\nself.text_channel = {}\nself.text_proxy = dbus.Bus().get_object(\nself._connection.requested_bus_name, channel_path)\nself.text_channel[PROPERTIES_IFACE] = dbus.Interface(\nself.text_proxy, PROPERTIES_IFACE)\n\nReplace all bare references to telepathy_text_chan and\ntelepathy_tubes_chan\nself.telepathy_text_chan.AddMembers(\n\nshould change to:\nself.telepathy_text_chan[CHANNEL].AddMembers(\n\nTest and fix collaboration before proceeding further.\n\nIf the activity uses dbus.gobject_service.ExportedGObject (deprecated and only available for Python 2), then port to CollabWrapper, and test again,\n\nIf the activity uses dbus directly, refer to dbus-python Porting to Python 3, and test again,\n\nPort from Python 2 to Python 3.\nStart your porting with 2to3 tool,\nIn the terminal, type:\n2to3 -w -n *.py\n\nand then review every change made,\n\nIterate through How to Port Python 2 code to Python 3 | Python Docs (most Sugar activities being ported to Python 3 do not need to support Python 2 as well), and Supporting Python 3: An in-depth guide changing code,\n\nCheck for integer divisions that have become floating point,\n\nCheck for use of binary data, especially in files, pipes, and subprocesses,\n\nCheck for use of Gtk.CssProvider, and if so ensure the load_from_data function is given bytes rather than unicode strings, e.g. `b&quot;...&quot;,\n\nCheck for use of Rsvp.new_from_data for making images from SVG data, and if so ensure the function is given bytes rather than unicode strings,\n\nChange exec value in activity.info from sugar-activity to sugar-activity3\n\nMake Sugar Home View reload the bundle; by restarting Sugar or moving the bundle directory out of ~/Activities and back again a few seconds later,\n\nTest the activity from Sugar, that it starts without error, that no warnings or errors are in logs, and that each user function works as before,\n\nCheck if the activity can be built,\nIn the terminal, type:\npython3 setup.py dist_xo\n\nRelease a new version,\n\nUpdate README.md to point to the released bundle,\n\nFollow the Code Guidelines during all porting.\nWrite any comments in the code, by adding # README:, # TODO: and # FIXME: explaining what are the problems that you are having with that chunk of code. Put a link if it's necessary.\nReleasing Activities (for maintainers)\nOnce an activity is ported, a new release can be made. The major version\nshould be greater than the existing one.\nPlease follow\nthis\nguide for releasing a new version.\nAvoid releasing Python 3 activities to https://activities.sugarlabs.org/ as these will not work on existing systems.\nResources:\n\nWhat's new in Python 3 | Python Docs\nHow to Port Python 2 code to Python 3 | Python Docs\n2to3 Documentation\n\nPorting Examples:\nHere are some examples of porting activities to Python 3:\n\nSpirolaterals\nFinance\nAbacus\nWrite\nLog\nCowBulls\n\nCommon Questions\nWhy does my traceback show Python 2?\nCheck that you have changed exec in activity.info, and that Sugar has been restarted.\nWhy does &quot;consider porting to Python 3&quot; still appear?\nCheck that you have changed exec in activity.info.",
		"tags": [ "note"]
},

{
		"title": "python-style",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/python-style/",
		"content": "Code style for Sugar Python development\nGeneral\n\nAvoid lines longer than 79 characters.\n\nPython\n\nMake your code conform to pep8 and pyflakes\n\nUse four spaces for indentation.\n\nLibraries\n\nNew code should be written in Python 3, using GTK+ 3, GStreamer 1.0, etc\n\nUse json, ...\n\nUse sugargame when interfacing to pygames\n\nConventions\n\nMethods documentation should be &quot;attached&quot; to the methods (See http://www.python.org/dev/peps/pep-0257)",
		"tags": [ "note"]
},

{
		"title": "sugar-iconify",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/sugar-iconify/",
		"content": "Sugar Iconify\nDescription\nSugar uses entities for its SVG colors in order to match the icon\ncolors to the user colors.\nThe sugariconify.py script is used to convert SVGs into the format\nrequired for Sugar icons, adding the necessary stroke and fill\nentities. This is a Python script, and as such requires Python to run.\nIt will create Sugar-compatible SVG icons from an input.svg by\nadding the appropriate stroke and fill entities. It can be used to\nconvert a single icon or run over a batch of icons at one time.\nYou can find the script in the sugariconify repository. You can find a web version at https://github.com/sugarlabs/iconify-web\nFor creating an SVG suitable for Sugar,\nsee the tutorial on Making Sugar\nIcons.\nIn some cases, you may desire to update a single icon, or a subset of\nthe icons defined within a given SVG. To do so, pass a pattern to the\nscript with -p, and only those icons which match the pattern will be\nexported.\nUsage\nsugariconify.py [-ceghipv] [-s stroke_hex] [-f fill_hex] [-m | -o ] [-d directory] input.svg\n\nExample usage:\npython sugariconify.py input.svg\n\nOptions\n-c Apply default color entities (#666666, #FFFFFF) to output\n-d [directory] The preferred output directory\n-e Do not insert entities for strokes and fills\n-f [hex] Hex value to replace with fill entity\n-g Automatically accept guesses for stroke and fill entities\n-h Display this help message\n-i Insert &quot;isolated stroke&quot; entities\n-m Multiple export; export top level groups as separate icons\n-o Modify input file in place, overwriting it; overridden by -m\n-p [pattern] Only export icons whose name contains pattern\n-s [hex] Hex value to replace with stroke entity\n-v Verbose\n-x Create HTML preview files, for icon validation\n\nNote: A common problem encountered when using this script is when the\ntarget SVG has more than two colors.\nDetails\nGiven a simple input SVG:\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;\n&lt;svg\nxmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;\nxmlns:cc=&quot;http://creativecommons.org/ns#&quot;\nxmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;\nxmlns:svg=&quot;http://www.w3.org/2000/svg&quot;\nxmlns=&quot;http://www.w3.org/2000/svg&quot;\nversion=&quot;1.1&quot;\nviewBox=&quot;0 0 55 55&quot;\nheight=&quot;55mm&quot;\nwidth=&quot;55mm&quot;&gt;\n&lt;rect\ny=&quot;2.5&quot;\nx=&quot;2.5&quot;\nheight=&quot;50&quot;\nwidth=&quot;50&quot;\nstyle=&quot;fill:#ffff00;fill-opacity:1;stroke:#ff0000;stroke-width:3.5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1&quot; /&gt;\n&lt;/svg&gt;\n\nThe resulting output would look like this:\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;\n&lt;!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN'\n'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd' [\n&lt;!ENTITY stroke_color &quot;#666666&quot;&gt;\n&lt;!ENTITY fill_color &quot;#ffffff&quot;&gt;\n]&gt;\n&lt;svg\nxmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;\nxmlns:cc=&quot;http://creativecommons.org/ns#&quot;\nxmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;\nxmlns:svg=&quot;http://www.w3.org/2000/svg&quot;\nxmlns=&quot;http://www.w3.org/2000/svg&quot;\nversion=&quot;1.1&quot;\nviewBox=&quot;0 0 55 55&quot;\nheight=&quot;55mm&quot;\nwidth=&quot;55mm&quot;&gt;\n&lt;rect\n&lt;rect\ny=&quot;2.5&quot;\nx=&quot;2.5&quot;\nheight=&quot;50&quot;\nwidth=&quot;50&quot;\nstyle=&quot;fill:&amp;fill_color;;fill-opacity:1;stroke:&amp;stroke_color;;stroke-width:3.5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1&quot;/&gt;\n&lt;/svg&gt;\n\nInstantiating SugarIconify\nIt is also possible to use SugarIconify in your own Python scripts.\nfrom sugariconify import SugarIconify\nicon = SugarIconify()\n\nMethods\n#set_stroke_color():\nIt is equivalent of -s on command line, it can be a hex value\n(e.g #FFFF00) or a rgb percent value such as rgb(31%, 28%, 56%).\nicon.set_stroke_color('#FFFF00')\nicon.set_stroke_color('rgb(55%, 12%, 55%)')\n\n#set_fill_color():\nIt is equivalent of -f on command line, it can be a hex value\n(e.g #FF0000) or a rgb percent value such as rgb(32%, 33%, 87%).\nicon.set_fill_color('#FFFFFF')\nicon.set_fill_color('rgb(55%, 12%, 55%)')\n\n#set_confirm_guess():\nIt is equivalent of -g on command line, so it can automatically\naccept guesses for stroke and fill entities, True or False are\nthe only accepted values.\nicon.set_confirm_guess(True)\n\n#set_use_default_colors():\nIt is equivalent of -c on command line, uses default stroke and\nfill entities (#666666, #FFFFFF) for sugar iconify, True or False\nare the only accepted values.\nicon.set_use_default_colors(True)\n\n#set_overwrite_input():\nIt is equivalent of -o on command line, overrides input file in\nplace, True or False are the only accepted values.\nicon.set_overwrite_input(True)\n\n#set_output_path():\nIt is equivalent of -d on command line, sets the output path where\nthe iconified file will be placed, string values are accepted.\nicon.set_output_path('/home/user/Desktop')\n\n#set_use_entity():\nIt is equivalent of -e on command line, do not insert entities for\nstrokes and fills, True or False are the only accepted values.\nicon.set_use_entity(True)\n\n#set_verbose():\nIt is equivalent of -v on command line, outputs information messages\non console, True or False are the only accepted values.\nicon.set_verbose(True)\n\n#set_pattern():\nIt is equivalent of -p on command line, only export icons whose name\ncontains pattern, string values are accepted.\nicon.set_pattern('pattern')\n\n#set_multiple():\nIt is equivalent of -m on command line, export top level groups as\nseparate icons, True or False are the only accepted values.\nicon.set_multiple(True)\n\n#set_output_examples():It is equivalent of -x on command line,\ncreate HTML preview files, for icon validation, True or False are\nthe only accepted values.\nicon.set_output_examples(True)\n\n#set_use_iso_strokes():\nIt is equivalent of -i on command line, insert &quot;isolated stroke&quot;\nentities, True or False are the only accepted values.\nicon.set_use_iso_strokes(True)\n\nExample\nfrom sugariconify import SugarIconify\nicon = SugarIconify()\nicon.set_use_default_colors(True)\nicon.iconify('/home/user/Desktop/image.svg')",
		"tags": ["FFFFFF", "set_stroke_color", "FFFF00", "set_fill_color", "FF0000", "set_confirm_guess", "set_use_default_colors", "FFFFFF", "set_overwrite_input", "set_output_path", "set_use_entity", "set_verbose", "set_pattern", "set_multiple", "set_output_examples", "set_use_iso_strokes", "note"]
},

{
		"title": "sugar-logging-in",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/sugar-logging-in/",
		"content": "Guide to logging in with the Sugar desktop\nYou may have installed Sugar on Debian/Ubuntu, Fedora, any other distribution by following the Sugar documentation or may have installed the Sugar Live Build on a Virtual Machine.\nEach Linux distribution comes with a Display Manager.\n\nA Display Manager (DM) is essentially a graphical login program, that\nlets you switch users or switch desktop environments.\n\nThe most popular display managers are GDM, LightDM, and SDDM.\n\nGDM is used with the GNOME desktop environment on Debian, Ubuntu and Fedora.\n\nLightDM is used with Raspbian on Raspberry Pi.\n\nSDDM is used with KDE.\n\nTo log in with the Sugar Desktop, select Sugar at the login screen before logging in. Depending on the display manager, you may have to select a gear icon, wrench icon or a dropdown menu to do this.\nSome examples are shown below:\nGDM - Demonstrated on Sugar Live Build (Debian)\n\nSelect Sugar after clicking the gear icon\n\nLIGHTDM - Demonstrated on Sugar Live Build (Debian)\n\nSelect Sugar after clicking the gnome footprint icon\n\nGDM - on Ubuntu (Groovy Gorilla)\n\nSelect Sugar from the gear icon on the right\n\nGDM - Demonstrated on Ubuntu (Focal Fossa)\n\nSelect Sugar from the gear icon on the right\n\nSDDM - Demonstrated on Manjaro\n\nSwitch user and select Sugar from the drop down\n\nSee Also\nYou can take a look at other Display Managers here (Debian Wiki) and here (Arch Wiki).\nhttps://gitlab.gnome.org/GNOME/gdm\nhttps://github.com/canonical/lightdm\nhttps://github.com/sddm/sddm",
		"tags": [ "note"]
},

{
		"title": "sugar-on-debian",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/sugar-on-debian/",
		"content": "Tutorial on installing Sugar on Debian\nGet Debian\nDownload the Debian 10 (Buster) ISO.\n\nI suggest downloading the standard edition ISO because it is smaller and because the Desktop Environment will get removed while installing Sugar. Current standard edition for amd64 linked here.\n\nInstall the Debian ISO on a system or Virtual Machine.\nInstall Sugar 0.112-6 on Debian 10 (Buster)\n# Update Debian repositories and install Sugar\nsudo apt update\n\n# Install Sugar, its dependencies\nsudo apt install sucrose lightdm\n\nReboot and login to Sugar.\nDone 🎉\n\nTutorial to login to Sugar is available here.\n\nInstall Sugar 0.117-3 on Debian 11 (Bullseye)\nLet's set default package repository to unstable. This is because Sugar 0.117 and above are only available in the Debian unstable repositories.\neg. using the nano editor\n# create a new apt config file\nnano /etc/apt/apt.conf.d/my-default-release\n\n# Add this line to the file, then press CTRL-X to save it\nAPT::Default-Release &quot;unstable&quot;;\n\nUpdate Debian and install Sugar\n# Let's update Debian. Should update to Debian 11 (Bullseye)\nsudo apt update\nsudo apt upgrade\n\n# Install Sugar, its dependencies\n# gcc-8-base is a dependency of Sugar 0.117\n# libglib2.0-dev is a dependency of the Browse activity\n# lightdm is a desktop manager which we will use to select Sugar while logging in\nsudo apt install sucrose gcc-8-base libglib2.0-dev lightdm\n\nReboot and login to Sugar.\nDone 🎉\n\nTutorial to login to Sugar is available here.\n\nPost install\nThis part is completely optional. These programs help in debugging/developing Sugar.\n# install multitail and ssh\napt install multitail openssh-server\n\nSetup colorful Multitail logs (Makes it easier to identify errors and warnings)\n# Paste the snippet into /etc/multitail.conf\n# Or save as .multitailrc in the home directory\n\n# Sugar\ncolorscheme:sugar\ncs_re:green:DEBUG\ncs_re:red:^(([a-zA-Z]*Error)|Traceback).*$\ncs_re:yellow:^.*(Warning|WARNING).*$\ncs_re_s:blue:([0-9]{10,}\\.[0-9]{6,})\n#\n\nNow you can view logs with multitail using:\ncd ~/.sugar/default/logs/ &amp;&amp; multitail -CS sugar -iw &quot;*ACTIVITY_NAME*&quot; 1 -m 0\n\nMake sure to replace ACTIVITY_NAME with the name of the Activity whose logs you are trying to view. eg. Pippy",
		"tags": [ "note"]
},

{
		"title": "web-activity",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/web-activity/",
		"content": "Write your own Sugar web activity\nChoose your development environment\nYou've got three choices to develop your own web activity for Sugar:\n\ninstall packaged Sugar on Fedora, Debian, or Ubuntu; or,\nuse Sugarizer.\n\nSee Setup a development environment for more detail.\nSugarizer simulates the Sugar environment in a browser. So you need\nonly a browser to start developing. It's the better choice if you've\nno time or knowledge to learn how to install or build Sugar desktop\non a GNU Linux distribution but you're not in a Sugar desktop\nenvironment, so your activity may only work in Sugarizer.\nCreate the activity from the template\nOn packaged sugar, after you have built the development\nenvironment, clone the Sugarizer repository.\nInstall volo through npm.\nnpm install -g volo\nCreate an activity based on the default template\ncd sugarizer/activities\nvolo create MyActivity.activity ./ActivityTemplate\ncd MyActivity.activity\nOn Sugarizer, after you've cloned - or copied - the Sugarizer\nrepository, copy all content of\nactivities/ActivityTemplate directory in a new directory\nactivities/MyActivity.activity.\nCustomize\nChoose a name for your activity. Write it in the activity name and\nbundle-id in activity/activity.info of the new directory.\n\nAnd also in the title tag of index.html.\n\nOn packaged sugar, install the activity for development\npython setup.py dev\nOn Sugarizer, update the file activities.json of the Sugarizer directory: add a new line for your activity. Update id, name and directory values on this new line.\n\nNow you should have a basic activity running!\n\nFile structure\nIn your new activity, you will find the following file structure:\nMyActivity.activity/\n|-- activity/\n| |-- activity.info\n| -- activity-icon.svg |-- index.html |-- css/ | -- activity.css\n|-- js/\n| |-- activity.js\n| -- loader.js |-- lib/ |-- package.json -- setup.py\n\nactivity/ contains information about your activity, including the\nname, ID, and the icon.\n\nindex.html is where the elements that compose your activity are\ndefined. The template comes with a toolbar and a canvas where you\ncan place your content.\n\njs/activity.js is where the logic of your activity lives.\n\ncss/activity.css is where you add the styling of your activity.\n\nThose are the files you'll modify in most cases. The others are:\n\njs/loader.js configures the libraries paths and loads your\njs/activity.js . You can add non-AMD libraries here.\n\nlib/ contains the libraries\n\npackage.json contains information about the libraries the activity\ndepends\n\nsetup.py lets you install your activity or make an installable\nbundle with it\n\nNow you are ready to go ahead and develop your activity in the html,\njs and css directories.\nRevision control your code\nFor development you can initialize the repository as a git\nrepository. This will help you to track your changes. First use git\ninit\nto initialize the repository:\ngit init\nWith git\nstatus\nyou can show the available files in the folder they are still\nuntracked. Now add all the files in the directory besides the lib\nfolder and commit those changes, you can use git status again to see\nthe current state:\ngit add .\ngit commit -a -m 'Initial import'\ngit status\nFirst steps\nAdding a button to the toolbar\nThis simple example will show you how web activities are structured as\nbits of HTML, CSS and JavaScript.\nYou will need a SVG graphic for the button. Or you can use one from\nthe Sugar icon set at lib/sugar-web/graphics/icons/. For this\nexample, let's say you have one custom icon called my-button.svg.\nCreate a directory icons/ inside your activity and place the SVG\nfile inside. Then do the following steps.\nIn index.html, add a new &lt;button&gt; element inside the toolbar:\n\nIn css/activity.css, define the button style:\n#main-toolbar #my-button {\nbackground-image: url(../icons/my-button.svg);\n}\nIn js/activity.js, add a callback for the button:\nvar myButton = document.getElementById(&quot;my-button&quot;);\nmyButton.onclick = function () {\nconsole.log(&quot;You clicked me!&quot;);\n}\nAdding HTML content dynamically\nSoon you will find that adding content to the HTML as we did with the\ntoolbar button in the previous section, is very limited. You'll want\nto add HTML elements on the fly, as the user interacts with the\nactivity, or as the data structures of your activity logic change.\nThere are several options to archive this. Most of the time you'll\nend up using a mix of them, so it is important to know them all.\nFirst, it is possible to create HTML elements and append them to other\nHTML elements using JavaScript. This is called &quot;manipulating the\nDOM&quot;.\nFor example, to create a new div with class 'my-div', and append it to\nthe canvas div, you can do:\nmyElem = document.createElement('div');\nmyElem.className = &quot;my-div&quot;;\nvar canvas = document.getElementById(&quot;canvas&quot;);\ncanvas.appendChild(myElem);\nBut it is a pain to do that for large HTML structures. Writing HTML\ndirectly is much better:\nvar canvas = document.getElementById(&quot;canvas&quot;);\ncanvas.innerHTML +=\n'' +\n'Tom' +\n'Chris' +\n'Donald' +\n'';\nNice, that saves us many JavaScript lines. But what if the HTML\ndepends on your data? Let's say you have an array of names and you\nwant one &lt;li&gt; per name, as in the previous example. You have\ntwo options: 1. go back to use the JavaScript methods for DOM\nmanipulation, or 2. use a template system.\nThere are many template systems out there, and you can use whatever\nyou like. Let's try mustache here.\nAdd mustache to your activity:\nvolo add mustache\nImport mustache in your js/activity.js:\nvar mustache = require(&quot;mustache&quot;);\nUse it:\nvar template =\n'' +\n'{{#names}}' +\n'{{ name }}' +\n'{{/names}}' +\n'';\nvar data = {names: [{name: &quot;Laura&quot;}, {name: &quot;Joao&quot;},\n{name: &quot;Willy&quot;}, {name: &quot;Sandra&quot;}]};\nvar containerElem = document.getElementById(&quot;container&quot;);\ncontainerElem.innerHTML = mustache.render(template, data);\nDebugging\nIf you want to inspect the code, you can press ctrl+shift+I while your\nActivity is running.\nThe inspector is a very useful tool for many things. For example, you\ncan edit the activity CSS or HTML, and interactively see how it is\naffected. Or you can execute JavaScript commands in the console.\n\nIt has also more advanced tools for JavaScript debugging. They are\nnicely documented here:\nhttps://developers.google.com/chrome-developer-tools/docs/javascript-debugging.\nKeeping Sugar libraries up to date\nThe activity depends on the\nsugar-web library\nthat provides the Sugar API and the Sugar look &amp; feel.\nThis means that if there are changes to the library you have to update\nyour local copy. You can do this with running\nthe following command inside the activity directory:\nvolo add -f\nUsing other JavaScript libraries\nAMD-ready\nYou can easily add AMD-ready libraries with volo. For example, to add\nRaphaelJS:\n$ volo add DmitryBaranovskiy/raphael\nDownloading: https://codeload.github.com/DmitryBaranovskiy/raphael/legacy.zip/v2.1.2\nInstalled github:DmitryBaranovskiy/raphael/v2.1.2 at lib/raphael.js\nAMD dependency name: raphael\nThen in js/activity.js you can use it:\nvar raphael = require(&quot;raphael&quot;);\nnon-AMD libs\nPlease, refer to\nRequiresJS shim section,\nthen you can add your shim section in js/loader.js\nReady to release\nBefore your first release, you should:\n\nmake your activity unique in the Sugar interface by changing your\nactivity icon activity/activity-icon.svg . Or if you don't have\ngraphics skills, you can ask in the community if someone can do it.\n\nAfter that, if the activity works with Sugar 0.112 or earlier, on\npackaged-sugar you may make a bundle and upload it to the Sugar\nActivity Library http://activities.sugarlabs.org/.\npython setup.py dist_xo\nWith Sugarizer, you can directly publish the XO bundle. So, just zip the content of your activities/MyActivity.activity directory and rename the .zip file to a .xo file.\nFor further releases, you should update the activity_version in\nactivity/activity.info.",
		"tags": ["main-toolbar", "my-button", "note"]
},

{
		"title": "web-architecture",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/web-architecture/",
		"content": "Sugar web architecture\nWeb Activities\nA sugar web activity is an activity developed using the standard web\ntechnologies: HTML,\nJavaScript\nand CSS. They are called &quot;web&quot; because\nof the technology used but they run off-line just fine. The activities\nare run within the Sugar Shell, an activity runtime built on standard\nbrowser technology, to render the display, assist with events, and\nhandle JavaScript.\nAs standard webapps, they are self-contained and run in any modern web\nbrowser. But the focus is on running them bound to Sugar services that\nprovide the unique features of Sugar.\nThe web is evolving very fast to provide the same functionality to\nwebapps that standard desktop applications have. Web activities\nshould be developed using standard web technologies as much as\npossible. For example, if there is a need to take a picture from the\ndevice camera, and that is possible with web standards, then those\nshould be used. If that is not possible, the activity should\ncommunicate with the Sugar services to take the picture.\nSugar Web library\nhttps://github.com/sugarlabs/sugar-web\nIt includes the tools that the activity developer can use to make an\nactivity. The Sugar services are delivered as a JavaScript framework,\nwhich supports common application-level functions, UI widgets and\nnative services.\nA copy of the library is contained in each activity.\nSugar Services\nWeb activities on Sugar GTK\nCurrent Sugar GTK can already run web activities out of the box. It\nopens a chrome-less window with a WebKitGTK view, and the web activity\nis loaded inside.\nThe JavaScript interface to connect web activities and Sugar GTK is\nbeing developed. The interface ends up calling the same bits as GTK\nactivities. It uses WebSockets for the communication between\nJavaScript and Python code.\n\nWeb activities on Android\nThere is research going on about running web activities on Android.\nThe activity source is bundled in an Android application with one\ncomponent: an Android\nactivity\n(not to confuse with our activity term). The Android activity is\ncomposed of a chrome-less WebKit view, and the web activity is loaded\ninside. This is the same as other webapps on\nAndroid do.\nThe Android activity exposes a JavaScript\nobject\nthat the JavaScript libraries inside the web activity can use to\ncommunicate with the Java application. The application can then\ncommunicate with the Sugar shell application and respond to the web\nactivity executing JavaScript.\nThe Sugar shell on Android is a separate process, and it runs in its own\napplication with one component: an Android bound\nservice.\nThe inter-process communication is made sending Message\nobjects.\nMany Android activities can be connected to the Sugar shell. The\nfirst one starts it, and the last one stops it. They bind to the\nshell sending an Intent\nmessage,\nfor which the shell has an Intent filter that matches.\n\nThe Sugar shell on Android should implement all of the Sugar features,\nunlike Sugar GTK shell that only needs to connect to the current\nfeatures. But both take advantage of sharing the same JavaScript\ninterface. The interface should be platform agnostic.\nWeb activities standalone\nThe standalone web activities are rendered in any modern web browser. They might\nhave limited functionality but should be as functional as possible. The same\nlibraries as with the other web activities are used.\n\nTools\nModularization of JavaScript code is handled with\nRequireJS which provides the AMD\nspecification (Asynchronous Module Definition).\nPackage management and creation of activities from a template is\nhandled with Volo.\nUnit testing of JavaScript code is done with the\nJasmine framework.\nInstallation of JavaScript tools is done with\nNode.js.",
		"tags": [ "note"]
},

{
		"title": "web-style",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/web-style/",
		"content": "Code style for Sugar HTML development\nGeneral\n\nAvoid lines longer than 80 characters.\n\nDon't use any form of minification (neither in JS, HTML or CSS).\nAll our source should be readable using the Sugar &quot;View Source&quot;\nfeature.\n\nHTML\n\nUse two spaces for indentation. The rationale is that HTML tends to\nbe very nested, and avoiding lines longer than 80 characters becomes\ndifficult.\n\nThe js-beautify tool can be handy for indenting HTML as well.\nCSS\n\nUse two spaces for indentation.\n\nMake it compliant with RECESS. See explanation below.\n\nJavaScript\n\nThe JavaScript style guide is here\n\nTools\nRECESS\nRECESS https://github.com/twitter/recess keeps the order of CSS\nrules following a convention, and protects us from different mistakes.\nThe recess command is provided by sugar-build.\nTo check CSS or LESS code:\nrecess css/activity.css -noIDs false -noOverqualifying false\nKarma\nIf you are hacking on sugar-web, run the test suite with the karma command inside a osbuild shell:\nkarma start sugar-web/test/karma.conf.js\nWe encourage writing new unit tests for new features.\nAfter you do the changes, run:\ncheck\nIt will run all the code checks and the unit tests making sure you won't break the build when your changes are pushed.\nIf a test doesn't pass either your code needs to be fixed or the test need to be adapted.",
		"tags": [ "note"]
},

{
		"title": "what-can-i-do",
		"date":"Thu Feb 27 2025 13:14:42 GMT+0000 (Coordinated Universal Time)",
		"url":"/src/what-can-i-do/",
		"content": "Page Moved\nSorry, we moved this page to How can I help?.",
		"tags": [ "note"]
}
]