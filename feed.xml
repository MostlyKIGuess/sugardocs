<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://sugardocs.vercel.app/">
    <title>Sugar-Docs</title>
    <link href="https://sugardocs.vercel.app//feed.xml" rel="self" />
    <link href="https://sugardocs.vercel.app/" />
    <updated>2025-02-27T13:14:55Z</updated>
    <id>https://sugardocs.vercel.app/</id>
        <entry>
            <title>
                what-can-i-do
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/what-can-i-do/</id>
            <content type="html">
                &lt;h1 id=&quot;page-moved&quot; tabindex=&quot;-1&quot;&gt;Page Moved&lt;/h1&gt;
&lt;p&gt;Sorry, we moved this page to &lt;a href=&quot;https://sugardocs.vercel.app/src/how-can-i-help&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;How can I help?&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/what-can-i-do/" />
        </entry>
        <entry>
            <title>
                web-style
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/web-style/</id>
            <content type="html">
                &lt;h1 id=&quot;code-style-for-sugar-html-development&quot; tabindex=&quot;-1&quot;&gt;Code style for Sugar HTML development&lt;/h1&gt;
&lt;h2 id=&quot;general&quot; tabindex=&quot;-1&quot;&gt;General&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Avoid lines longer than 80 characters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&#39;t use any form of minification (neither in JS, HTML or CSS).&lt;br /&gt;
All our source should be readable using the Sugar &amp;quot;View Source&amp;quot;&lt;br /&gt;
feature.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;html&quot; tabindex=&quot;-1&quot;&gt;HTML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use two spaces for indentation.  The rationale is that HTML tends to&lt;br /&gt;
be very nested, and avoiding lines longer than 80 characters becomes&lt;br /&gt;
difficult.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The js-beautify tool can be handy for indenting HTML as well.&lt;/p&gt;
&lt;h3 id=&quot;css&quot; tabindex=&quot;-1&quot;&gt;CSS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use two spaces for indentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it compliant with RECESS. &lt;a href=&quot;https://sugardocs.vercel.app/#recess&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;See explanation below&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;java-script&quot; tabindex=&quot;-1&quot;&gt;JavaScript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The JavaScript style guide is &lt;a href=&quot;https://sugardocs.vercel.app/src/javascript-style&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; tabindex=&quot;-1&quot;&gt;Tools&lt;/h2&gt;
&lt;h3 id=&quot;recess&quot; tabindex=&quot;-1&quot;&gt;RECESS&lt;/h3&gt;
&lt;p&gt;RECESS &lt;a href=&quot;https://github.com/twitter/recess&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/twitter/recess&lt;/a&gt; keeps the order of CSS&lt;br /&gt;
rules following a convention, and protects us from different mistakes.&lt;br /&gt;
The recess command is provided by sugar-build.&lt;/p&gt;
&lt;p&gt;To check CSS or LESS code:&lt;/p&gt;
&lt;p&gt;recess css/activity.css -noIDs false -noOverqualifying false&lt;/p&gt;
&lt;h3 id=&quot;karma&quot; tabindex=&quot;-1&quot;&gt;Karma&lt;/h3&gt;
&lt;p&gt;If you are hacking on sugar-web, run the test suite with the &lt;em&gt;karma&lt;/em&gt; command inside a osbuild shell:&lt;/p&gt;
&lt;p&gt;karma start sugar-web/test/karma.conf.js&lt;/p&gt;
&lt;p&gt;We encourage writing new unit tests for new features.&lt;/p&gt;
&lt;p&gt;After you do the changes, run:&lt;/p&gt;
&lt;p&gt;check&lt;/p&gt;
&lt;p&gt;It will run all the code checks and the unit tests making sure you won&#39;t break the build when your changes are pushed.&lt;br /&gt;
If a test doesn&#39;t pass either your code needs to be fixed or the test need to be adapted.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/web-style/" />
        </entry>
        <entry>
            <title>
                web-architecture
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/web-architecture/</id>
            <content type="html">
                &lt;h1 id=&quot;sugar-web-architecture&quot; tabindex=&quot;-1&quot;&gt;Sugar web architecture&lt;/h1&gt;
&lt;h2 id=&quot;web-activities&quot; tabindex=&quot;-1&quot;&gt;Web Activities&lt;/h2&gt;
&lt;p&gt;A sugar web activity is an activity developed using the standard web&lt;br /&gt;
technologies: &lt;a href=&quot;http://dev.w3.org/html5/spec/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;HTML&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;JavaScript&lt;/a&gt;&lt;br /&gt;
and &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CSS&lt;/a&gt;. They are called &amp;quot;web&amp;quot; because&lt;br /&gt;
of the technology used but they run off-line just fine. The activities&lt;br /&gt;
are run within the Sugar Shell, an activity runtime built on standard&lt;br /&gt;
browser technology, to render the display, assist with events, and&lt;br /&gt;
handle JavaScript.&lt;/p&gt;
&lt;p&gt;As standard webapps, they are self-contained and run in any modern web&lt;br /&gt;
browser. But the focus is on running them bound to Sugar services that&lt;br /&gt;
provide the unique features of Sugar.&lt;/p&gt;
&lt;p&gt;The web is evolving very fast to provide the same functionality to&lt;br /&gt;
webapps that standard desktop applications have.  Web activities&lt;br /&gt;
should be developed using standard web technologies as much as&lt;br /&gt;
possible.  For example, if there is a need to take a picture from the&lt;br /&gt;
device camera, and that is possible with web standards, then those&lt;br /&gt;
should be used.  If that is not possible, the activity should&lt;br /&gt;
communicate with the Sugar services to take the picture.&lt;/p&gt;
&lt;h2 id=&quot;sugar-web-library&quot; tabindex=&quot;-1&quot;&gt;Sugar Web library&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-web&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/sugar-web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It includes the tools that the activity developer can use to make an&lt;br /&gt;
activity.  The Sugar services are delivered as a JavaScript framework,&lt;br /&gt;
which supports common application-level functions, UI widgets and&lt;br /&gt;
native services.&lt;/p&gt;
&lt;p&gt;A copy of the library is contained in each activity.&lt;/p&gt;
&lt;h2 id=&quot;sugar-services&quot; tabindex=&quot;-1&quot;&gt;Sugar Services&lt;/h2&gt;
&lt;h3 id=&quot;web-activities-on-sugar-gtk&quot; tabindex=&quot;-1&quot;&gt;Web activities on Sugar GTK&lt;/h3&gt;
&lt;p&gt;Current Sugar GTK can already run web activities out of the box.  It&lt;br /&gt;
opens a chrome-less window with a WebKitGTK view, and the web activity&lt;br /&gt;
is loaded inside.&lt;/p&gt;
&lt;p&gt;The JavaScript interface to connect web activities and Sugar GTK is&lt;br /&gt;
being developed.  The interface ends up calling the same bits as GTK&lt;br /&gt;
activities.  It uses WebSockets for the communication between&lt;br /&gt;
JavaScript and Python code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/arch-gtk.png&quot; alt=&quot;GTK architecture&quot; title=&quot;GTK architecture&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;web-activities-on-android&quot; tabindex=&quot;-1&quot;&gt;Web activities on Android&lt;/h3&gt;
&lt;p&gt;There is research going on about running web activities on Android.&lt;br /&gt;
The activity source is bundled in an Android application with one&lt;br /&gt;
component: an &lt;a href=&quot;http://developer.android.com/guide/components/activities.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Android&lt;br /&gt;
activity&lt;/a&gt;&lt;br /&gt;
(not to confuse with our activity term).  The Android activity is&lt;br /&gt;
composed of a chrome-less WebKit view, and the web activity is loaded&lt;br /&gt;
inside.  This is the same as other &lt;a href=&quot;http://developer.android.com/guide/webapps/overview.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;webapps on&lt;br /&gt;
Android&lt;/a&gt; do.&lt;/p&gt;
&lt;p&gt;The Android activity &lt;a href=&quot;http://developer.android.com/guide/webapps/webview.html#UsingJavaScript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;exposes a JavaScript&lt;br /&gt;
object&lt;/a&gt;&lt;br /&gt;
that the JavaScript libraries inside the web activity can use to&lt;br /&gt;
communicate with the Java application.  The application can then&lt;br /&gt;
communicate with the Sugar shell application and respond to the web&lt;br /&gt;
activity executing JavaScript.&lt;/p&gt;
&lt;p&gt;The Sugar shell on Android is a separate process, and it runs in its own&lt;br /&gt;
application with one component: an &lt;a href=&quot;http://developer.android.com/guide/components/bound-services.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Android bound&lt;br /&gt;
service&lt;/a&gt;.&lt;br /&gt;
The inter-process communication is made sending &lt;a href=&quot;http://developer.android.com/reference/android/os/Message.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Message&lt;br /&gt;
objects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many Android activities can be connected to the Sugar shell.  The&lt;br /&gt;
first one starts it, and the last one stops it.  They bind to the&lt;br /&gt;
shell sending an &lt;a href=&quot;http://developer.android.com/guide/components/intents-filters.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Intent&lt;br /&gt;
message&lt;/a&gt;,&lt;br /&gt;
for which the shell has an Intent filter that matches.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/arch-android.png&quot; alt=&quot;Android architecture&quot; title=&quot;Android architecture&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The Sugar shell on Android should implement all of the Sugar features,&lt;br /&gt;
unlike Sugar GTK shell that only needs to connect to the current&lt;br /&gt;
features.  But both take advantage of sharing the same JavaScript&lt;br /&gt;
interface.  The interface should be platform agnostic.&lt;/p&gt;
&lt;h3 id=&quot;web-activities-standalone&quot; tabindex=&quot;-1&quot;&gt;Web activities standalone&lt;/h3&gt;
&lt;p&gt;The standalone web activities are rendered in any modern web browser. They might&lt;br /&gt;
have limited functionality but should be as functional as possible. The same&lt;br /&gt;
libraries as with the other web activities are used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/arch-standalone.png&quot; alt=&quot;Standalone architecture&quot; title=&quot;Standalone architecture&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;tools&quot; tabindex=&quot;-1&quot;&gt;Tools&lt;/h2&gt;
&lt;p&gt;Modularization of JavaScript code is handled with&lt;br /&gt;
&lt;a href=&quot;http://requirejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;RequireJS&lt;/a&gt; which provides the AMD&lt;br /&gt;
specification (Asynchronous Module Definition).&lt;/p&gt;
&lt;p&gt;Package management and creation of activities from a template is&lt;br /&gt;
handled with &lt;a href=&quot;https://volojs.github.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Volo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unit testing of JavaScript code is done with the&lt;br /&gt;
&lt;a href=&quot;http://jasmine.github.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Jasmine&lt;/a&gt; framework.&lt;/p&gt;
&lt;p&gt;Installation of JavaScript tools is done with&lt;br /&gt;
&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Node.js&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/web-architecture/" />
        </entry>
        <entry>
            <title>
                web-activity
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/web-activity/</id>
            <content type="html">
                &lt;h1 id=&quot;write-your-own-sugar-web-activity&quot; tabindex=&quot;-1&quot;&gt;Write your own Sugar web activity&lt;/h1&gt;
&lt;h3 id=&quot;choose-your-development-environment&quot; tabindex=&quot;-1&quot;&gt;Choose your development environment&lt;/h3&gt;
&lt;p&gt;You&#39;ve got three choices to develop your own web activity for Sugar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install packaged Sugar on Fedora, Debian, or Ubuntu; or,&lt;/li&gt;
&lt;li&gt;use Sugarizer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/sugarlabs/sugar/blob/master/docs/development-environment.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Setup a development environment&lt;/a&gt; for more detail.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sugarizer&lt;/em&gt; simulates the Sugar environment in a browser. So you need&lt;br /&gt;
only a browser to start developing. It&#39;s the better choice if you&#39;ve&lt;br /&gt;
no time or knowledge to learn how to install or build Sugar desktop&lt;br /&gt;
on a GNU Linux distribution but you&#39;re not in a Sugar desktop&lt;br /&gt;
environment, so your activity may only work in Sugarizer.&lt;/p&gt;
&lt;h3 id=&quot;create-the-activity-from-the-template&quot; tabindex=&quot;-1&quot;&gt;Create the activity from the template&lt;/h3&gt;
&lt;p&gt;On &lt;em&gt;packaged sugar&lt;/em&gt;, after you have built the development&lt;br /&gt;
environment, clone the &lt;a href=&quot;https://github.com/llaske/Sugarizer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugarizer repository&lt;/a&gt;.&lt;br /&gt;
Install volo through npm.&lt;/p&gt;
&lt;p&gt;npm install -g volo&lt;/p&gt;
&lt;p&gt;Create an activity based on the default template&lt;/p&gt;
&lt;p&gt;cd sugarizer/activities&lt;br /&gt;
volo create MyActivity.activity ./ActivityTemplate&lt;br /&gt;
cd MyActivity.activity&lt;/p&gt;
&lt;p&gt;On &lt;em&gt;Sugarizer&lt;/em&gt;, after you&#39;ve cloned - or copied - the &lt;a href=&quot;https://github.com/llaske/Sugarizer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugarizer&lt;br /&gt;
repository&lt;/a&gt;, copy all content of&lt;br /&gt;
&lt;code&gt;activities/ActivityTemplate&lt;/code&gt; directory in a new directory&lt;br /&gt;
&lt;code&gt;activities/MyActivity.activity&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;customize&quot; tabindex=&quot;-1&quot;&gt;Customize&lt;/h3&gt;
&lt;p&gt;Choose a name for your activity.  Write it in the activity name and&lt;br /&gt;
bundle-id in &lt;code&gt;activity/activity.info&lt;/code&gt; of the new directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/activity-info.png&quot; alt=&quot;activity.info&quot; title=&quot;activity.info&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And also in the title tag of &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/activity-html.png&quot; alt=&quot;index.html&quot; title=&quot;index.html&quot; /&gt;&lt;/p&gt;
&lt;p&gt;On &lt;em&gt;packaged sugar&lt;/em&gt;, install the activity for development&lt;/p&gt;
&lt;p&gt;python &lt;a href=&quot;http://setup.py/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;setup.py&lt;/a&gt; dev&lt;/p&gt;
&lt;p&gt;On &lt;em&gt;Sugarizer&lt;/em&gt;, update the file &lt;code&gt;activities.json&lt;/code&gt; of the Sugarizer directory: add a new line for your activity. Update id, name and directory values on this new line.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/sugarizer-json.png&quot; alt=&quot;Sugarizer settings&quot; title=&quot;Sugarizer settings&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now you should have a basic activity running!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/activity-template.png&quot; alt=&quot;Activity template&quot; title=&quot;Activity template&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;file-structure&quot; tabindex=&quot;-1&quot;&gt;File structure&lt;/h3&gt;
&lt;p&gt;In your new activity, you will find the following file structure:&lt;/p&gt;
&lt;p&gt;MyActivity.activity/&lt;br /&gt;
|-- activity/&lt;br /&gt;
|   |-- &lt;a href=&quot;http://activity.info/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;activity.info&lt;/a&gt;&lt;br /&gt;
|   &lt;code&gt;-- activity-icon.svg     |-- index.html     |-- css/     |   &lt;/code&gt;-- activity.css&lt;br /&gt;
|-- js/&lt;br /&gt;
|   |-- activity.js&lt;br /&gt;
|   &lt;code&gt;-- loader.js     |-- lib/     |-- package.json     &lt;/code&gt;-- &lt;a href=&quot;http://setup.py/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;setup.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;activity/&lt;/code&gt; contains information about your activity, including the&lt;br /&gt;
name, ID, and the icon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; is where the elements that compose your activity are&lt;br /&gt;
defined.  The template comes with a toolbar and a canvas where you&lt;br /&gt;
can place your content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;js/activity.js&lt;/code&gt; is where the logic of your activity lives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;css/activity.css&lt;/code&gt; is where you add the styling of your activity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those are the files you&#39;ll modify in most cases. The others are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;js/loader.js&lt;/code&gt; configures the libraries paths and loads your&lt;br /&gt;
&lt;code&gt;js/activity.js&lt;/code&gt; . You can add &lt;a href=&quot;https://sugardocs.vercel.app/#non-amd%20libs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;non-AMD libraries&lt;/a&gt; here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lib/&lt;/code&gt; contains the libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; contains information about the libraries the activity&lt;br /&gt;
depends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setup.py&lt;/code&gt; lets you install your activity or make an installable&lt;br /&gt;
bundle with it&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you are ready to go ahead and develop your activity in the html,&lt;br /&gt;
js and css directories.&lt;/p&gt;
&lt;h3 id=&quot;revision-control-your-code&quot; tabindex=&quot;-1&quot;&gt;Revision control your code&lt;/h3&gt;
&lt;p&gt;For development you can initialize the repository as a git&lt;br /&gt;
repository. This will help you to track your changes. First use &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-init.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;git&lt;br /&gt;
init&lt;/a&gt;&lt;br /&gt;
to initialize the repository:&lt;/p&gt;
&lt;p&gt;git init&lt;/p&gt;
&lt;p&gt;With &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-status.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;git&lt;br /&gt;
status&lt;/a&gt;&lt;br /&gt;
you can show the available files in the folder they are still&lt;br /&gt;
untracked. Now add all the files in the directory besides the lib&lt;br /&gt;
folder and commit those changes, you can use git status again to see&lt;br /&gt;
the current state:&lt;/p&gt;
&lt;p&gt;git add .&lt;br /&gt;
git commit -a -m &#39;Initial import&#39;&lt;br /&gt;
git status&lt;/p&gt;
&lt;h3 id=&quot;first-steps&quot; tabindex=&quot;-1&quot;&gt;First steps&lt;/h3&gt;
&lt;h4 id=&quot;adding-a-button-to-the-toolbar&quot; tabindex=&quot;-1&quot;&gt;Adding a button to the toolbar&lt;/h4&gt;
&lt;p&gt;This simple example will show you how web activities are structured as&lt;br /&gt;
bits of HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;You will need a SVG graphic for the button.  Or you can use one from&lt;br /&gt;
the Sugar icon set at &lt;code&gt;lib/sugar-web/graphics/icons/&lt;/code&gt;.  For this&lt;br /&gt;
example, let&#39;s say you have one custom icon called &lt;code&gt;my-button.svg&lt;/code&gt;.&lt;br /&gt;
Create a directory &lt;code&gt;icons/&lt;/code&gt; inside your activity and place the SVG&lt;br /&gt;
file inside.  Then do the following steps.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;index.html&lt;/code&gt;, add a new &amp;lt;button&amp;gt; element inside the toolbar:&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;toolbutton&quot; id=&quot;my-button&quot; title=&quot;My Button&quot;&gt;&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;css/activity.css&lt;/code&gt;, define the button style:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#main-toolbar&quot;&gt;#main-toolbar&lt;/a&gt; &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#my-button&quot;&gt;#my-button&lt;/a&gt; {&lt;br /&gt;
background-image: url(../icons/my-button.svg);&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;js/activity.js&lt;/code&gt;, add a callback for the button:&lt;/p&gt;
&lt;p&gt;var myButton = document.getElementById(&amp;quot;my-button&amp;quot;);&lt;br /&gt;
myButton.onclick = function () {&lt;br /&gt;
console.log(&amp;quot;You clicked me!&amp;quot;);&lt;br /&gt;
}&lt;/p&gt;
&lt;h4 id=&quot;adding-html-content-dynamically&quot; tabindex=&quot;-1&quot;&gt;Adding HTML content dynamically&lt;/h4&gt;
&lt;p&gt;Soon you will find that adding content to the HTML as we did with the&lt;br /&gt;
toolbar button in the previous section, is very limited.  You&#39;ll want&lt;br /&gt;
to add HTML elements on the fly, as the user interacts with the&lt;br /&gt;
activity, or as the data structures of your activity logic change.&lt;br /&gt;
There are several options to archive this.  Most of the time you&#39;ll&lt;br /&gt;
end up using a mix of them, so it is important to know them all.&lt;/p&gt;
&lt;p&gt;First, it is possible to create HTML elements and append them to other&lt;br /&gt;
HTML elements using JavaScript.  This is called &amp;quot;manipulating the&lt;br /&gt;
DOM&amp;quot;.&lt;/p&gt;
&lt;p&gt;For example, to create a new div with class &#39;my-div&#39;, and append it to&lt;br /&gt;
the canvas div, you can do:&lt;/p&gt;
&lt;p&gt;myElem = document.createElement(&#39;div&#39;);&lt;br /&gt;
myElem.className = &amp;quot;my-div&amp;quot;;&lt;br /&gt;
var canvas = document.getElementById(&amp;quot;canvas&amp;quot;);&lt;br /&gt;
canvas.appendChild(myElem);&lt;/p&gt;
&lt;p&gt;But it is a pain to do that for large HTML structures.  Writing HTML&lt;br /&gt;
directly is much better:&lt;/p&gt;
&lt;p&gt;var canvas = document.getElementById(&amp;quot;canvas&amp;quot;);&lt;br /&gt;
canvas.innerHTML +=&lt;br /&gt;
&#39;&lt;/p&gt;&lt;ul id=&quot;names-list&quot;&gt;&#39; +&lt;br /&gt;
&#39;&lt;li class=&quot;name&quot;&gt;Tom&lt;/li&gt;&#39; +&lt;br /&gt;
&#39;&lt;li class=&quot;name&quot;&gt;Chris&lt;/li&gt;&#39; +&lt;br /&gt;
&#39;&lt;li class=&quot;name&quot;&gt;Donald&lt;/li&gt;&#39; +&lt;br /&gt;
&#39;&lt;/ul&gt;&#39;;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Nice, that saves us many JavaScript lines.  But what if the HTML&lt;br /&gt;
depends on your data?  Let&#39;s say you have an array of names and you&lt;br /&gt;
want one &amp;lt;li&amp;gt; per name, as in the previous example.  You have&lt;br /&gt;
two options: 1. go back to use the JavaScript methods for DOM&lt;br /&gt;
manipulation, or 2. use a template system.&lt;/p&gt;
&lt;p&gt;There are many template systems out there, and you can use whatever&lt;br /&gt;
you like.  Let&#39;s try &lt;a href=&quot;http://mustache.github.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;mustache&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;Add mustache to your activity:&lt;/p&gt;
&lt;p&gt;volo add mustache&lt;/p&gt;
&lt;p&gt;Import mustache in your &lt;code&gt;js/activity.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var mustache = require(&amp;quot;mustache&amp;quot;);&lt;/p&gt;
&lt;p&gt;Use it:&lt;/p&gt;
&lt;p&gt;var template =&lt;br /&gt;
&#39;&lt;/p&gt;&lt;ul id=&quot;names-list&quot;&gt;&#39; +&lt;br /&gt;
&#39;{{#names}}&#39; +&lt;br /&gt;
&#39;&lt;li class=&quot;name&quot;&gt;{{ name }}&lt;/li&gt;&#39; +&lt;br /&gt;
&#39;{{/names}}&#39; +&lt;br /&gt;
&#39;&lt;/ul&gt;&#39;;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;var data = {names: [{name: &amp;quot;Laura&amp;quot;}, {name: &amp;quot;Joao&amp;quot;},&lt;br /&gt;
{name: &amp;quot;Willy&amp;quot;}, {name: &amp;quot;Sandra&amp;quot;}]};&lt;/p&gt;
&lt;p&gt;var containerElem = document.getElementById(&amp;quot;container&amp;quot;);&lt;br /&gt;
containerElem.innerHTML = mustache.render(template, data);&lt;/p&gt;
&lt;h3 id=&quot;debugging&quot; tabindex=&quot;-1&quot;&gt;Debugging&lt;/h3&gt;
&lt;p&gt;If you want to inspect the code, you can press ctrl+shift+I while your&lt;br /&gt;
Activity is running.&lt;/p&gt;
&lt;p&gt;The inspector is a very useful tool for many things. For example, you&lt;br /&gt;
can edit the activity CSS or HTML, and interactively see how it is&lt;br /&gt;
affected. Or you can execute JavaScript commands in the console.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/activity-inspector.png&quot; alt=&quot;Activity inspector&quot; title=&quot;Activity inspector&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It has also more advanced tools for JavaScript debugging. They are&lt;br /&gt;
nicely documented here:&lt;br /&gt;
&lt;a href=&quot;https://developers.google.com/chrome-developer-tools/docs/javascript-debugging&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://developers.google.com/chrome-developer-tools/docs/javascript-debugging&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;keeping-sugar-libraries-up-to-date&quot; tabindex=&quot;-1&quot;&gt;Keeping Sugar libraries up to date&lt;/h3&gt;
&lt;p&gt;The activity depends on the&lt;br /&gt;
&lt;a href=&quot;http://github.com/sugarlabs/sugar-web&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sugar-web&lt;/a&gt; library&lt;br /&gt;
that provides the Sugar API and the Sugar look &amp;amp; feel.&lt;/p&gt;
&lt;p&gt;This means that if there are changes to the library you have to update&lt;br /&gt;
your local copy. You can do this with running&lt;br /&gt;
the following command inside the activity directory:&lt;/p&gt;
&lt;p&gt;volo add -f&lt;/p&gt;
&lt;h3 id=&quot;using-other-java-script-libraries&quot; tabindex=&quot;-1&quot;&gt;Using other JavaScript libraries&lt;/h3&gt;
&lt;h4 id=&quot;amd-ready&quot; tabindex=&quot;-1&quot;&gt;AMD-ready&lt;/h4&gt;
&lt;p&gt;You can easily add AMD-ready libraries with volo.  For example, to add&lt;br /&gt;
&lt;a href=&quot;http://raphaeljs.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;RaphaelJS&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;$ volo add DmitryBaranovskiy/raphael&lt;br /&gt;
Downloading: &lt;a href=&quot;https://codeload.github.com/DmitryBaranovskiy/raphael/legacy.zip/v2.1.2&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://codeload.github.com/DmitryBaranovskiy/raphael/legacy.zip/v2.1.2&lt;/a&gt;&lt;br /&gt;
Installed github:DmitryBaranovskiy/raphael/v2.1.2 at lib/raphael.js&lt;br /&gt;
AMD dependency name: raphael&lt;/p&gt;
&lt;p&gt;Then in &lt;code&gt;js/activity.js&lt;/code&gt; you can use it:&lt;/p&gt;
&lt;p&gt;var raphael = require(&amp;quot;raphael&amp;quot;);&lt;/p&gt;
&lt;h4 id=&quot;non-amd-libs&quot; tabindex=&quot;-1&quot;&gt;non-AMD libs&lt;/h4&gt;
&lt;p&gt;Please, refer to&lt;br /&gt;
RequiresJS &lt;a href=&quot;http://requirejs.org/docs/api.html#config-shim&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;shim section&lt;/a&gt;,&lt;br /&gt;
then you can add your shim section in &lt;code&gt;js/loader.js&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;ready-to-release&quot; tabindex=&quot;-1&quot;&gt;Ready to release&lt;/h3&gt;
&lt;p&gt;Before your first release, you should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make your activity unique in the Sugar interface by changing your&lt;br /&gt;
activity icon activity/activity-icon.svg .  Or if you don&#39;t have&lt;br /&gt;
graphics skills, you can ask in the community if someone can do it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, if the activity works with Sugar 0.112 or earlier, on&lt;br /&gt;
&lt;em&gt;packaged-sugar&lt;/em&gt; you may make a bundle and upload it to the Sugar&lt;br /&gt;
Activity Library &lt;a href=&quot;http://activities.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://activities.sugarlabs.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;python &lt;a href=&quot;http://setup.py/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;setup.py&lt;/a&gt; dist_xo&lt;/p&gt;
&lt;p&gt;With &lt;strong&gt;Sugarizer&lt;/strong&gt;, you can directly publish the XO bundle. So, just zip the content of your &lt;code&gt;activities/MyActivity.activity&lt;/code&gt; directory and rename the &lt;code&gt;.zip&lt;/code&gt; file to a &lt;code&gt;.xo&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;For further releases, you should update the activity_version in&lt;br /&gt;
&lt;code&gt;activity/activity.info&lt;/code&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/web-activity/" />
        </entry>
        <entry>
            <title>
                sugar-on-debian
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/sugar-on-debian/</id>
            <content type="html">
                &lt;h1 id=&quot;tutorial-on-installing-sugar-on-debian&quot; tabindex=&quot;-1&quot;&gt;Tutorial on installing Sugar on Debian&lt;/h1&gt;
&lt;h2 id=&quot;get-debian&quot; tabindex=&quot;-1&quot;&gt;Get Debian&lt;/h2&gt;
&lt;p&gt;Download the Debian 10 (Buster) ISO.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I suggest downloading the &lt;code&gt;standard&lt;/code&gt; edition ISO because it is smaller and because the Desktop Environment will get removed while installing Sugar. Current &lt;code&gt;standard&lt;/code&gt; edition for &lt;code&gt;amd64&lt;/code&gt; linked &lt;a href=&quot;https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Install the Debian ISO on a system or Virtual Machine.&lt;/p&gt;
&lt;h2 id=&quot;install-sugar-0-112-6-on-debian-10-buster&quot; tabindex=&quot;-1&quot;&gt;Install Sugar 0.112-6 on Debian 10 (Buster)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Update Debian repositories and install Sugar
sudo apt update
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install Sugar, its dependencies
sudo apt install sucrose lightdm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reboot and login to Sugar.&lt;br /&gt;
Done 🎉&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tutorial to login to Sugar is &lt;a href=&quot;https://github.com/sugarlabs/sugar-docs/blob/master/src/sugar-logging-in.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;install-sugar-0-117-3-on-debian-11-bullseye&quot; tabindex=&quot;-1&quot;&gt;Install Sugar 0.117-3 on Debian 11 (Bullseye)&lt;/h2&gt;
&lt;p&gt;Let&#39;s set default package repository to &lt;code&gt;unstable&lt;/code&gt;. This is because Sugar 0.117 and above are only available in the Debian &lt;code&gt;unstable&lt;/code&gt; repositories.&lt;br /&gt;
eg. using the nano editor&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# create a new apt config file
nano /etc/apt/apt.conf.d/my-default-release

# Add this line to the file, then press CTRL-X to save it
APT::Default-Release &amp;quot;unstable&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update Debian and install Sugar&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Let&#39;s update Debian. Should update to Debian 11 (Bullseye)
sudo apt update
sudo apt upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install Sugar, its dependencies
# gcc-8-base is a dependency of Sugar 0.117
# libglib2.0-dev is a dependency of the Browse activity
# lightdm is a desktop manager which we will use to select Sugar while logging in
sudo apt install sucrose gcc-8-base libglib2.0-dev lightdm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reboot and login to Sugar.&lt;br /&gt;
Done 🎉&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tutorial to login to Sugar is &lt;a href=&quot;https://github.com/sugarlabs/sugar-docs/blob/master/src/sugar-logging-in.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;post-install&quot; tabindex=&quot;-1&quot;&gt;Post install&lt;/h2&gt;
&lt;p&gt;This part is completely optional. These programs help in debugging/developing Sugar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# install multitail and ssh
apt install multitail openssh-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setup colorful Multitail logs (Makes it easier to identify errors and warnings)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Paste the snippet into /etc/multitail.conf
# Or save as .multitailrc in the home directory

# Sugar
colorscheme:sugar
cs_re:green:DEBUG
cs_re:red:^(([a-zA-Z]*Error)|Traceback).*$
cs_re:yellow:^.*(Warning|WARNING).*$
cs_re_s:blue:([0-9]{10,}&#92;.[0-9]{6,})
#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can view logs with &lt;code&gt;multitail&lt;/code&gt; using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ~/.sugar/default/logs/ &amp;amp;&amp;amp; multitail -CS sugar -iw &amp;quot;*ACTIVITY_NAME*&amp;quot; 1 -m 0
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure to replace &lt;code&gt;ACTIVITY_NAME&lt;/code&gt; with the name of the Activity whose logs you are trying to view. eg. &lt;code&gt;Pippy&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/sugar-on-debian/" />
        </entry>
        <entry>
            <title>
                sugar-logging-in
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/sugar-logging-in/</id>
            <content type="html">
                &lt;h1 id=&quot;guide-to-logging-in-with-the-sugar-desktop&quot; tabindex=&quot;-1&quot;&gt;Guide to logging in with the Sugar desktop&lt;/h1&gt;
&lt;p&gt;You may have installed Sugar on Debian/Ubuntu, Fedora, any other distribution by following the Sugar documentation or may have installed the Sugar Live Build on a Virtual Machine.&lt;/p&gt;
&lt;p&gt;Each Linux distribution comes with a Display Manager.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Display Manager (DM) is essentially a graphical login program, that&lt;br /&gt;
lets you switch users or switch desktop environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The most popular display managers are &lt;code&gt;GDM&lt;/code&gt;, &lt;code&gt;LightDM&lt;/code&gt;, and &lt;code&gt;SDDM&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GDM&lt;/code&gt; is used with the GNOME desktop environment on Debian, Ubuntu and Fedora.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LightDM&lt;/code&gt; is used with Raspbian on Raspberry Pi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SDDM&lt;/code&gt; is used with KDE.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To log in with the Sugar Desktop, select &lt;strong&gt;Sugar&lt;/strong&gt; at the login screen before logging in.  Depending on the display manager, you may have to select a &lt;code&gt;gear icon&lt;/code&gt;, &lt;code&gt;wrench icon&lt;/code&gt; or a &lt;code&gt;dropdown menu&lt;/code&gt; to do this.&lt;/p&gt;
&lt;h2 id=&quot;some-examples-are-shown-below&quot; tabindex=&quot;-1&quot;&gt;Some examples are shown below:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;GDM&lt;/strong&gt; - Demonstrated on &lt;em&gt;Sugar Live Build (Debian)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;Sugar&lt;/code&gt; after clicking the &lt;code&gt;gear&lt;/code&gt; icon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/gdm3-sugar-live-build.gif&quot; alt=&quot;Live Build Debian GDM&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LIGHTDM&lt;/strong&gt; - Demonstrated on &lt;em&gt;Sugar Live Build (Debian)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;Sugar&lt;/code&gt; after clicking the &lt;code&gt;gnome footprint icon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/lightdm-sugar-live-build.gif&quot; alt=&quot;Live Build Debian LIGHTDM&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDM&lt;/strong&gt; - on &lt;em&gt;Ubuntu (Groovy Gorilla)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;Sugar&lt;/code&gt; from the &lt;code&gt;gear icon&lt;/code&gt; on the right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/gdm3-ubuntu-20.10.gif&quot; alt=&quot;Ubuntu Groovy Gorilla GDM&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GDM&lt;/strong&gt; - Demonstrated on &lt;em&gt;Ubuntu (Focal Fossa)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;Sugar&lt;/code&gt; from the &lt;code&gt;gear icon&lt;/code&gt; on the right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/gdm3-ubuntu-20.04.gif&quot; alt=&quot;Ubuntu Focal Fossa GDM&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SDDM&lt;/strong&gt; - Demonstrated on &lt;em&gt;Manjaro&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch user and select &lt;code&gt;Sugar&lt;/code&gt; from the &lt;code&gt;drop down&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/sddm-manjaro.gif&quot; alt=&quot;Manjaro SDDM&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;see-also&quot; tabindex=&quot;-1&quot;&gt;See Also&lt;/h2&gt;
&lt;p&gt;You can take a look at other Display Managers &lt;a href=&quot;https://wiki.debian.org/DisplayManager&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;here (Debian Wiki)&lt;/a&gt; and &lt;a href=&quot;https://wiki.archlinux.org/index.php/Display_manager&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;here (Arch Wiki).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.gnome.org/GNOME/gdm&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://gitlab.gnome.org/GNOME/gdm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/canonical/lightdm&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/canonical/lightdm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sddm/sddm&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sddm/sddm&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/sugar-logging-in/" />
        </entry>
        <entry>
            <title>
                sugar-iconify
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/sugar-iconify/</id>
            <content type="html">
                &lt;h1 id=&quot;sugar-iconify&quot; tabindex=&quot;-1&quot;&gt;Sugar Iconify&lt;/h1&gt;
&lt;h2 id=&quot;description&quot; tabindex=&quot;-1&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;Sugar uses entities for its SVG colors in order to match the icon&lt;br /&gt;
colors to the user colors.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://sugariconify.py/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sugariconify.py&lt;/a&gt; script is used to convert SVGs into the format&lt;br /&gt;
required for Sugar icons, adding the necessary stroke and fill&lt;br /&gt;
entities. This is a Python script, and as such requires Python to run.&lt;br /&gt;
It will create Sugar-compatible SVG icons from an &lt;code&gt;input.svg&lt;/code&gt; by&lt;br /&gt;
adding the appropriate stroke and fill entities. It can be used to&lt;br /&gt;
convert a single icon or run over a batch of icons at one time.&lt;/p&gt;
&lt;p&gt;You can find the script in the &lt;a href=&quot;https://github.com/sugarlabs/sugariconify/blob/master/sugariconify.py&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sugariconify repository&lt;/a&gt;.  You can find a web version at &lt;a href=&quot;https://github.com/sugarlabs/iconify-web&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/iconify-web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For creating an SVG suitable for Sugar,&lt;br /&gt;
see the tutorial on &lt;a href=&quot;http://wiki.sugarlabs.org/go/Development_Team/Almanac/Making_Icons&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Making Sugar&lt;br /&gt;
Icons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, you may desire to update a single icon, or a subset of&lt;br /&gt;
the icons defined within a given SVG. To do so, pass a pattern to the&lt;br /&gt;
script with -p, and only those icons which match the pattern will be&lt;br /&gt;
exported.&lt;/p&gt;
&lt;h3 id=&quot;usage&quot; tabindex=&quot;-1&quot;&gt;Usage&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sugariconify.py [-ceghipv] [-s stroke_hex] [-f fill_hex] [-m | -o ] [-d directory] input.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python sugariconify.py input.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Options&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   -c    Apply default color entities (#666666, &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#FFFFFF&quot;&gt;#FFFFFF&lt;/a&gt;) to output 
   -d    [directory] The preferred output directory 
   -e    Do not insert entities for strokes and fills 
   -f    [hex] Hex value to replace with fill entity 
   -g    Automatically accept guesses for stroke and fill entities 
   -h    Display this help message 
   -i    Insert &amp;quot;isolated stroke&amp;quot; entities 
   -m    Multiple export; export top level groups as separate icons 
   -o    Modify input file in place, overwriting it; overridden by -m 
   -p    [pattern] Only export icons whose name contains pattern 
   -s    [hex] Hex value to replace with stroke entity 
   -v    Verbose 
   -x    Create HTML preview files, for icon validation 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: A common problem encountered when using this script is when the&lt;br /&gt;
target SVG has more than two colors.&lt;/p&gt;
&lt;h3 id=&quot;details&quot; tabindex=&quot;-1&quot;&gt;Details&lt;/h3&gt;
&lt;p&gt;Given a simple input SVG:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;svg
   xmlns:dc=&amp;quot;http://purl.org/dc/elements/1.1/&amp;quot;
   xmlns:cc=&amp;quot;http://creativecommons.org/ns#&amp;quot;
   xmlns:rdf=&amp;quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;quot;
   xmlns:svg=&amp;quot;http://www.w3.org/2000/svg&amp;quot;
   xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;
   version=&amp;quot;1.1&amp;quot;
   viewBox=&amp;quot;0 0 55 55&amp;quot;
   height=&amp;quot;55mm&amp;quot;
   width=&amp;quot;55mm&amp;quot;&amp;gt;
  &amp;lt;rect
      y=&amp;quot;2.5&amp;quot;
      x=&amp;quot;2.5&amp;quot;
      height=&amp;quot;50&amp;quot;
      width=&amp;quot;50&amp;quot;
      style=&amp;quot;fill:#ffff00;fill-opacity:1;stroke:#ff0000;stroke-width:3.5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1&amp;quot; /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting output would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE svg  PUBLIC &#39;-//W3C//DTD SVG 1.1//EN&#39;
          &#39;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&#39; [
        &amp;lt;!ENTITY stroke_color &amp;quot;#666666&amp;quot;&amp;gt;
        &amp;lt;!ENTITY fill_color &amp;quot;#ffffff&amp;quot;&amp;gt;
]&amp;gt;
&amp;lt;svg
   xmlns:dc=&amp;quot;http://purl.org/dc/elements/1.1/&amp;quot;
   xmlns:cc=&amp;quot;http://creativecommons.org/ns#&amp;quot;
   xmlns:rdf=&amp;quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;quot;
   xmlns:svg=&amp;quot;http://www.w3.org/2000/svg&amp;quot;
   xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;
   version=&amp;quot;1.1&amp;quot;
   viewBox=&amp;quot;0 0 55 55&amp;quot;
   height=&amp;quot;55mm&amp;quot;
   width=&amp;quot;55mm&amp;quot;&amp;gt;
     &amp;lt;rect
  &amp;lt;rect
      y=&amp;quot;2.5&amp;quot;
      x=&amp;quot;2.5&amp;quot;
      height=&amp;quot;50&amp;quot;
      width=&amp;quot;50&amp;quot;
      style=&amp;quot;fill:&amp;amp;fill_color;;fill-opacity:1;stroke:&amp;amp;stroke_color;;stroke-width:3.5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1&amp;quot;/&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;instantiating-sugar-iconify&quot; tabindex=&quot;-1&quot;&gt;Instantiating SugarIconify&lt;/h2&gt;
&lt;p&gt;It is also possible to use SugarIconify in your own Python scripts.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   from sugariconify import SugarIconify
   icon = SugarIconify()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;methods&quot; tabindex=&quot;-1&quot;&gt;Methods&lt;/h2&gt;
&lt;h4 id=&quot;set-stroke-color&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_stroke_color&quot;&gt;#set_stroke_color&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -s on command line, it can be a hex value&lt;br /&gt;
(e.g &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#FFFF00&quot;&gt;#FFFF00&lt;/a&gt;) or a rgb percent value such as rgb(31%, 28%, 56%).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_stroke_color(&#39;#FFFF00&#39;)
   icon.set_stroke_color(&#39;rgb(55%, 12%, 55%)&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-fill-color&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_fill_color&quot;&gt;#set_fill_color&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -f on command line, it can be a hex value&lt;br /&gt;
(e.g &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#FF0000&quot;&gt;#FF0000&lt;/a&gt;) or a rgb percent value such as rgb(32%, 33%, 87%).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_fill_color(&#39;#FFFFFF&#39;)
   icon.set_fill_color(&#39;rgb(55%, 12%, 55%)&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-confirm-guess&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_confirm_guess&quot;&gt;#set_confirm_guess&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -g on command line, so it can automatically&lt;br /&gt;
accept guesses for stroke and fill entities, True or False are&lt;br /&gt;
the only accepted values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_confirm_guess(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-use-default-colors&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_use_default_colors&quot;&gt;#set_use_default_colors&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -c on command line, uses default stroke and&lt;br /&gt;
fill entities (#666666, &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#FFFFFF&quot;&gt;#FFFFFF&lt;/a&gt;) for sugar iconify, True or False&lt;br /&gt;
are the only accepted values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_use_default_colors(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-overwrite-input&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_overwrite_input&quot;&gt;#set_overwrite_input&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -o on command line, overrides input file in&lt;br /&gt;
place, True or False are the only accepted values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_overwrite_input(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-output-path&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_output_path&quot;&gt;#set_output_path&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -d on command line, sets the output path where&lt;br /&gt;
the iconified file will be placed, string values are accepted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_output_path(&#39;/home/user/Desktop&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-use-entity&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_use_entity&quot;&gt;#set_use_entity&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is  equivalent of -e on command line, do not insert entities for&lt;br /&gt;
strokes and fills, True or False are the only accepted values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_use_entity(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-verbose&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_verbose&quot;&gt;#set_verbose&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -v on command line, outputs information messages&lt;br /&gt;
on console, True or False are the only accepted values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_verbose(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-pattern&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_pattern&quot;&gt;#set_pattern&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -p on command line, only export icons whose name&lt;br /&gt;
contains pattern, string values are accepted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_pattern(&#39;pattern&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-multiple&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_multiple&quot;&gt;#set_multiple&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is  equivalent of -m on command line, export top level groups as&lt;br /&gt;
separate icons, True or False are the only accepted values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_multiple(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-output-examples-it-is-equivalent-of-x-on-command-line&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_output_examples&quot;&gt;#set_output_examples&lt;/a&gt;():It is equivalent of -x on command line,&lt;/h4&gt;
&lt;p&gt;create HTML preview files, for icon validation, True or False are&lt;br /&gt;
the only accepted values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_output_examples(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;set-use-iso-strokes&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#set_use_iso_strokes&quot;&gt;#set_use_iso_strokes&lt;/a&gt;():&lt;/h4&gt;
&lt;p&gt;It is equivalent of -i on command line, insert &amp;quot;isolated stroke&amp;quot;&lt;br /&gt;
entities, True or False are the only accepted values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   icon.set_use_iso_strokes(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;   from sugariconify import SugarIconify
   icon = SugarIconify()
   icon.set_use_default_colors(True)
   icon.iconify(&#39;/home/user/Desktop/image.svg&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/sugar-iconify/" />
        </entry>
        <entry>
            <title>
                python-style
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/python-style/</id>
            <content type="html">
                &lt;h1 id=&quot;code-style-for-sugar-python-development&quot; tabindex=&quot;-1&quot;&gt;Code style for Sugar Python development&lt;/h1&gt;
&lt;h2 id=&quot;general&quot; tabindex=&quot;-1&quot;&gt;General&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Avoid lines longer than 79 characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;python&quot; tabindex=&quot;-1&quot;&gt;Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make your code conform to pep8 and pyflakes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use four spaces for indentation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;libraries&quot; tabindex=&quot;-1&quot;&gt;Libraries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New code should be written in Python 3, using GTK+ 3, GStreamer 1.0, etc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use json, ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href=&quot;https://github.com/sugarlabs/sugargame&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sugargame&lt;/a&gt; when interfacing to pygames&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conventions&quot; tabindex=&quot;-1&quot;&gt;Conventions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Methods documentation should be &amp;quot;attached&amp;quot; to the methods (See &lt;a href=&quot;http://www.python.org/dev/peps/pep-0257&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://www.python.org/dev/peps/pep-0257&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/python-style/" />
        </entry>
        <entry>
            <title>
                python-porting-guide
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/python-porting-guide/</id>
            <content type="html">
                &lt;h1 id=&quot;python-3-porting-guide&quot; tabindex=&quot;-1&quot;&gt;Python 3 Porting Guide&lt;/h1&gt;
&lt;p&gt;Guide to porting Sugar Activities to Python 3.&lt;/p&gt;
&lt;p&gt;Many activities were written in Python 2 with the PyGObject introspection library, GTK, GDK, GStreamer, and other dependencies.  Activities usually did not have test cases or test coverage.&lt;/p&gt;
&lt;h2 id=&quot;required-skills&quot; tabindex=&quot;-1&quot;&gt;Required Skills&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;application development in Python,&lt;/li&gt;
&lt;li&gt;Sugar activity development,&lt;/li&gt;
&lt;li&gt;knowledge of differences between Python 2 and Python 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;how-to-port-an-activity-to-python-3&quot; tabindex=&quot;-1&quot;&gt;How to Port an Activity to Python 3:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quiesce the activity source by making sure the activity works properly before porting, closing any solved issues, merging any pull requests or branches and releasing the last Python 2 version; see the &lt;a href=&quot;https://sugardocs.vercel.app/contributing.md#checklist---maintainer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;activity maintainer checklist&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check that a Python 3 port has not already been done; look for a &lt;em&gt;python3&lt;/em&gt; branch in the main repository, or any developer fork.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For activities known to work with Fedora 18, create a &lt;em&gt;fedora18&lt;/em&gt; branch and push; this branch will be for any future maintenance with Python 2,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Sugar Toolkit for GTK 3 version 0.115 or later, built for Python 3, and test that &lt;code&gt;/usr/bin/python3&lt;/code&gt; can import it, for example;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python3 -c &#39;import sugar3&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prepare a test plan to cover each feature and user interface widget, and consider &lt;a href=&quot;https://sugardocs.vercel.app/src/python-coverage-guide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;assessing coverage&lt;/a&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the activity uses &lt;code&gt;telepathy-python&lt;/code&gt;, test and fix collaboration, then port to PyGObject binding &lt;code&gt;TelepathyGLib&lt;/code&gt;, and test again, for example;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import telepathy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository import TelepathyGLib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use constants from &lt;code&gt;TelepathyGLib&lt;/code&gt;, and minimise changes, for example;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from telepathy.interfaces import CHANNEL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;CHANNEL = TelepathyGLib.IFACE_CHANNEL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace calls to &lt;code&gt;Channel&lt;/code&gt; and &lt;code&gt;Connection&lt;/code&gt; classes of&lt;br /&gt;
&lt;code&gt;telepathy-python&lt;/code&gt; with a dictionary of &lt;code&gt;dbus.Interface()&lt;/code&gt;.  Look&lt;br /&gt;
through the source code for constants used by &lt;code&gt;Channel&lt;/code&gt; and &lt;code&gt;Connection&lt;/code&gt;&lt;br /&gt;
objects as keys.  Use these constants as keys to a dictionary of the&lt;br /&gt;
&lt;code&gt;dbus.Interface()&lt;/code&gt; objects.  For example;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Channel(self._connection.requested_bus_name, channel_path,
  ready_handler=self.__text_channel_ready_cb)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should change to (ensure adding all key-interface pairs):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;self.text_channel = {}
self.text_proxy = dbus.Bus().get_object(
          self._connection.requested_bus_name, channel_path)
self.text_channel[PROPERTIES_IFACE] = dbus.Interface(
          self.text_proxy, PROPERTIES_IFACE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace all bare references to &lt;code&gt;telepathy_text_chan&lt;/code&gt; and&lt;br /&gt;
&lt;code&gt;telepathy_tubes_chan&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;self.telepathy_text_chan.AddMembers(
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;self.telepathy_text_chan[CHANNEL].AddMembers(
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test and fix collaboration before proceeding further.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the activity uses &lt;code&gt;dbus.gobject_service.ExportedGObject&lt;/code&gt; (deprecated and only available for Python 2), then port to &lt;code&gt;CollabWrapper&lt;/code&gt;, and test again,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the activity uses &lt;code&gt;dbus&lt;/code&gt; directly, refer to &lt;a href=&quot;https://dbus.freedesktop.org/doc/dbus-python/PY3PORT.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;dbus-python Porting to Python 3&lt;/a&gt;, and test again,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Port from Python 2 to Python 3.&lt;br /&gt;
Start your porting with &lt;a href=&quot;https://docs.python.org/3.0/library/2to3.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2to3&lt;/a&gt; tool,&lt;br /&gt;&lt;br /&gt;
In the terminal, type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;2to3 -w -n *.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then review every change made,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterate through &lt;a href=&quot;https://docs.python.org/3/howto/pyporting.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;How to Port Python 2 code to Python 3 | Python Docs&lt;/a&gt; (most Sugar activities being ported to Python 3 do not &lt;em&gt;need&lt;/em&gt; to support Python 2 as well), and &lt;a href=&quot;http://python3porting.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Supporting Python 3: An in-depth guide&lt;/a&gt; changing code,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for integer divisions that have become floating point,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for use of binary data, especially in files, pipes, and subprocesses,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for use of &lt;em&gt;Gtk.CssProvider&lt;/em&gt;, and if so ensure the &lt;em&gt;load_from_data&lt;/em&gt; function is given bytes rather than unicode strings, e.g. `b&amp;quot;...&amp;quot;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for use of &lt;em&gt;Rsvp.new_from_data&lt;/em&gt; for making images from SVG data, and if so ensure the function is given bytes rather than unicode strings,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;exec&lt;/code&gt; value in &lt;code&gt;activity.info&lt;/code&gt; from &lt;code&gt;sugar-activity&lt;/code&gt; to &lt;code&gt;sugar-activity3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make Sugar Home View reload the bundle; by restarting Sugar or moving the bundle directory out of &lt;code&gt;~/Activities&lt;/code&gt; and back again a few seconds later,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test the activity from Sugar, that it starts without error, that no warnings or errors are in logs, and that each user function works as before,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if the activity can be built,&lt;br /&gt;&lt;br /&gt;
In the terminal, type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;python3 setup.py dist_xo
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release a new version,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update &lt;a href=&quot;http://readme.md/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;README.md&lt;/a&gt; to point to the released bundle,&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://github.com/sugarlabs/sugar-docs/blob/master/src/contributing.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Code Guidelines&lt;/a&gt; during all porting.&lt;/p&gt;
&lt;p&gt;Write any comments in the code, by adding &lt;strong&gt;# README:&lt;/strong&gt;, &lt;strong&gt;# TODO:&lt;/strong&gt; and &lt;strong&gt;# FIXME:&lt;/strong&gt; explaining what are the problems that you are having with that chunk of code. Put a link if it&#39;s necessary.&lt;/p&gt;
&lt;h2 id=&quot;releasing-activities-for-maintainers&quot; tabindex=&quot;-1&quot;&gt;Releasing Activities (for maintainers)&lt;/h2&gt;
&lt;p&gt;Once an activity is ported, a new release can be made. The major version&lt;br /&gt;
should be greater than the existing one.&lt;/p&gt;
&lt;p&gt;Please follow&lt;br /&gt;
&lt;a href=&quot;https://sugardocs.vercel.app/contributing.md#checklist---maintainer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;this&lt;/a&gt;&lt;br /&gt;
guide for releasing a new version.&lt;/p&gt;
&lt;p&gt;Avoid releasing Python 3 activities to &lt;a href=&quot;https://activities.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://activities.sugarlabs.org/&lt;/a&gt; as these will not work on existing systems.&lt;/p&gt;
&lt;h2 id=&quot;resources&quot; tabindex=&quot;-1&quot;&gt;Resources:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.0/whatsnew/3.0.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;What&#39;s new in Python 3 | Python Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/howto/pyporting.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;How to Port Python 2 code to Python 3 | Python Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.0/library/2to3.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2to3 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;porting-examples&quot; tabindex=&quot;-1&quot;&gt;Porting Examples:&lt;/h2&gt;
&lt;p&gt;Here are some examples of porting activities to Python 3:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/spirolaterals/pull/12/commits/d5e95a86e987e54e1dd41255c00079f21963ab92&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Spirolaterals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/finance-activity/pull/16/commits/e36bdf4f5f6873e3c2f645aa218784bca90a463f&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Finance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/activity-abacus/pull/15/commits/60b264147ff401f0976cce3c24326c4f63f3621b&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Abacus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/write-activity/pull/24/commits/4fc05b3b78a40d5631d1a7b7bda04b1d82920dd8&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Write&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/log-activity/pull/9/commits/c39db017968fea18ec4bf6c24c4e359ab95b49fa&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/CowBulls-activity/commit/02a2727f8a11784dad9b711b0684ff2f2b261363&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CowBulls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;common-questions&quot; tabindex=&quot;-1&quot;&gt;Common Questions&lt;/h2&gt;
&lt;h3 id=&quot;why-does-my-traceback-show-python-2&quot; tabindex=&quot;-1&quot;&gt;Why does my traceback show Python 2?&lt;/h3&gt;
&lt;p&gt;Check that you have changed &lt;code&gt;exec&lt;/code&gt; in &lt;code&gt;activity.info&lt;/code&gt;, and that Sugar has been restarted.&lt;/p&gt;
&lt;h3 id=&quot;why-does-and-quot-consider-porting-to-python-3-and-quot-still-appear&quot; tabindex=&quot;-1&quot;&gt;Why does &amp;quot;consider porting to Python 3&amp;quot; still appear?&lt;/h3&gt;
&lt;p&gt;Check that you have changed &lt;code&gt;exec&lt;/code&gt; in &lt;code&gt;activity.info&lt;/code&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/python-porting-guide/" />
        </entry>
        <entry>
            <title>
                python-coverage-guide
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/python-coverage-guide/</id>
            <content type="html">
                &lt;h1 id=&quot;measuring-coverage-of-python-activities&quot; tabindex=&quot;-1&quot;&gt;Measuring coverage of Python activities&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;install the &lt;code&gt;python3-coverage&lt;/code&gt; package,&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install python3-coverage
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;start Terminal activity inside Sugar,&lt;/li&gt;
&lt;li&gt;change to the directory that holds activity source code,&lt;/li&gt;
&lt;li&gt;run the activity like this;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;python3-coverage run /usr/bin/sugar-activity3
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;run any test scripts, such as those using &lt;code&gt;xdotool&lt;/code&gt;, or your test plan,&lt;/li&gt;
&lt;li&gt;stop the activity,&lt;/li&gt;
&lt;li&gt;generate annotated HTML listings,&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;python3-coverage html
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;run the http.server module in a background process,&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;python3 -m http.server &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;browse to &lt;a href=&quot;http://localhost:8000/htmlcov&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:8000/htmlcov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tested on Ubuntu 18.04 and 19.04.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://coverage.readthedocs.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Python Coverage&lt;/a&gt; documentation.&lt;/p&gt;
&lt;h1 id=&quot;measuring-coverage-during-collaboration&quot; tabindex=&quot;-1&quot;&gt;Measuring coverage during collaboration&lt;/h1&gt;
&lt;p&gt;When an activity is started to join a collaboration, there is little opportunity to intercept and add the command-line wrapper.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/bin/sugar-activity3&lt;/code&gt; may be edited to add coverage API calls.  See &lt;a href=&quot;https://coverage.readthedocs.io/en/v4.5.x/api.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Coverage.py API&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/python-coverage-guide/" />
        </entry>
        <entry>
            <title>
                memory-leaks
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/memory-leaks/</id>
            <content type="html">
                &lt;h1 id=&quot;finding-memory-leaks&quot; tabindex=&quot;-1&quot;&gt;Finding Memory Leaks&lt;/h1&gt;
&lt;p&gt;This is a guide to finding and fixing memory leaks.&lt;/p&gt;
&lt;p&gt;Memory leaks are a common bug where a program retains allocated memory after it is no longer needed, and over time this makes the program slow (and even slows down the whole operating system.)&lt;/p&gt;
&lt;p&gt;To see if they are happening, you can log and graph the memory consumption of your Activity.&lt;/p&gt;
&lt;h4 id=&quot;1-log-the-memory-usage&quot; tabindex=&quot;-1&quot;&gt;1. Log the memory usage&lt;/h4&gt;
&lt;p&gt;Start sugar, your Activity, then the Terminal Activity.&lt;/p&gt;
&lt;p&gt;In Terminal run &lt;code&gt;htop&lt;/code&gt;, look for the &lt;code&gt;pid&lt;/code&gt; of your Activity, and quit.&lt;/p&gt;
&lt;p&gt;Run a loop that measures the memory consumption of your Activity,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;while true; do
  echo $(date +%s.%N) &#92;
    $(awk &#39;/VmSize/ { print $2; }&#39; /proc/$(pgrep -f jarabe)/status)
  sleep 1
done | tee memory.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Switch to your Activity, and follow some procedure to test it, then stop using it and wait a couple of minutes to let it settle down.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Use &lt;a href=&quot;https://github.com/jordansissel/xdotool&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;xdotool&lt;/a&gt; to script the interaction with your activity, so you can reliably reproduce the testing procedure.&lt;br /&gt;
For example, &lt;code&gt;xdotool key F6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Switch to Terminal and stop the loop by pressing &lt;code&gt;CTRL-C&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-graph-the-log&quot; tabindex=&quot;-1&quot;&gt;2. Graph the log&lt;/h4&gt;
&lt;p&gt;Create a graph of the data, either quickly with plotutils,&lt;/p&gt;
&lt;p&gt;graph -T png data &amp;gt; graph.png;&lt;/p&gt;
&lt;p&gt;or with gnuplot, run this script&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash
gnuplot -persist &amp;lt;&amp;lt;EOF
# comment out the following 2 lines to display on screen
set terminal png
set output &amp;quot;memory.png&amp;quot;

set title &amp;quot;XO-1.5 ... &#92;nVmSize leak test&#92;n2015-10-06&#92;nby James Cameron&amp;quot;
set xlabel &amp;quot;Clock time MM:SS&amp;quot;
set ylabel &amp;quot;VmSize kb&amp;quot;
set nokey

set xdata time
set timefmt &amp;quot;%s&amp;quot;

set grid
set style data step

plot &amp;quot;memory.log&amp;quot; using 1:2 title &amp;quot;run &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#1&quot;&gt;#1&lt;/a&gt;&amp;quot; lw 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;memory.png&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/memory-leak-example.png&quot; alt=&quot;Example of memory leak graph&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Finally removes the files,&lt;/p&gt;
&lt;p&gt;rm data  graph.png memory.log memory.png;&lt;/p&gt;
&lt;h4 id=&quot;real-world-example&quot; tabindex=&quot;-1&quot;&gt;Real World Example&lt;/h4&gt;
&lt;p&gt;A memory leak was found and discussed in the Sugar Desktop programs (jarabe), &lt;a href=&quot;https://github.com/sugarlabs/sugar/pull/520&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/sugar/pull/520&lt;/a&gt;, with a fix in &lt;a href=&quot;https://github.com/sugarlabs/sugar/pull/614&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/sugar/pull/614&lt;/a&gt;.&lt;br /&gt;
That discussions is the source for this guide.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/memory-leaks/" />
        </entry>
        <entry>
            <title>
                languages
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/languages/</id>
            <content type="html">
                &lt;h1 id=&quot;sugar-labs-programming-languages&quot; tabindex=&quot;-1&quot;&gt;Sugar Labs Programming Languages&lt;/h1&gt;
&lt;p&gt;At Sugar Labs we have opportunities for contributing with many&lt;br /&gt;
different programming languages and libraries;&lt;/p&gt;
&lt;h2 id=&quot;python-py-g-object-gtk-pygame-g-streamer&quot; tabindex=&quot;-1&quot;&gt;Python, PyGObject, GTK+, Pygame, GStreamer,&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sugar,&lt;/li&gt;
&lt;li&gt;Activities for Sugar,&lt;/li&gt;
&lt;li&gt;Sugar Toolkit (API),&lt;/li&gt;
&lt;li&gt;Sugar Datastore (API),&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;java-script-html-5-and-css&quot; tabindex=&quot;-1&quot;&gt;JavaScript, HTML5 and CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sugarizer,&lt;/li&gt;
&lt;li&gt;Music Blocks,&lt;/li&gt;
&lt;li&gt;Activities for Sugarizer or Sugar,&lt;/li&gt;
&lt;li&gt;Sugar Web (API),&lt;/li&gt;
&lt;li&gt;Browse, Help and Wikipedia activities for Sugar,&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;c&quot; tabindex=&quot;-1&quot;&gt;C&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Paint activity for Sugar,&lt;/li&gt;
&lt;li&gt;Sugar Toolkit (API; display session management, audio),&lt;/li&gt;
&lt;li&gt;gst-plugins-espeak (API; GStreamer, GObject),&lt;/li&gt;
&lt;li&gt;sugarize (API; X11),&lt;/li&gt;
&lt;li&gt;Sugar Runner,&lt;/li&gt;
&lt;li&gt;Prosody Jabber/XMPP server &lt;a href=&quot;http://jabber.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;jabber.sugarlabs.org&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;Telepathy (API; collaboration),&lt;/li&gt;
&lt;li&gt;Wikipedia activity for Sugar (data compression algorithms),&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;php&quot; tabindex=&quot;-1&quot;&gt;PHP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://activities.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;activities.sugarlabs.org&lt;/a&gt;, the activity store for Python 2 and web&lt;br /&gt;
activities compatible with Sugar 0.112 and earlier,&lt;/li&gt;
&lt;li&gt;Music Blocks Planet,&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;c-1&quot; tabindex=&quot;-1&quot;&gt;C#&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RiverHex activity for Sugar,&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;small-talk-squeak&quot; tabindex=&quot;-1&quot;&gt;SmallTalk, Squeak&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EToys activity for Sugar,&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;shell&quot; tabindex=&quot;-1&quot;&gt;Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sugar,&lt;/li&gt;
&lt;li&gt;build tools,&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;anything-new&quot; tabindex=&quot;-1&quot;&gt;Anything New&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;as long as it works, and you can demonstrate it works, and it&lt;br /&gt;
doesn&#39;t make something more complicated than it needs to be, it is&lt;br /&gt;
probably welcome.&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/languages/" />
        </entry>
        <entry>
            <title>
                javascript-style
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/javascript-style/</id>
            <content type="html">
                &lt;h1 id=&quot;code-style-for-sugar-java-script-development&quot; tabindex=&quot;-1&quot;&gt;Code style for Sugar JavaScript development&lt;/h1&gt;
&lt;h2 id=&quot;general&quot; tabindex=&quot;-1&quot;&gt;General&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Avoid lines longer than 79 characters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;javascript&quot; tabindex=&quot;-1&quot;&gt;Javascript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make your code conform to JSHint. &lt;a href=&quot;https://sugardocs.vercel.app/#jshint&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;See explanation below&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When writing new code, use 4 spaces for indentation, but when editing existing code, use the same indentation style.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The js-beautify tool can be handy for the indentation part. &lt;a href=&quot;https://sugardocs.vercel.app/#js-beautify&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;See&lt;br /&gt;
explanation below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a good reading about javascript code conventions&lt;br /&gt;
&lt;a href=&quot;http://javascript.crockford.com/code.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://javascript.crockford.com/code.html&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;For public and private members of an object, read&lt;br /&gt;
&lt;a href=&quot;http://javascript.crockford.com/private.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://javascript.crockford.com/private.html&lt;/a&gt;.  To make the object&lt;br /&gt;
available in private members, keep a private variable named &lt;strong&gt;that&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;var that = this;&lt;/p&gt;
&lt;h2 id=&quot;tools&quot; tabindex=&quot;-1&quot;&gt;Tools&lt;/h2&gt;
&lt;h3 id=&quot;a-js-hint&quot; tabindex=&quot;-1&quot;&gt;JSHint&lt;/h3&gt;
&lt;p&gt;Use JSHint &lt;a href=&quot;http://jshint.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://jshint.com/&lt;/a&gt; to check for errors and make the&lt;br /&gt;
source compatible with our coding conventions.  The jshint command is&lt;br /&gt;
provided by sugar-build.&lt;/p&gt;
&lt;p&gt;To check JavaScript code:&lt;/p&gt;
&lt;p&gt;jshint js/main.js&lt;/p&gt;
&lt;p&gt;Add it to your editor to ease development.  There are several plugins&lt;br /&gt;
at &lt;a href=&quot;http://jshint.com/install/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://jshint.com/install/&lt;/a&gt; .&lt;/p&gt;
&lt;h3 id=&quot;js-beautify&quot; tabindex=&quot;-1&quot;&gt;js-beautify&lt;/h3&gt;
&lt;p&gt;Use js-beautify &lt;a href=&quot;https://github.com/einars/js-beautify&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/einars/js-beautify&lt;/a&gt; to make the&lt;br /&gt;
sources compatible with our indentation conventions.  The js-beautify&lt;br /&gt;
command is provided by sugar-build.&lt;/p&gt;
&lt;p&gt;To clean javascript code:&lt;/p&gt;
&lt;p&gt;js-beautify --replace --good-stuff js/main.js&lt;/p&gt;
&lt;p&gt;Warning: the --replace option will modify your source.  But you will&lt;br /&gt;
be safe if you are versioning it (we use git for Sugar Web).&lt;/p&gt;
&lt;p&gt;It can do HTML as well:&lt;/p&gt;
&lt;p&gt;js-beautify --type html --replace --indent-size 2 index.html&lt;/p&gt;
&lt;p&gt;Add it to your editor to ease development.  There are several plugins&lt;br /&gt;
at &lt;a href=&quot;http://jsbeautifier.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://jsbeautifier.org/&lt;/a&gt; .&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/javascript-style/" />
        </entry>
        <entry>
            <title>
                how-can-i-help
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/how-can-i-help/</id>
            <content type="html">
                &lt;h1 id=&quot;how-can-i-help&quot; tabindex=&quot;-1&quot;&gt;How Can I Help?&lt;/h1&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sugardocs.vercel.app/#-prepare&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Prepare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sugardocs.vercel.app/#-coding-documentation-and-quality-assurance&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Coding/Documentation/Quality Assurance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sugardocs.vercel.app/#-design&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sugardocs.vercel.app/#-marketingoutreach&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Marketing/Outreach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sugardocs.vercel.app/#-important-sugar-labs-links&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Important Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sugardocs.vercel.app/#IM-STUCK&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;I&#39;m Stuck!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;a-name-prepare-a-prepare&quot; tabindex=&quot;-1&quot;&gt;&lt;a name=&quot;PREPARE&quot;&gt;&lt;/a&gt; Prepare&lt;/h2&gt;
&lt;p&gt;Before contributing to Sugar Labs, you should use Music Blocks, Sugarizer or Sugar Desktop.&lt;/p&gt;
&lt;h3 id=&quot;music-blocks&quot; tabindex=&quot;-1&quot;&gt;Music Blocks&lt;/h3&gt;
&lt;table style=&quot;width:100%; border-collapse:collapse&quot;&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Your Equipment&lt;/th&gt;
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Your Operating System&lt;/th&gt;
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Recommendations&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have a computer&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Linux, Windows or macOS&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Clone the &lt;a href=&quot;https://github.com/sugarlabs/musicblocks&quot;&gt;Music Blocks&lt;/a&gt; git repository.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have just a browser&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Any&lt;/td&gt; 
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Test Music Blocks on the &lt;a href=&quot;https://musicblocks.sugarlabs.org/&quot;&gt;Music Blocks&lt;/a&gt; web site from your computer, tablet, or phone.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;sugarizer&quot; tabindex=&quot;-1&quot;&gt;Sugarizer&lt;/h3&gt;
&lt;table style=&quot;width:100%; border-collapse:collapse&quot;&gt;
  &lt;tbody&gt;&lt;tr&gt;
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Your Equipment&lt;/th&gt;
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Your Operating System&lt;/th&gt;
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Recommendations&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have a computer&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Linux, Windows or macOS&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Install the &lt;a href=&quot;https://sugarizer.org/&quot;&gt;Sugarizer&lt;/a&gt; package for your operating system.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have a tablet or phone&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Android&lt;/td&gt; 
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Install the &lt;a href=&quot;https://sugarizer.org/&quot;&gt;Sugarizer&lt;/a&gt; app from Google Play.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have a tablet or phone&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;iOS&lt;/td&gt; 
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Install the &lt;a href=&quot;https://sugarizer.org/&quot;&gt;Sugarizer&lt;/a&gt; app from the App Store.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have just a browser&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Any&lt;/td&gt; 
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Test Sugarizer on the &lt;a href=&quot;https://try.sugarizer.org/&quot;&gt;Sugarizer&lt;/a&gt; web site.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/llaske/sugarizer/blob/master/docs/tutorial.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Complete the activity development tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sugar-desktop&quot; tabindex=&quot;-1&quot;&gt;Sugar Desktop&lt;/h3&gt;
&lt;table style=&quot;width:100%; border-collapse:collapse&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Your Equipment&lt;/th&gt;
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Your Operating System&lt;/th&gt; 
    &lt;th style=&quot;border: 2px black solid&quot;&gt;Recommendations&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have only one computer and don&#39;t want to erase it&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Linux, Windows, macOS, or iOS&lt;/td&gt; 
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Install virtualisation software, make a new virtual machine and install &lt;a href=&quot;https://wiki.sugarlabs.org/go/Live_Build&quot;&gt;Sugar Live Build&lt;/a&gt;, &lt;a href=&quot;https://wiki.sugarlabs.org/go/SoaS&quot;&gt;Sugar on a Stick&lt;/a&gt;, &lt;a href=&quot;https://wiki.sugarlabs.org/go/Ubuntu&quot;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&quot;https://wiki.sugarlabs.org/go/Fedora&quot;&gt;Fedora&lt;/a&gt;, or &lt;a href=&quot;https://wiki.sugarlabs.org/go/Debian&quot;&gt;Debian&lt;/a&gt;.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have only one computer and don&#39;t want to erase it&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Linux&lt;/td&gt; 
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Install Sugar packages from your distribution, see &lt;a href=&quot;https://wiki.sugarlabs.org/go/Ubuntu&quot;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&quot;https://wiki.sugarlabs.org/go/Fedora&quot;&gt;Fedora&lt;/a&gt;, or &lt;a href=&quot;https://wiki.sugarlabs.org/go/Debian&quot;&gt;Debian&lt;/a&gt;. For other distributions, contact your distribution community.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;You have another computer that can be erased&lt;/td&gt;
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Doesn&#39;t matter&lt;/td&gt; 
    &lt;td style=&quot;border: 2px black solid&quot;&gt;Install &lt;a href=&quot;https://wiki.sugarlabs.org/go/Live_Build&quot;&gt;Sugar Live Build&lt;/a&gt;, &lt;a href=&quot;https://wiki.sugarlabs.org/go/SoaS&quot;&gt;Sugar on a Stick&lt;/a&gt;, &lt;a href=&quot;https://wiki.sugarlabs.org/go/Ubuntu&quot;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&quot;https://wiki.sugarlabs.org/go/Fedora&quot;&gt;Fedora&lt;/a&gt;, or &lt;a href=&quot;https://wiki.sugarlabs.org/go/Debian&quot;&gt;Debian&lt;/a&gt;.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Learn how to use Sugar and activities, see &lt;a href=&quot;https://help.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Help&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar/blob/master/docs/development-environment.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Setup a development environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-name-outreachy-gsoc-a-coding-documentation-and-quality-assurance&quot; tabindex=&quot;-1&quot;&gt;&lt;a name=&quot;OUTREACHY-GSOC&quot;&gt;&lt;/a&gt; Coding, Documentation and Quality Assurance&lt;/h2&gt;
&lt;p&gt;Coding, documentation and quality assurance is important - it is required everywhere from producing new software, rolling out new features, maintaining and upgrading current releases, distributing instructions for others to know how to operate the software, and ensuring that others can use software without any problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have critical projects listed under the &lt;a href=&quot;https://github.com/orgs/sugarlabs/projects&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Projects Tab&lt;/a&gt;, including porting to GTK 3 and migrating to Python 3. These are great places for Python programmers to jump in.&lt;/li&gt;
&lt;li&gt;We have mentoring opportunities through our participation in programs such as &lt;a href=&quot;https://github.com/sugarlabs/GSoC&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Google Summer Of Code&lt;/a&gt;. Please note that only experienced community members can be mentors.&lt;/li&gt;
&lt;li&gt;Another way you can contribute to Sugar Labs is the &lt;a href=&quot;https://wiki.sugarlabs.org/go/Features&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Release Engineer&#39;s Feature Tracking page&lt;/a&gt;. These are features proposed and implemented by other Sugar Labs community contributors. The progress of the feature is also indicated in the page - please contribute to tasks which are &amp;quot;In Progress&amp;quot;.&lt;/li&gt;
&lt;li&gt;You can test Sugar and Activities and familiarise yourself with Sugar, making a note of where your expectation is betrayed by your observations, then seek feedback from others to learn if your expectation was right, and post inconsistencies to the corresponding GitHub repository issues page, &lt;a href=&quot;https://wiki.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wiki&lt;/a&gt;, or mailing list &lt;a href=&quot;https://bugs.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sugar-devel@lists.laptop.org&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;You can go to a specific GitHub repository and work on the bugs in the source code.  Choose the &amp;quot;Issues&amp;quot; tabs and work through the various issues listed in it. The main Sugar Labs GitHub Repositories are listed in the &amp;quot;Important Sugar Labs Links&amp;quot;.&lt;/li&gt;
&lt;li&gt;You can write documentation, see the &lt;a href=&quot;https://wiki.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wiki&lt;/a&gt;, the &lt;a href=&quot;http://wiki.sugarlabs.org/go/Activities/Help/Contribute&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Help Activity&lt;/a&gt; which is kept in the &lt;a href=&quot;https://github.com/godiard/help-activity&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Help&lt;/a&gt; repository, and this &lt;a href=&quot;https://sugardocs.vercel.app/src/docs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;developer documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can update web sites, see &lt;a href=&quot;https://www.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;www.sugarlabs.org&lt;/a&gt; which is kept in the &lt;a href=&quot;https://github.com/sugarlabs/www-sugarlabs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;www-sugarlabs&lt;/a&gt; repository.&lt;/li&gt;
&lt;li&gt;You can choose to write your own &lt;a href=&quot;https://sugardocs.vercel.app/desktop-activity.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;desktop activity&lt;/a&gt; or write your own &lt;a href=&quot;https://sugardocs.vercel.app/web-activity.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;web activity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can port activities which are in GTK+ 2 to GTK+ 3, using the &lt;a href=&quot;https://sugardocs.vercel.app/src/gtk3-porting-guide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can port activities which are in Python 2 to Python 3, using the &lt;a href=&quot;https://sugardocs.vercel.app/src/python-porting-guide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can test code coverage of activities, using the &lt;a href=&quot;https://sugardocs.vercel.app/src/python-coverage-guide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-name-design-team-a-design&quot; tabindex=&quot;-1&quot;&gt;&lt;a name=&quot;DESIGN-TEAM&quot;&gt;&lt;/a&gt; Design&lt;/h2&gt;
&lt;p&gt;Design is also crucial to Sugar Labs - it is where new ideas and initiatives are formed into proper reports which can be worked on. You can either contribute a new design proposal or implement an existing one in the &lt;a href=&quot;https://wiki.sugarlabs.org/go/Design_Team/Proposals&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Design Team User Experience Proposals wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;a-name-marketing-outreach-a-marketing-outreach&quot; tabindex=&quot;-1&quot;&gt;&lt;a name=&quot;MARKETING-OUTREACH&quot;&gt;&lt;/a&gt; Marketing/Outreach&lt;/h2&gt;
&lt;p&gt;You can help to increase the number of Sugar Labs users through -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write translations, see &lt;a href=&quot;https://wiki.sugarlabs.org/go/Translation_Team&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Translation Team&lt;/a&gt; and &lt;a href=&quot;https://translate.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;translate.sugarlabs.org&lt;/a&gt;, thereby the user experience of users speaking other languages.&lt;/li&gt;
&lt;li&gt;Publish blogs and detail your experience using Sugar Labs software, introducing more people to use Sugar Labs software.&lt;/li&gt;
&lt;li&gt;Design and execute lesson plans to introduce more children and youth to Sugar Labs, either in schools, outside school or in an informal setting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-name-important-links-a-important-sugar-labs-links&quot; tabindex=&quot;-1&quot;&gt;&lt;a name=&quot;IMPORTANT-LINKS&quot;&gt;&lt;/a&gt; Important Sugar Labs Links&lt;/h2&gt;
&lt;p&gt;The links listed below are of important Sugar Labs code repositories, wiki and website. Some of the code repositories are based under the Sugar Labs GitHub Organisation, while others are not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Github Organisation Page&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Labs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GitHub Repositories Under Sugar Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Shell for GTK+ 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-toolkit&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Toolkit for GTK+ 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-toolkit-gtk3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Toolkit for GTK+ 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-build&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Build/Development Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-artwork&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Artwork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-docs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Labs Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/www-sugarlabs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Labs Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/turtleblocksjs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;TurtleBlocksJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/musicblocks&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MusicBlocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/help-activity&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Help Activity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GitHub Repositories Not Under Sugar Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/llaske/sugarizer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugarizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Relevant Links&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Labs Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.sugarlabs.org/go/Welcome_to_the_Sugar_Labs_wiki&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Labs Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://matrix.to/#/#sugar:matrix.org&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Labs Matrix Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-name-im-stuck-a-i-m-stuck&quot; tabindex=&quot;-1&quot;&gt;&lt;a name=&quot;IM-STUCK&quot;&gt;&lt;/a&gt;I&#39;m Stuck!&lt;/h2&gt;
&lt;p&gt;Well, don&#39;t worry; there are real people here who will try to help you. Some&lt;br /&gt;
ways to get in touch with real people are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://matrix.to/#/#sugar:matrix.org&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Hang out on the Matrix channel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lists.sugarlabs.org/listinfo/sugar-devel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Send an email on the mailing list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/how-can-i-help/" />
        </entry>
        <entry>
            <title>
                hig
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/hig/</id>
            <content type="html">
                &lt;h1 id=&quot;human-interface-guidelines&quot; tabindex=&quot;-1&quot;&gt;Human Interface Guidelines&lt;/h1&gt;
&lt;p&gt;See &lt;a href=&quot;http://wiki.sugarlabs.org/go/Human_Interface_Guidelines&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Human Interface Guidelines&lt;/a&gt; on our Wiki.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/hig/" />
        </entry>
        <entry>
            <title>
                gtk3-porting-guide
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/gtk3-porting-guide/</id>
            <content type="html">
                &lt;h1 id=&quot;gtk-3-porting-guide&quot; tabindex=&quot;-1&quot;&gt;GTK 3 Porting Guide&lt;/h1&gt;
&lt;p&gt;Guide to porting Sugar Activities to GTK 3.&lt;/p&gt;
&lt;h2 id=&quot;gtk&quot; tabindex=&quot;-1&quot;&gt;GTK&lt;/h2&gt;
&lt;p&gt;GTK is a library for creating graphical user interfaces.  GTK is written in C.  GTK for Python is a language binding.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gtk.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GTK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GTK 2 is the previous major version of GTK.  GTK 2 for Python is a static binding, and is called PyGTK.  GTK 2 is soon to be obsolete and unavailable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pygtk.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PyGTK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.gnome.org/gtk2/stable/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GTK 2 Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GTK 3 is the current major version of GTK.  It breaks both API and ABI compared with GTK 2.  GTK 3 for Python is a GObject Introspection binding, using PyGObject.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.gnome.org/Projects/PyGObject&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PyGObject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lazka.github.io/pgi-docs/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PyGObject API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.gnome.org/gtk3/stable/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GTK 3 Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sugar-toolkit&quot; tabindex=&quot;-1&quot;&gt;Sugar Toolkit&lt;/h2&gt;
&lt;p&gt;Sugar Toolkit provides services and a set of GTK widgets to build activities and other Sugar components on Linux based computers using Python.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-toolkit&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Toolkit for GTK 2&lt;/a&gt;, module name &lt;code&gt;sugar&lt;/code&gt;, uses PyGTK,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-toolkit-gtk3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Toolkit for GTK 3&lt;/a&gt;, module name &lt;code&gt;sugar3&lt;/code&gt;, uses PyGObject,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.sugarlabs.org/sugar3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Toolkit for GTK 3 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sugar-activities&quot; tabindex=&quot;-1&quot;&gt;Sugar Activities&lt;/h2&gt;
&lt;p&gt;New Sugar activities are written in either;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript using the &lt;a href=&quot;https://github.com/sugarlabs/sugar-web&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Web&lt;/a&gt; tools, or&lt;/li&gt;
&lt;li&gt;Python using GTK 3 and Sugar Toolkit for GTK 3,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Old Sugar activities were written in Python using GTK 2 and Sugar Toolkit for GTK 2.&lt;/p&gt;
&lt;p&gt;These old activities are to be ported to GTK 3.  This guide explains how.&lt;/p&gt;
&lt;h2 id=&quot;required-skills&quot; tabindex=&quot;-1&quot;&gt;Required Skills&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;application development in Python,&lt;/li&gt;
&lt;li&gt;application development in GTK 2 and GTK 3, using the event loop model,&lt;/li&gt;
&lt;li&gt;Sugar activity development,&lt;/li&gt;
&lt;li&gt;use of PyGObject API libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;how-to-port-to-gtk-3&quot; tabindex=&quot;-1&quot;&gt;How to Port to GTK 3&lt;/h2&gt;
&lt;p&gt;General information for all GTK applications;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pygobject.readthedocs.io/en/latest/guide/porting.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PyGObject - Porting from Static Bindings&lt;/a&gt; part of the PyGObject documentation, focusing on Python,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://live.gnome.org/PyGObject/IntrospectionPorting&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PyGObject - Introspection Porting&lt;/a&gt; on the GNOME Wiki, focusing on Python,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.gnome.org/gtk3/stable/gtk-migrating-2-to-3.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Migrating from GTK 2 to GTK 3&lt;/a&gt; part of the GTK documentation, focusing on the underlying C library and object classes, but is relevant to Python porting because the same classes are used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;how-to-port-a-sugar-activity-to-gtk-3&quot; tabindex=&quot;-1&quot;&gt;How to Port a Sugar Activity to GTK 3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set up development environment for Sugar on GTK 3; such as Ubuntu 18.04,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up test environments capable of both GTK 2 and GTK 3 at the same time; such as Ubuntu 16.04,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quiesce the activity source by making sure the activity works properly before porting, fixing any bugs, closing any solved issues, merging any pull requests or branches and releasing the last GTK 2 version; see the activity &lt;a href=&quot;https://sugardocs.vercel.app/contributing.md#checklist---maintainer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;maintainer checklist&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Port to Sugar Toolkit for GTK 3 (see below),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Port to GTK 3, using the &lt;a href=&quot;https://gitlab.gnome.org/GNOME/pygobject/blob/master/tools/pygi-convert.sh&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PyGObject script pygi-convert.sh&lt;/a&gt; to convert automatically much as it can.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Port to any other libraries, such as Sugargame, Cairo, Pango, GConf to Gio.Settings, GStreamer 0.10 to GStreamer 1.0,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test and iterate until original functionality is reached.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https://github.com/sugarlabs/sugar-docs/blob/master/src/contributing.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Code Guidelines&lt;/a&gt; during all porting.&lt;/p&gt;
&lt;p&gt;Write any comments in the code, by adding &lt;strong&gt;# README:&lt;/strong&gt;, &lt;strong&gt;# TODO:&lt;/strong&gt; and &lt;strong&gt;# FIXME:&lt;/strong&gt; explaining what are the problems that you are having with that chunk of code. Put a link if it&#39;s necessary.&lt;/p&gt;
&lt;h2 id=&quot;port-to-sugar-toolkit-for-gtk-3&quot; tabindex=&quot;-1&quot;&gt;Port to Sugar Toolkit for GTK 3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The namespace is changed from &lt;code&gt;sugar&lt;/code&gt; to &lt;code&gt;sugar3&lt;/code&gt;, which reflects&lt;br /&gt;
that GTK 3 is the underlying technology, use a script to automate the rename of the imports &lt;code&gt;sugar&lt;/code&gt; to&lt;br /&gt;
&lt;code&gt;sugar3&lt;/code&gt;, &lt;a href=&quot;http://dev.laptop.org/~manuq/sugar-convert.sh&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sugar-convert.sh&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;The keep button has been removed&lt;/li&gt;
&lt;li&gt;The old-style toolbar has been removed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_toolbar_box&lt;/code&gt; is used instead of &lt;code&gt;set_toolbox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove import of deprecated ActivityToolbox (see&lt;br /&gt;
&lt;a href=&quot;http://git.sugarlabs.org/hello-world/mainline/commit/22060a3063b2d6fd38d6b1cd8d44946170255af3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;hello-world&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;service_name&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; tags in &lt;a href=&quot;http://activity.info/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;activity.info&lt;/a&gt; has&lt;br /&gt;
been removed. Use &lt;code&gt;bundle_id&lt;/code&gt; instead of &lt;code&gt;service_name&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt;&lt;br /&gt;
instead of &lt;code&gt;class&lt;/code&gt; (see in&lt;br /&gt;
&lt;a href=&quot;http://git.sugarlabs.org/record/mainline/commit/6e8968c71e474e2d8d86886badf5cf7d70217dc5&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Record&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sugar3.activity.Activity&lt;/code&gt; does not have the &lt;em&gt;window&lt;/em&gt; attribute. Use&lt;br /&gt;
the &lt;code&gt;.get_window()&lt;/code&gt; method instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;port-to-gtk-3&quot; tabindex=&quot;-1&quot;&gt;Port to GTK 3&lt;/h2&gt;
&lt;p&gt;To start, change the importing instruction for GTK from&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import gtk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import gi
gi.require_version(&#39;Gtk&#39;, &#39;3.0&#39;)
from gi.repository import Gtk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;require_version&lt;/code&gt; needs to called only the first time when GTK&lt;br /&gt;
is being imported.&lt;/p&gt;
&lt;p&gt;Similar imports that may be used are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository import Gdk, Pango, GObject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you have to change each call that involves GTK, for example&lt;br /&gt;
creating a button will look now like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;button = Gtk.Button()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A simple hello world program in GTK 3 looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository import Gtk

def _destroy_cb(widget, data=None):
    Gtk.main_quit()

w = Gtk.Window()
w.connect(&amp;quot;destroy&amp;quot;, _destroy_cb)
label = Gtk.Label(&#39;Hello World!&#39;)
w.add(label)
w.show_all()

Gtk.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The changes that were needed to port the hello-world activity can be&lt;br /&gt;
seen in &lt;a href=&quot;https://github.com/sugarlabs/hello-world/commit/508e1c518b56cbde5508e560c8a2ff38a3518583&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;this&lt;br /&gt;
commit.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;problems&quot; tabindex=&quot;-1&quot;&gt;Problems&lt;/h2&gt;
&lt;p&gt;Several common problems arise during a port.&lt;/p&gt;
&lt;h3 id=&quot;simple-example-on-creating-a-toolbar&quot; tabindex=&quot;-1&quot;&gt;Simple example on creating a toolbar&lt;/h3&gt;
&lt;p&gt;A Sugar Activity has a toolbar.&lt;br /&gt;
These are the relevant modules required to create a simple toolbar containing the activity button and the stop button.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from sugar3.activity import activity
from sugar3.graphics.toolbarbox import ToolbarBox
from sugar3.activity.widgets import ActivityToolbarButton
from sugar3.activity.widgets import StopButton
from sugar3.graphics.toolbarbox import ToolbarButton
from sugar3.graphics import style
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the ActivityToolbar() module has been deprecated, the toolbar can&lt;br /&gt;
now be called using &lt;code&gt;ToolbarBox()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then, from the ToolbarBox(), include the ActivityButton and StopButton.&lt;br /&gt;
In order for the StopButton to be align to the right as per Sugar&lt;br /&gt;
activity interface, a separator has to be included as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;toolbar_box = ToolbarBox()

activity_button = ActivityToolbarButton(self)
toolbar_box.toolbar.insert(activity_button, 0)
activity_button.show()

separator = Gtk.SeparatorToolItem()
separator.props.draw = False
separator.set_expand(True)
toolbar_box.toolbar.insert(separator, -1)
separator.show()

stop_button = StopButton(self)
toolbar_box.toolbar.insert(stop_button, -1)
stop_button.show()
self.set_toolbar_box(toolbar_box)
toolbar_box.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;tools&quot; tabindex=&quot;-1&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;If you are having trouble finding how a particular GTK&lt;br /&gt;
class/method/constant has been named in PyGI, run&lt;br /&gt;
&lt;a href=&quot;http://dev.laptop.org/~dsd/20110806/pygi-enumerate.py&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pygi-enumerate.py&lt;/a&gt;&lt;br /&gt;
and grep the output. (this app lists all identified methods and&lt;br /&gt;
constants). Usage example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ python pygi-enumerate.py | grep get_selection
Gtk.AccelLabel.get_selection_bounds() (instance method)
Gtk.Editable.get_selection_bounds() (instance method)
Gtk.Entry.get_selection_bounds() (instance method)
Gtk.IconView.get_selection_mode() (instance method)
Gtk.Label.get_selection_bounds() (instance method)
Gtk.SelectionData.get_selection() (instance method)
Gtk.SpinButton.get_selection_bounds() (instance method)
Gtk.TextBuffer.get_selection_bound() (instance method)
Gtk.TextBuffer.get_selection_bounds() (instance method)
Gtk.TreeView.get_selection() (instance method)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;constructor-considerations&quot; tabindex=&quot;-1&quot;&gt;Constructor considerations&lt;/h3&gt;
&lt;p&gt;With PyGI it is possible to use Python-like constructors, or “new”&lt;br /&gt;
functions e.g. the following are (usually) equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;label = Gtk.Button()
label = Gtk.Button.new()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the first form is preferred: it is more Python-like.&lt;br /&gt;
Internally, the difference is that &lt;code&gt;Gtk.Label.new()&lt;/code&gt; translates to a call&lt;br /&gt;
to &lt;code&gt;gtk_label_new()&lt;/code&gt;, whereas &lt;code&gt;Gtk.Label()&lt;/code&gt; will&lt;br /&gt;
directly construct an instance of GtkLabel at the GObject level.&lt;/p&gt;
&lt;p&gt;If the constructor takes parameters, they must be named. The&lt;br /&gt;
parameters correspond to GObject properties in the API documentation&lt;br /&gt;
which are usually marked as “Construct”. For example, the following code&lt;br /&gt;
will not work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;expander = Gtk.Expander(&amp;quot;my expander&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The (confusing) error is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;TypeError: GObject.__init__() takes exactly 0 arguments (1 given)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The solution is to go to the &lt;a href=&quot;http://developer.gnome.org/gtk3/3.2/GtkExpander.html#GtkExpander.properties&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GtkExpander API&lt;br /&gt;
documentation&lt;/a&gt;&lt;br /&gt;
and find the appropriate property that we wish to set. In this case it&lt;br /&gt;
is &lt;b&gt;label&lt;/b&gt; (which is a Construct property, further increasing our&lt;br /&gt;
confidence of success), so the code should be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;expander = Gtk.Expander(label=&amp;quot;my expander&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Combining the two points above, if you wish to call a construct-like&lt;br /&gt;
function such as gtk_button_new_with_label(), you do have the option&lt;br /&gt;
of calling Gtk.Button.new_with_label(), however if we check the&lt;br /&gt;
&lt;a href=&quot;http://developer.gnome.org/gtk3/3.2/GtkButton.html#GtkButton.properties&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GtkButton&lt;br /&gt;
properties&lt;/a&gt;&lt;br /&gt;
we see one called &amp;quot;label&amp;quot; which is equivalent. Therefore&lt;br /&gt;
&lt;code&gt;gtk_button_new_with_label(&amp;quot;foo&amp;quot;)&lt;/code&gt; should be called as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;button = Gtk.Button(label=&amp;quot;foo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;h-box-v-box-pack-start-and-pack-end&quot; tabindex=&quot;-1&quot;&gt;HBox, VBox, pack_start and pack_end&lt;/h3&gt;
&lt;p&gt;GtkHBox and GtkVBox, commonly used containers in GTK 2 code, have&lt;br /&gt;
&lt;code&gt;pack_start&lt;/code&gt; and &lt;code&gt;pack_end&lt;/code&gt; methods. These take 4 parameters:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;widget&lt;/strong&gt;: The widget to pack into the container&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expand&lt;/strong&gt;: Whether the child should receive extra space when the&lt;br /&gt;
container grows (default True)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fill&lt;/strong&gt;: True if space given to child by the expand option is&lt;br /&gt;
actually allocated to child, rather than just padding it. This&lt;br /&gt;
parameter has no effect if expand is set to False. A child is always&lt;br /&gt;
allocated the full height of a gtk.HBox and the full width of a&lt;br /&gt;
gtk.VBox. This option affects the other dimension. (default True)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;padding&lt;/strong&gt;: extra space in pixels to put between child and its&lt;br /&gt;
neighbor (default 0)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In PyGTK, the expand, fill and padding parameters were optional: if&lt;br /&gt;
unspecified, the default values above were used. In PyGI, these&lt;br /&gt;
parameters are not optional: all 4 must be specified. Hence the&lt;br /&gt;
rules for adding in the extra parameters are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;expand&lt;/code&gt; was not set, use value True&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;fill&lt;/code&gt; was not set, use value True. (however, if expand is&lt;br /&gt;
False, this parameter gets ignored so False is an equally acceptable&lt;br /&gt;
option when expand=False)&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;padding&lt;/code&gt; was not set, use value 0.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These parameters can be specified either as positional arguments or as&lt;br /&gt;
named keyword arguments, however all 4 must always be specified. Some&lt;br /&gt;
developers prefer keyword arguments, arguing that the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    box.pack_start(widget, expand=True, fill=False, padding=4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is much more readable than:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    box.pack_start(widget, True, False, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are using &lt;code&gt;pack_start&lt;/code&gt; with the default values (expand=True,&lt;br /&gt;
fill=True and padding=0), you can avoid using &lt;code&gt;pack_start&lt;/code&gt; (and the&lt;br /&gt;
parameter pain that it brings with it) by just using .add for some added&lt;br /&gt;
cleanliness, e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    box.pack_start(widget, True, True, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;can be replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    box.add(widget)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In GTK 3, &lt;code&gt;GtkVBox&lt;/code&gt; and &lt;code&gt;GtkHBox&lt;/code&gt; have been deprecated, which means they might be removed later. The replacement is to use &lt;code&gt;GtkBox&lt;/code&gt; directly, and you may wish to&lt;br /&gt;
make this change now. e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, homogeneous=True, spacing=8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, it must be noted that if &lt;code&gt;GtkBox&lt;/code&gt; is used directly (instead of&lt;br /&gt;
using GtkHBox/GtkVBox), the default value of &lt;code&gt;expand&lt;/code&gt; is now&lt;br /&gt;
&lt;code&gt;False&lt;/code&gt;. The implications of this are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need to check your .add() calls, as previously they would behave&lt;br /&gt;
as &lt;code&gt;pack_start&lt;/code&gt; with expand=True, but now they will behave as&lt;br /&gt;
expand=False (you need to change them to use pack_start with&lt;br /&gt;
expand=True to retain the old behaviour)&lt;/li&gt;
&lt;li&gt;Every single &lt;code&gt;pack_start&lt;/code&gt; call that has &lt;code&gt;expand=False&lt;/code&gt; and &lt;code&gt;padding=0&lt;/code&gt;&lt;br /&gt;
(and any value of fill) can be converted to &lt;code&gt;.add()&lt;/code&gt; for cleanliness&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;gtk-alignment-considerations&quot; tabindex=&quot;-1&quot;&gt;GtkAlignment considerations&lt;/h3&gt;
&lt;p&gt;In PyGTK, the &lt;code&gt;gtk.Alignment&lt;/code&gt; constructor takes four optional parameters:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;xalign: the fraction of horizontal free space to the left of the&lt;br /&gt;
child widget. Ranges from 0.0 to 1.0. Default 0.0.&lt;/li&gt;
&lt;li&gt;yalign: the fraction of vertical free space above the child widget.&lt;br /&gt;
Ranges from 0.0 to 1.0. Default 0.0.&lt;/li&gt;
&lt;li&gt;xscale: the fraction of horizontal free space that the child widget&lt;br /&gt;
absorbs, from 0.0 to 1.0. Default 0.0.&lt;/li&gt;
&lt;li&gt;yscale: the fraction of vertical free space that the child widget&lt;br /&gt;
absorbs, from 0.0 to 1.0. Default 0.0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In PyGI/GTK3, these parameters are still optional, however, the default values have changed. They are now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;xalign: default 0.5&lt;/li&gt;
&lt;li&gt;yalign: default 0.5&lt;/li&gt;
&lt;li&gt;xscale: default 1&lt;/li&gt;
&lt;li&gt;yscale: default 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, PyGTK accepted these construction parameters as positional&lt;br /&gt;
arguments. As explained above, they must now be converted to keyword&lt;br /&gt;
arguments.&lt;/p&gt;
&lt;h3 id=&quot;gtk-menu-popup&quot; tabindex=&quot;-1&quot;&gt;Gtk Menu Popup&lt;/h3&gt;
&lt;p&gt;The Gtk.Menu.popup function now works slightly differently. The user&lt;br /&gt;
supplied positioning function now takes different parameters. These are&lt;br /&gt;
menu, x, y, push_in and user_data.&lt;/p&gt;
&lt;h3 id=&quot;gdk&quot; tabindex=&quot;-1&quot;&gt;Gdk&lt;/h3&gt;
&lt;p&gt;Previously, gdk was an attribute of the GTK module, which means that it&lt;br /&gt;
can be called through GTK. For example, if we want to use&lt;br /&gt;
color_parse():&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;gtk.gdk.color_parse(color)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, what we have to do now is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository import Gdk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can modify the code to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Gdk.color_parse(color)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;pango&quot; tabindex=&quot;-1&quot;&gt;Pango&lt;/h3&gt;
&lt;p&gt;Following the release of GTK 3, we should not be importing pango like&lt;br /&gt;
this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import pango
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, we can now import pango as an attribute within the GTK 3&lt;br /&gt;
library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository import Pango as pango
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;gio-settings-from-g-conf&quot; tabindex=&quot;-1&quot;&gt;Gio.Settings from GConf&lt;/h3&gt;
&lt;p&gt;Any use of GConf should be ported to Gio.Settings.&lt;/p&gt;
&lt;h3 id=&quot;other-considerations&quot; tabindex=&quot;-1&quot;&gt;Other considerations&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;self.allocation&lt;/code&gt; property is no longer available. &lt;code&gt;self.get_allocation()&lt;/code&gt; should be used instead.&lt;/p&gt;
&lt;p&gt;So to get the allocation size:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;self.allocation.width
self.allocation.height
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should be replaced by:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;self.get_allocated_width()
self.get_allocated_height()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;constants&quot; tabindex=&quot;-1&quot;&gt;Constants&lt;/h3&gt;
&lt;p&gt;Most of the constants have slightly different formats, e.g.,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gtk.STATE_NORMAL&lt;/code&gt; became &lt;code&gt;Gtk.StateFlags.NORMAL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gtk.RESPONSE_ACCEPT&lt;/code&gt; became &lt;code&gt;Gtk.ResponseType.ACCEPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gtk.JUSTIFY_CENTER&lt;/code&gt; became &lt;code&gt;Gtk.Justification.CENTER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gtk.RELIEF_NONE&lt;/code&gt; became &lt;code&gt;Gtk.ReliefStyle.NONE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pixbufs&quot; tabindex=&quot;-1&quot;&gt;Pixbufs&lt;/h3&gt;
&lt;p&gt;The pixbuf libraries are in their own repository&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository import GdkPixbuf
GdkPixbuf.Pixbuf.new_from_file()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;changes-to-the-clipboard&quot; tabindex=&quot;-1&quot;&gt;Changes to the Clipboard&lt;/h3&gt;
&lt;p&gt;Two things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need to specify a clipboard using get()&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;You need to pass a length to set_text()&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;clipboard.set_text(string, len(string))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href=&quot;http://python-gtk-3-tutorial.readthedocs.org/en/latest/clipboard.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;python-gtk-3-tutorial/clipboard&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3 id=&quot;changes-to-drag-and-drop&quot; tabindex=&quot;-1&quot;&gt;Changes to Drag-and-Drop&lt;/h3&gt;
&lt;p&gt;Slightly different syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;self.drag_dest_set(Gtk.DestDefaults.ALL, [],
                   Gdk.DragAction.COPY)
self.drag_dest_set_target_list(Gtk.TargetList.new([]))
self.drag_dest_add_text_targets()
self.connect(&#39;drag_data_received&#39;, self._drag_data_received)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data.get_text()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data.get_image()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See&lt;br /&gt;
&lt;a href=&quot;http://python-gtk-3-tutorial.readthedocs.org/en/latest/drag_and_drop.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;python-gtk-3-tutorial/drag_and_drop&lt;/a&gt;&lt;br /&gt;
for more details.&lt;/p&gt;
&lt;h3 id=&quot;port-from-drawable-to-cairo&quot; tabindex=&quot;-1&quot;&gt;Port from Drawable to Cairo&lt;/h3&gt;
&lt;p&gt;GTK 3 does not support GTK Drawable objects, so the first step is to&lt;br /&gt;
get your activity running under Cairo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import cairo

# From activity.Activity, you inherit a canvas.
# Create a Cairo context from the window.
cairo_context = self.canvas.get_window().cairo_create()
# Create an XLib surface to be used for drawing
xlib_surface = surface.create_similar(cairo.CONTENT_COLOR,
                                      Gdk.Screen.width(),
                                      Gdk.Screen.height())
# Although Gdk.Screen.width() and Gdk.Screen.height() have been
# deprecated from version 3.22 they can still be used.
#
# You&#39;ll need a Cairo context from which you&#39;ll build a GTK Cairo context
cairo_context = cairo.Context(xlib_surface)
# Use this context as you would a Drawable, substituting Cairo commands
# for gtk commands, e.g.,
# draw_line changes to line_to
cairo_context.move_to(0, 0)
cairo_context.line_to(100, 100)
# Cairo uses floats from 0 to 1 for RGB values
cairo_context.set_source_rgb(r, g, b)
cairo_context.rectangle(x, y, w, h)
cairo_context.fill()
# To invalidate a region to force a refresh, use:
self.canvas.queue_draw_area(x, y, w, h)
# Handle the expose event
# &amp;quot;expose-event&amp;quot; signal became &amp;quot;draw&amp;quot; signal for Gtk Widget
# And it takes a cairo context instead of an expose event
def draw(self, widget, cr):
    x, y = cr.get_current_point()
    width, height = widget.get_allocated_width(), widget.get_allocated_height()
    cr.rectangle(x, y, width, height)
    cr.clip()
    cr.set_source_surface(xlib_surface)
    cr.paint()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pango is a bit different when used with Cairo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import pango, pangocairo

# Again, from the xlib_surface...
cairo_context = cairo.Context(xlib_surface)

# Create a PangoCairo context
cairo_context = pangocairo.CairoContext(cairo_context)

# The pango layout is created from the Cairo context
pango_layout = cairo_context.create_layout()

# You still use pango to set up font descriptions.
fd = pango.FontDescription(&#39;Sans&#39;)
fd.set_size(12 * pango.SCALE)

# Tell your pango layout about your font description
pango_layout.set_font_description(fd)

# Write text to your pango layout
pango_layout.set_text(&#39;Hello world&#39;, -1)

# Position it within the Cairo context
cairo_context.save()
cairo_context.translate(x, y)
cairo_context.rotate(pi / 3)  # You can rotate text and images in Cairo
cairo_context.set_source_rgb(1, 0, 0)

# Finally, draw the text
cairo_context.update_layout(pango_layout)
cairo_context.show_layout(pango_layout)
cairo_context.restore()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To draw a bitmap...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Again, from the xlib_surface...
cairo_context = cairo.Context(xlib_surface)

Gdk.cairo_set_source_pixbuf(cairo_context, pixbuf, x, y)
cairo_context.rectangle(x, y, w, h)
cairo_context.fill()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To read a pixel from the xlib surface...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# create a new 1x1 cairo surface
cairo_surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 1, 1);
cairo_context = cairo.Context(cairo_surface)
# translate xlib_surface so that target pixel is at 0, 0
cairo_context.set_source_surface(xlib_surface, -x, -y)
cairo_context.rectangle(0,0,1,1)
cairo_context.set_operator(cairo.OPERATOR_SOURCE)
cairo_context.fill()
cairo_surface.flush() # ensure all writing is done
# Read the pixel
return (ord(pixels[2]), ord(pixels[1]), ord(pixels[0]), 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;port-from-cairo-in-gtk-2-to-cairo-in-gtk-3&quot; tabindex=&quot;-1&quot;&gt;Port from Cairo in GTK 2 to Cairo in GTK 3&lt;/h3&gt;
&lt;p&gt;The Cairo/Pango interaction is a little different:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository import Pango, PangoCairo
cairo_context = ...
pango_layout = PangoCairo.create_layout(cairo_context)
fd = Pango.FontDescription(&#39;Sans&#39;)
fd.set_size(12 * Pango.SCALE)
pango_layout.set_font_description(fd)
pango_layout.set_text(&#39;Hello World&#39;, -1)
cairo_context.set_source_rgb(1, 0, 0)
PangoCairo.update_layout(cairo_context, pango_layout)
PangoCairo.show_layout(cairo_context, pango_layout)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;get_extents()&lt;/code&gt; method if different in PangoCairo. It calculates an&lt;br /&gt;
extent as a Rectangle, but doesn&#39;t return anything. There is a method,&lt;br /&gt;
&lt;code&gt;get_logical_extents()&lt;/code&gt; that returns a Rectangle. Alas, it is not&lt;br /&gt;
necessarily available after v1.16. Note that Rectangle is not a list but&lt;br /&gt;
a class with methods for &lt;code&gt;get_x()&lt;/code&gt;, &lt;code&gt;get_y()&lt;/code&gt;, &lt;code&gt;get_width()&lt;/code&gt;, and&lt;br /&gt;
&lt;code&gt;get_height()&lt;/code&gt;, so you cannot iter over it.&lt;/p&gt;
&lt;p&gt;(For more details, see&lt;br /&gt;
&lt;a href=&quot;http://developer.gnome.org/pangomm/2.28/annotated.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://developer.gnome.org/pangomm/2.28/annotated.html&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&quot;replacing-pixmaps-with-cairo&quot; tabindex=&quot;-1&quot;&gt;Replacing pixmaps with Cairo&lt;/h4&gt;
&lt;p&gt;You need to replace your pixmaps with Cairo in GTK 3.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;win = gtk.gdk.get_default_root_window()
gc = gtk.gdk.GC(win)
pix = gtk.gdk.pixbuf_new_from_file(&amp;quot;filename.png&amp;quot;)
map = gtk.gdk.Pixmap(win, pix.get_width(), pix.get_height())
map.draw_rectangle(gc, True, 0, 0, pix.get_width(), pix.get_height())
map.draw_pixbuf(gc, pix, 0, 0, 0, 0, pix.get_width(), pix.get_height(), gtk.gdk.RGB_DITHER_NONE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Becomes;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pix = GdkPixbuf.Pixbuf.new_from_file(&amp;quot;filename.png&amp;quot;)
imagesurface = cairo.ImageSurface(
    cairo.Format.ARGB32,
    pix.get_width(),
    pix.get_height())
context = cairo.Context(imagesurface)
context.rectangle(0, 0, pix.get_width(), pix.get_height())
Gdk.cairo_set_source_pixbuf(pix)
context.fill()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;taking-a-screenshot-and-making-a-thumbnail&quot; tabindex=&quot;-1&quot;&gt;Taking a screenshot and making a thumbnail&lt;/h3&gt;
&lt;p&gt;To make a screenshot of the window:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;width, height = window.get_width(), window.get_height()
thumb_surface = Gdk.Window.create_similar_surface(window,
                                                    cairo.CONTENT_COLOR,
                                                    width, height)

thumb_width, thumb_height = style.zoom(100), style.zoom(80)
cairo_context = cairo.Context(thumb_surface)
thumb_scale_w = thumb_width * 1.0 / width
thumb_scale_h = thumb_height * 1.0 / height
cairo_context.scale(thumb_scale_w, thumb_scale_h)
Gdk.cairo_set_source_window(cairo_context, window, 0, 0)
cairo_context.paint()
thumb_surface.write_to_png(png_path_or_filelike_object)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;creating-a-video-widget&quot; tabindex=&quot;-1&quot;&gt;Creating a video widget&lt;/h3&gt;
&lt;p&gt;Some necessary changes include:&lt;/p&gt;
&lt;p&gt;Using&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_property(&#39;window&#39;).get_xid()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;window.xid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;set_double_buffered(False)
set_app_paintable(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;unset_flags(gtk.DOUBLE_BUFFERED)
set_flags(gtk.APP_PAINTABLE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;hacks-to-help-in-porting&quot; tabindex=&quot;-1&quot;&gt;Hacks to help in porting&lt;/h2&gt;
&lt;h3 id=&quot;use-a-virtual-machine&quot; tabindex=&quot;-1&quot;&gt;Use a virtual machine&lt;/h3&gt;
&lt;p&gt;Use an editor with remote file access to a virtual machine, such as emacs with tramp.&lt;/p&gt;
&lt;p&gt;Start Terminal inside Sugar and then start Screen.  Change to the activity source directory.  Use an SSH client to reach into the Terminal shell to run &lt;code&gt;sugar-activity&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;use-an-iterative-restarter&quot; tabindex=&quot;-1&quot;&gt;Use an iterative restarter&lt;/h3&gt;
&lt;p&gt;Temporarily add code to detect when your editor rewrites files.  For example in &lt;code&gt;activity.Activity.__init__&lt;/code&gt;;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# testing restarter
ct = os.stat(&#39;file.py&#39;).st_ctime
def restarter():
    if os.stat(&#39;file.py&#39;).st_ctime != ct:
        self.close()
        return False
    return True
GObject.timeout_add(233, restarter)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;use-extended-python-debugger&quot; tabindex=&quot;-1&quot;&gt;Use Extended Python debugger&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;epdb&lt;/code&gt; library is useful to inspect the code while the Activity is running.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install python-epdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can put trace point in the code to stop and make tests by doing this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import epdb;epdb.set_trace()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally I run Get Books Activity from the Terminal Activity to be able&lt;br /&gt;
to write some code on a shell. This is the command that I use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sugar-launch org.laptop.sugar.GetBooksActivity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See also: &lt;a href=&quot;https://wiki.sugarlabs.org/go/Development_Team/Debugging&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Development Team/Debugging&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;check-logs-with-multitail&quot; tabindex=&quot;-1&quot;&gt;Check logs with multitail&lt;/h3&gt;
&lt;p&gt;multitail is really helpful for developing Sugar Activities. It can be used to read the latest log that an Activity wrote and see how it&#39;s growing.&lt;/p&gt;
&lt;p&gt;For example, if we run an Activity three times it will create 3 different .log files behind ~/.sugar/default/logs directory. With multitail we will be seeing the most recent version of the activity log.&lt;/p&gt;
&lt;p&gt;Install multitail using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;sudo yum install multitail
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Show the proper log files&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd ~/.sugar/default/logs
multitail -iw &amp;quot;*&amp;lt;Activity Name&amp;gt;*&amp;quot; 1 -m 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-iw is to inform to multitail about the input files and check for them every 1 second&lt;br /&gt;
-m is to let multitail know about the buffersize (0 is infinite)&lt;/p&gt;
&lt;h3 id=&quot;use-the-pygobject-code-as-example&quot; tabindex=&quot;-1&quot;&gt;Use the pygobject code as example&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://live.gnome.org/PyGObject&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pygobject&lt;/a&gt; is what we use to make&lt;br /&gt;
GTK 3 activities. So, it&#39;s really useful to take a look at the code&lt;br /&gt;
examples that are there. Even more, you can run some demo application&lt;br /&gt;
that show how to use something specific about the library.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone the code:&lt;pre&gt;&lt;code&gt;git clone git://git.gnome.org/pygobject
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Run an example&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd pygobject
cd demos/gtk-demo/demos
python pixbuf.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Grep the code to search for something useful&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd pygobject
git grep GdkPixbuf
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;monitoring-d-bus&quot; tabindex=&quot;-1&quot;&gt;Monitoring DBus&lt;/h3&gt;
&lt;p&gt;Not sure how this command works, but it can give us an interesting&lt;br /&gt;
information. If you run this command and plug an USB drive you will see&lt;br /&gt;
useful information&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;dbus-monitor --system
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;port-to-python-3&quot; tabindex=&quot;-1&quot;&gt;Port to Python 3&lt;/h2&gt;
&lt;p&gt;We are migrating towards Python 3. Python 3 does not support GTK 2.&lt;br /&gt;
Hence, once the activity is ported to GTK 3, please consider porting&lt;br /&gt;
the activity from Python 2 to Python 3.&lt;/p&gt;
&lt;p&gt;Ref: &lt;a href=&quot;https://sugardocs.vercel.app/src/python-porting-guide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Guide to port activities to Python&lt;br /&gt;
3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;releasing-activities-for-maintainers&quot; tabindex=&quot;-1&quot;&gt;Releasing Activities (For maintainers)&lt;/h2&gt;
&lt;p&gt;Once an activity is ported, a new release can be made. The major version&lt;br /&gt;
should be greater than the existing one.&lt;/p&gt;
&lt;p&gt;Please follow&lt;br /&gt;
&lt;a href=&quot;https://sugardocs.vercel.app/contributing.md#checklist---maintainer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;this&lt;/a&gt;&lt;br /&gt;
guide for releasing a new version&lt;/p&gt;
&lt;h2 id=&quot;notes&quot; tabindex=&quot;-1&quot;&gt;Notes&lt;/h2&gt;
&lt;p&gt;These are the changes noted by developers while porting activities&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Gtk.Widget.hide_all()&lt;/code&gt; does not exist anymore. We should use just &lt;code&gt;.hide&lt;/code&gt; &lt;a href=&quot;http://developer.gnome.org/gtk3/3.5/GtkWidget.html#gtk-widget-hide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ref&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the code creates some own object, and it defines some properties,&lt;br /&gt;
you should use &lt;code&gt;__gproperties__&lt;/code&gt; dictionary. &lt;a href=&quot;http://python-gtk-3-tutorial.readthedocs.org/en/latest/objects.html#GObject.GObject.__gproperties__&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ref&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Gtk.ListStore&lt;/code&gt; doesn&#39;t have the method &lt;code&gt;.reorder&lt;/code&gt;. There is a&lt;br /&gt;
&lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=677941&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ticket&lt;/a&gt; reported&lt;br /&gt;
upstream about this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I replaced the use of &lt;code&gt;dbus&lt;/code&gt; by &lt;a href=&quot;http://developer.gnome.org/gio/unstable/pt02.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Gio&lt;/a&gt; to monitor (dis)connection of pen drives&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrate custom signals:&lt;br /&gt;
If you have defined custom gtk objects with custom signal you need to update them to &lt;a href=&quot;http://python-gtk-3-tutorial.readthedocs.org/en/latest/objects.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;the new way&lt;/a&gt;&lt;br /&gt;
You should replace this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gobject import signal_new, TYPE_INT, TYPE_STRING, TYPE_BOOLEAN, TYPE_PYOBJECT, TYPE_NONESIGNAL_RUN_LAST,     signal_new(&#39;extlistview-modified&#39;, gtk.TreeView,
SIGNAL_RUN_LAST, TYPE_NONE, ())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;by adding the signal definition inside the object that you are creating using the &lt;code&gt;__gsignals__&lt;/code&gt; dictionary like this (in this case Gtk.TreeView&lt;br /&gt;
is the class that our object inherits):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository
import GObject
class ExtListView(Gtk.TreeView):
__gsignals__ = { &#39;extlistview-modified&#39;: (GObject.SignalFlags.RUN_LAST, None, ()), }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last argument of the signal definition are the&lt;br /&gt;
argument types that the callback will receive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the mouse cursor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Example use case:&lt;br /&gt;
When the activity is working and we want to show a work in progress cursor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replace this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;self.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.WATCH))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from gi.repository import Gdk
self.get_window().set_cursor(Gdk.Cursor(Gdk.CursorType.WATCH))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;resources&quot; tabindex=&quot;-1&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python GTK 3 Tutorial: &lt;a href=&quot;http://python-gtk-3-tutorial.readthedocs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;a href=&quot;http://python-gtk-3-tutorial.readthedocs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://python-gtk-3-tutorial.readthedocs.org&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyGTK or GTK 2: &lt;a href=&quot;http://www.pygtk.org/docs/pygtk/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://www.pygtk.org/docs/pygtk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sugar Toolkit GTK 3 Documentation:&lt;br /&gt;
&lt;a href=&quot;https://developer.sugarlabs.org/sugar3/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://developer.sugarlabs.org/sugar3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GTK 3 Reference Manual &lt;a href=&quot;http://developer.gnome.org/gtk3/stable/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://developer.gnome.org/gtk3/stable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OLPC Documentation:&lt;br /&gt;
&lt;a href=&quot;http://wiki.laptop.org/go/Activities/PortingToGtk3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://wiki.laptop.org/go/Activities/PortingToGtk3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pango documentation: &lt;a href=&quot;http://developer.gnome.org/pangomm&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://developer.gnome.org/pangomm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GStreamer-1.0 documentation:&lt;br /&gt;
&lt;a href=&quot;http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/index.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GStreamer-1.0 porting hints:&lt;br /&gt;
&lt;a href=&quot;https://wiki.ubuntu.com/Novacut/GStreamer1.0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://wiki.ubuntu.com/Novacut/GStreamer1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;porting-examples&quot; tabindex=&quot;-1&quot;&gt;Porting examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/biorhythm/commit/c16de3b70cce2cc6f8af933e2b062c844a47c144/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Biorhythm (GTK 3 and PangoCairo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/peru-learns-english-activity/commit/caa2cde526b3823a5a1f7d200a76ad5bc3502b0e&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Peru Learns English (GTK 3 and GStreamer 1.0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/jump/commit/b75410d2879d9829df942726f5465b7cf5a9d98d&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Jump (GTK 3 and Sugargame)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/iknowMadagascar/commit/5de78baca2daebe483bcc35912d254c77f2416f4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;I know Madagascar (GTK 3 and Sugargame)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/gtk3-porting-guide/" />
        </entry>
        <entry>
            <title>
                docs
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/docs/</id>
            <content type="html">
                &lt;h1 id=&quot;improving-this-documentation&quot; tabindex=&quot;-1&quot;&gt;Improving this documentation&lt;/h1&gt;
&lt;p&gt;Have you found an error in these docs, or want to improve them?&lt;br /&gt;
Please &lt;a href=&quot;https://sugardocs.vercel.app/src/contact&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;contact us&lt;/a&gt; or directly send pull requests to&lt;br /&gt;
the &lt;a href=&quot;https://github.com/sugarlabs/sugar-docs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This documentation lives in &lt;a href=&quot;https://github.com/sugarlabs/sugar-docs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/sugar-docs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;contributing-images&quot; tabindex=&quot;-1&quot;&gt;Contributing images&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make them 600px width, or less.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may need to highlight parts of the image.  Use color yellow (rgb&lt;br /&gt;
255, 255, 0) at 30% opacity, in a layer with Multiply mode, over the&lt;br /&gt;
screenshot layer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code screenshots: use gedit and default GNOME theme to make them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/docs/" />
        </entry>
        <entry>
            <title>
                dev-environment
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/dev-environment/</id>
            <content type="html">
                &lt;h1 id=&quot;setup-a-development-environment&quot; tabindex=&quot;-1&quot;&gt;Setup a development environment&lt;/h1&gt;
&lt;p&gt;Moved to &lt;a href=&quot;https://github.com/sugarlabs/sugar/blob/master/docs/development-environment.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;docs/development-environment.md&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/dev-environment/" />
        </entry>
        <entry>
            <title>
                desktop-activity
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/desktop-activity/</id>
            <content type="html">
                &lt;h1 id=&quot;write-your-own-sugar-desktop-activity&quot; tabindex=&quot;-1&quot;&gt;Write your own Sugar desktop activity&lt;/h1&gt;
&lt;p&gt;Most Sugar desktop activities are written in Python, using our &lt;a href=&quot;https://github.com/sugarlabs/sugar-toolkit-gtk3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar&lt;br /&gt;
Toolkit&lt;/a&gt; libraries.&lt;/p&gt;
&lt;p&gt;Some Sugar desktop activities are written in languages other than&lt;br /&gt;
Python, such as Smalltalk, C, and JavaScript.  For new activities to&lt;br /&gt;
run on both Sugar desktop and Sugarizer, please consider &lt;a href=&quot;https://sugardocs.vercel.app/src/web-activity&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Write your&lt;br /&gt;
own Sugar web activity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This page shows how to develop an activity using Python 3 with Sugar Toolkit.&lt;/p&gt;
&lt;h3 id=&quot;setting-up-a-development-environment&quot; tabindex=&quot;-1&quot;&gt;Setting up a development environment&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar/blob/master/docs/development-environment.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Setup a development&lt;br /&gt;
environment&lt;/a&gt;, for testing your activity and&lt;br /&gt;
releasing it for distribution.&lt;/p&gt;
&lt;h3 id=&quot;create-a-new-activity-from-a-template&quot; tabindex=&quot;-1&quot;&gt;Create a new activity from a template&lt;/h3&gt;
&lt;p&gt;Locate the activity directories.  They may include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/Activities&lt;/code&gt; for native Sugar desktop, and packaged Sugar desktop on Fedora, Debian or Ubuntu;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/share/sugar/activities&lt;/code&gt; for packaged Sugar desktop; and,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/sugar-build/activities&lt;/code&gt; for &lt;em&gt;sugar-build&lt;/em&gt; only.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each installed activity is in a directory under the activity&lt;br /&gt;
directories.  This is where you will create your new activity.&lt;/p&gt;
&lt;p&gt;Clone the Hello World activity from&lt;br /&gt;
&lt;a href=&quot;https://github.com/sugarlabs/hello-world-fork&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;hello-world on GitHub&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/sugarlabs/hello-world-fork.git Name.activity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use the &lt;code&gt;.activity&lt;/code&gt; suffix in the directory name of an activity,&lt;br /&gt;
because that&#39;s the way an activity bundle is released.&lt;/p&gt;
&lt;h3 id=&quot;customize&quot; tabindex=&quot;-1&quot;&gt;Customize&lt;/h3&gt;
&lt;p&gt;Your clone of the Hello World activity contains a file,&lt;br /&gt;
&lt;code&gt;activity/activity.info&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Activity]
name = HelloWorld
activity_version = 1
bundle_id = org.sugarlabs.HelloWorld
exec = sugar-activity3 activity.HelloWorldActivity
icon = activity-helloworld
licence = GPLv3+
repository = https://github.com/sugarlabs/hello-world-fork.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You must set a new &lt;code&gt;name&lt;/code&gt; and a unique &lt;code&gt;bundle_id&lt;/code&gt; for your activity.&lt;/p&gt;
&lt;p&gt;Avoid punctuation in your &lt;code&gt;bundle_id&lt;/code&gt;, e.g.,&lt;br /&gt;
&lt;code&gt;org.sugarlabs.my-activity-name&lt;/code&gt; is not valid. Instead, use&lt;br /&gt;
CamelCase, e.g., &lt;code&gt;org.sugarlabs.MyActivity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You should change the Activity class in your &lt;code&gt;activity.py&lt;/code&gt; file, e.g., from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class HelloWorldActivity(activity.Activity):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MyActivity(activity.Activity):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You must change the &lt;code&gt;exec&lt;/code&gt; field as well, e.g., from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exec = sugar-activity3 activity.HelloWorldActivity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exec = sugar-activity3 activity.MyActivity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should set the repository field to the URL of the git repository&lt;br /&gt;
of your project.&lt;/p&gt;
&lt;p&gt;And we recommend that you use a GPLv3+ license.&lt;/p&gt;
&lt;p&gt;Your &lt;code&gt;activity.info&lt;/code&gt; file will look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Activity]
name = MyActivity
activity_version = 1
bundle_id = org.sugarlabs.MyActivity
exec = sugar-activity3 activity.MyActivity
icon = activity-helloworld
licence = GPLv3+
repository = https://github.com/MyGitHubAccount/MyActivityRepo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To read more about the &lt;code&gt;activity.info&lt;/code&gt; file, see &lt;a href=&quot;https://wiki.sugarlabs.org/go/Development_Team/Almanac/Activity_Bundles&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Activity&lt;br /&gt;
Bundles&lt;/a&gt;&lt;br /&gt;
on our Wiki.&lt;/p&gt;
&lt;p&gt;You must make your activity icon unique in the Sugar interface by&lt;br /&gt;
making a new one, or borrowing from another icon and making changes.&lt;br /&gt;
Ask for help from the community if you don&#39;t feel comfortable with&lt;br /&gt;
graphic design.&lt;/p&gt;
&lt;p&gt;Here is &lt;code&gt;activity/activity-helloworld.svg&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sugardocs.vercel.app/images/activity-helloworld.svg&quot; alt=&quot;Activity Icon&quot; title=&quot;Activity icon&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You should rename this file and change &lt;code&gt;icon&lt;/code&gt; in the &lt;code&gt;activity.info&lt;/code&gt;&lt;br /&gt;
file.&lt;/p&gt;
&lt;p&gt;Your activity icon must follow the guidelines as described in&lt;br /&gt;
&lt;a href=&quot;https://wiki.sugarlabs.org/go/Human_Interface_Guidelines/The_Sugar_Interface/Icons&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;The Sugar Interface:&lt;br /&gt;
Icons&lt;/a&gt; on our Wiki.&lt;/p&gt;
&lt;p&gt;There is a helper script, &lt;a href=&quot;https://sugardocs.vercel.app/src/sugar-iconify&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar&lt;br /&gt;
Iconify&lt;/a&gt; that will help&lt;br /&gt;
you create Sugar-compliant icons.&lt;/p&gt;
&lt;p&gt;Of course, the interesting changes will be the ones you make to the&lt;br /&gt;
activity itself. Below you will find links to some resources&lt;br /&gt;
on Sugar Activity development, but perhaps the&lt;br /&gt;
best way to get started is to modify an existing activity that has&lt;br /&gt;
features similar to the one you want to create.&lt;/p&gt;
&lt;h3 id=&quot;running-your-activity&quot; tabindex=&quot;-1&quot;&gt;Running your activity&lt;/h3&gt;
&lt;p&gt;Launch Sugar and your new activity should be immediately available,&lt;br /&gt;
although since it has not yet been selected as a favorite, it will&lt;br /&gt;
not appear by default on the Sugar Home View (F3). You need to either;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;type the name of your activity into the search entry and press enter; or,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;select the List View (ctrl+2) to see your activity, and click on it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If all goes well, your activity will launch.&lt;/p&gt;
&lt;p&gt;There are many opportunities to make mistakes. Don&#39;t get discouraged,&lt;br /&gt;
as debugging is a great way to learn. One useful tool is the Log&lt;br /&gt;
Activity, which will show you the log files of the operating system,&lt;br /&gt;
Sugar and activities. Alternatively, you can look at the log files&lt;br /&gt;
from the command line.&lt;/p&gt;
&lt;p&gt;Log files are usually in the directory &lt;code&gt;~/.sugar/default/logs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Log files for &lt;em&gt;sugar-build&lt;/em&gt; are in the directory &lt;code&gt;~/sugar-build/home/dotsugar/default/logs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Log files are named using the &lt;code&gt;bundle_id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may also test interactively by starting Terminal, then &lt;code&gt;cd&lt;/code&gt; to the activity directory, and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sugar-activity .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if your activity uses python2. If it uses python3, type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sugar-activity3 .
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;file-structure&quot; tabindex=&quot;-1&quot;&gt;File structure&lt;/h3&gt;
&lt;p&gt;All activities should follow this file structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MyActivity.activity/
|-- activity/
|   |-- activity.info
|   `-- activity-icon.svg
|-- activity.py
`-- setup.py
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;activity/&lt;/code&gt; contains information about your activity, including the&lt;br /&gt;
&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;bundle_id&lt;/code&gt;, and the &lt;code&gt;icon&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;activity.py&lt;/code&gt; contains an instance of the activity class, which is&lt;br /&gt;
run when your activity is launched.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setup.py&lt;/code&gt; lets you install your activity or make an installable&lt;br /&gt;
bundle with it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;translation&quot; tabindex=&quot;-1&quot;&gt;Translation&lt;/h3&gt;
&lt;p&gt;Sugar serves a global audience, so it is important to enable your&lt;br /&gt;
activity for internationalization and localization. A &lt;a href=&quot;https://wiki.sugarlabs.org/go/Translation_Team/i18n_Best_Practices&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;guide to best&lt;br /&gt;
practices&lt;/a&gt;&lt;br /&gt;
is on our Wiki.&lt;/p&gt;
&lt;h3 id=&quot;revision-control-your-code&quot; tabindex=&quot;-1&quot;&gt;Revision control your code&lt;/h3&gt;
&lt;p&gt;For development you can initialize the repository as a git&lt;br /&gt;
repository. This will help you to track your changes. First use &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-init.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;git&lt;br /&gt;
init&lt;/a&gt;&lt;br /&gt;
to initialize the repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-status.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;git&lt;br /&gt;
status&lt;/a&gt;&lt;br /&gt;
you can show the available files in the folder they are still&lt;br /&gt;
untracked. Now add all the files in the directory and commit those&lt;br /&gt;
changes, you can use git status again to see the current state:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -a -m &#39;Initial import&#39;
git status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We recommend that you use &lt;a href=&quot;http://github.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;github&lt;/a&gt; to host your&lt;br /&gt;
activity.&lt;/p&gt;
&lt;h3 id=&quot;check-python-coverage-of-your-activity&quot; tabindex=&quot;-1&quot;&gt;Check Python Coverage of your activity&lt;/h3&gt;
&lt;p&gt;You can check the Python Coverage of your activity by following &lt;a href=&quot;https://sugardocs.vercel.app/src/python-coverage-guide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;this&lt;/a&gt; guide.&lt;/p&gt;
&lt;h3 id=&quot;ready-to-release&quot; tabindex=&quot;-1&quot;&gt;Ready to release&lt;/h3&gt;
&lt;p&gt;Once your activity is working, you can ask to have&lt;br /&gt;
your activity repository hosted under the &lt;a href=&quot;http://github.com/sugarlabs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Labs github&lt;br /&gt;
organization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make an XO bundle.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python setup.py dist_xo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if it works with Python 2 then upload it to the Sugar Activity&lt;br /&gt;
Library &lt;a href=&quot;http://activities.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://activities.sugarlabs.org/&lt;/a&gt;.&lt;br /&gt;
After that, users of Sugar can download and install your activity.&lt;/p&gt;
&lt;p&gt;For further releases, you must update the activity_version in&lt;br /&gt;
&lt;code&gt;activity/activity.info&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;more-details&quot; tabindex=&quot;-1&quot;&gt;More details&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.sugarlabs.org/sugar3/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugar Toolkit Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://python-gtk-3-tutorial.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Python GTK+ 3 Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://flossmanuals.net/make-your-own-sugar-activities/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Make Your Own Sugar Activities&lt;/a&gt;, a book by James Simmons.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;coding-standards&quot; tabindex=&quot;-1&quot;&gt;Coding standards&lt;/h1&gt;
&lt;p&gt;We currently use &lt;a href=&quot;https://docs.python.org/3/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Python 3&lt;/a&gt; for&lt;br /&gt;
the Sugar Toolkit and Sugar activity development.&lt;/p&gt;
&lt;p&gt;We recommend &lt;a href=&quot;https://pypi.python.org/pypi/flake8&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;flake8&lt;/a&gt; as a&lt;br /&gt;
wrapper around the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pep8&lt;/a&gt;&lt;br /&gt;
and &lt;a href=&quot;https://pypi.python.org/pypi/pyflakes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pyflakes&lt;/a&gt; code checkers.&lt;/p&gt;
&lt;p&gt;To check for flake8 warnings in the current directory, run this command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 -m flake8 *.py
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/desktop-activity/" />
        </entry>
        <entry>
            <title>
                contributing
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/contributing/</id>
            <content type="html">
                &lt;h1 id=&quot;contributing&quot; tabindex=&quot;-1&quot;&gt;Contributing&lt;/h1&gt;
&lt;p&gt;We use the pull-request model, see &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub&#39;s help on pull-request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In brief, you will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on GitHub, find and fork the source repository;&lt;/li&gt;
&lt;li&gt;on your computer, clone your fork repository,&lt;/li&gt;
&lt;li&gt;commit your changes in a new branch;&lt;/li&gt;
&lt;li&gt;push your branch and submit a pull-request for it;&lt;/li&gt;
&lt;li&gt;go through the review process until your pull-request is merged; and&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note there is no need to ask permission to work on an&lt;br /&gt;
issue. You should check for pull requests linked to an issue you are&lt;br /&gt;
addressing; if there are none, then assume nobody has done&lt;br /&gt;
anything. Begin to fix the problem, test, make your commits, push your&lt;br /&gt;
commits, then make a pull request. Mention an issue number in the&lt;br /&gt;
pull request, but not the commit message. These practices allow the&lt;br /&gt;
competition of ideas (Sugar Labs is a meritocracy).&lt;/p&gt;
&lt;h2 id=&quot;modifying-activities&quot; tabindex=&quot;-1&quot;&gt;Modifying Activities&lt;/h2&gt;
&lt;p&gt;Most activity repositories can be found in our &lt;a href=&quot;https://github.com/sugarlabs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub &lt;code&gt;sugarlabs&lt;/code&gt;&lt;br /&gt;
organization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few activity repositories are somewhere else; read the&lt;br /&gt;
&lt;code&gt;activity/activity.info&lt;/code&gt; file, check the metadata on the&lt;br /&gt;
&lt;a href=&quot;https://activities.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;activities.sugarlabs.org app&lt;br /&gt;
store&lt;/a&gt;, or the &lt;a href=&quot;https://wiki.sugarlabs.org/go/Activity&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Activity page on&lt;br /&gt;
wiki.sugarlabs.org&lt;/a&gt;, or our&lt;br /&gt;
deprecated &lt;a href=&quot;https://git.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;gitorious instance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For new activities, see &lt;a href=&quot;https://sugardocs.vercel.app/src/desktop-activity&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Write your own Sugar desktop&lt;br /&gt;
activity&lt;/a&gt;, or &lt;a href=&quot;https://sugardocs.vercel.app/src/web-activity&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Write your own Sugar web&lt;br /&gt;
activity&lt;/a&gt;, then make a new repository in your&lt;br /&gt;
GitHub account, put the source code in it, then ask the &lt;a href=&quot;https://lists.sugarlabs.org/listinfo/systems&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;systems@&lt;br /&gt;
list&lt;/a&gt; to move it to the&lt;br /&gt;
GitHub &lt;code&gt;sugarlabs&lt;/code&gt; organization.&lt;/p&gt;
&lt;p&gt;After modifying an activity, a new release may be needed.  Some activities have no maintainer, so you may need to be the maintainer for a short time.&lt;/p&gt;
&lt;h3 id=&quot;checklist-anyone&quot; tabindex=&quot;-1&quot;&gt;Checklist - anyone&lt;/h3&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_0&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_0&quot;&gt; run the activity and confirm that you understand what it is for, what it does, and how a child will use it,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_1&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_1&quot;&gt; make a fork and clone it,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_2&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_2&quot;&gt; check if what you want to change is available already in any other branches or forks,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_3&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_3&quot;&gt; make and &lt;a href=&quot;https://sugardocs.vercel.app/#testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;test&lt;/a&gt; your changes,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_4&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_4&quot;&gt; if your changes add a new feature or will affect users; update the NEWS file, the &lt;a href=&quot;http://readme.md/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;README.md&lt;/a&gt; file, and the help-activity,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_5&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_5&quot;&gt; if there is a &lt;code&gt;po/*.pot&lt;/code&gt; file, and your changes affect translated strings; regenerate using &lt;code&gt;python setup.py genpot&lt;/code&gt;,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_6&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_6&quot;&gt; make a branch, one or more commits, and a pull request, see &lt;a href=&quot;https://sugardocs.vercel.app/#workflow&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Workflow&lt;/a&gt; below.&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;checklist-maintainer&quot; tabindex=&quot;-1&quot;&gt;Checklist - maintainer&lt;/h3&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_7&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_7&quot;&gt; for Python 2 branches, check version of latest bundle release in&lt;br /&gt;
&lt;a href=&quot;https://activities.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;activities.sugarlabs.org&lt;/a&gt;,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_8&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_8&quot;&gt; check version of latest tarball release in &lt;a href=&quot;https://download.sugarlabs.org/sources/sucrose/fructose/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;download.sugarlabs.org/sources/sucrose/fructose/&lt;/a&gt; or &lt;a href=&quot;https://download.sugarlabs.org/sources/honey/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;download.sugarlabs.org/sources/honey/&lt;/a&gt;,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_9&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_9&quot;&gt; check for a release version git tag, e.g. v34,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_10&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_10&quot;&gt; correlate with &lt;code&gt;activity_version&lt;/code&gt; metadata in &lt;code&gt;activity/activity.info&lt;/code&gt;,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_11&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_11&quot;&gt; look for commits &lt;em&gt;after&lt;/em&gt; any of these, in either;&lt;/label&gt;&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_12&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_12&quot;&gt; master branch of repository at sugarlabs,&lt;/label&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_13&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_13&quot;&gt; any other branches,&lt;/label&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_14&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_14&quot;&gt; any other forks,&lt;/label&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_15&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_15&quot;&gt; orphaned repositories with the same &lt;code&gt;bundle_id&lt;/code&gt; value, using GitHub or Google Search,&lt;/label&gt;&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_16&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_16&quot;&gt; deprecated repositories at &lt;a href=&quot;http://git.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;git.sugarlabs.org&lt;/a&gt;,&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_17&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_17&quot;&gt; review and merge all pull requests,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_18&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_18&quot;&gt; apply all desired commits, making pull requests if review is needed,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_19&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_19&quot;&gt; apply any &lt;a href=&quot;https://translate.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;translate.sugarlabs.org&lt;/a&gt; changes, e.g. using a &lt;a href=&quot;https://github.com/sugarlabs/sugar-tools/blob/master/activity-translations&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;download script&lt;/a&gt;,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_20&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_20&quot;&gt; if there is a &lt;code&gt;po/*.pot&lt;/code&gt; file, regenerate using &lt;code&gt;python setup.py genpot&lt;/code&gt;, review the changes, and commit,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_21&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_21&quot;&gt; If the activity is on &lt;a href=&quot;https://sugardocs.vercel.app/weblate.sugarlabs.org&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;weblate&lt;/a&gt;, be sure to merged any open PRs raised&lt;br /&gt;
from the &lt;a href=&quot;https://wiki.sugarlabs.org/go/Service/Weblate&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;weblate-sync&lt;/a&gt; workflow.&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_22&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_22&quot;&gt; update the &lt;a href=&quot;http://readme.md/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;README.md&lt;/a&gt; file if necessary,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_23&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_23&quot;&gt; write release notes for the NEWS file, change the &lt;code&gt;activity_version&lt;/code&gt; metadata in &lt;code&gt;activity/activity.info&lt;/code&gt;, commit, and &lt;code&gt;git tag&lt;/code&gt; the version,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_24&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_24&quot;&gt; update the activity documentation in the help-activity repository,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_25&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_25&quot;&gt; for activities that include a tarball release, or where Fedora or Debian packages may be made, create a tarball using &lt;code&gt;python setup.py dist_source&lt;/code&gt;, and upload tarball to &lt;a href=&quot;http://download.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;download.sugarlabs.org&lt;/a&gt; using shell account,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_26&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_26&quot;&gt; create bundle using &lt;code&gt;python setup.py dist_xo&lt;/code&gt;, and test that it&lt;br /&gt;
can be installed by Browse,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_27&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_27&quot;&gt; for Python 2 branches only, upload to &lt;a href=&quot;http://activities.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;activities.sugarlabs.org&lt;/a&gt;&lt;br /&gt;
using developer account,&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_28&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_28&quot;&gt; rebase any other maintained branches or pull requests, such as&lt;br /&gt;
those for past or future versions of Python, or past releases of&lt;br /&gt;
Fedora, Ubuntu or libraries.&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_29&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_29&quot;&gt; for Python 3 Activities, copy the bundle to &lt;code&gt;~activities-v4/bundles&lt;/code&gt;,&lt;br /&gt;
remove any other old versions of the bundle from &lt;code&gt;~activities-v4/bundles&lt;/code&gt;, and trigger&lt;br /&gt;
a rebuild of the static site using &lt;code&gt;rebuild-aslo&lt;/code&gt; command, verify if your bundle is&lt;br /&gt;
visible on &lt;a href=&quot;https://v4.activities.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://v4.activities.sugarlabs.org&lt;/a&gt; . For more information, it is&lt;br /&gt;
recommended to take a look at the   &lt;a href=&quot;https://wiki.sugarlabs.org/go/Service/activities4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Activities4 wiki page&lt;/a&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;modifying-sugar&quot; tabindex=&quot;-1&quot;&gt;Modifying Sugar&lt;/h2&gt;
&lt;p&gt;Sugar repositories can be found in our &lt;a href=&quot;https://github.com/sugarlabs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub &lt;code&gt;sugarlabs&lt;/code&gt;&lt;br /&gt;
organization&lt;/a&gt;.  Sugar desktop&lt;br /&gt;
environment repositories are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/sugar&lt;/a&gt; (the desktop shell);&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-artwork&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/sugar-artwork&lt;/a&gt; (images, icons, themes);&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-toolkit-gtk3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/sugar-toolkit-gtk3&lt;/a&gt; (graphical widget library); and,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar-datastore&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/sugarlabs/sugar-datastore&lt;/a&gt; (journal backend).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;workflow&quot; tabindex=&quot;-1&quot;&gt;Workflow&lt;/h2&gt;
&lt;h3 id=&quot;open-an-issue&quot; tabindex=&quot;-1&quot;&gt;Open an Issue&lt;/h3&gt;
&lt;p&gt;We track issues in &lt;a href=&quot;http://bugs.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://bugs.sugarlabs.org/&lt;/a&gt; or in the GitHub Issues tab of repositories.&lt;/p&gt;
&lt;p&gt;An improvement to Sugar may start with an issue discussion, to build consensus and ensure that work isn&#39;t wasted.  An issue may be avoided for fixing bugs that are obvious to everyone or part of a project.&lt;/p&gt;
&lt;h3 id=&quot;forking&quot; tabindex=&quot;-1&quot;&gt;Forking&lt;/h3&gt;
&lt;p&gt;You should first fork a repository on GitHub.&lt;br /&gt;
This step is needed only once.&lt;br /&gt;
See &lt;a href=&quot;https://help.github.com/articles/fork-a-repo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;complete help in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;cloning&quot; tabindex=&quot;-1&quot;&gt;Cloning&lt;/h3&gt;
&lt;p&gt;You should clone your fork.&lt;br /&gt;
This step is needed only once.&lt;br /&gt;
Using &lt;a href=&quot;https://github.com/sugarlabs/sugar&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sugar&lt;/a&gt; as example;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:YOUR-NAME/sugar.git
cd sugar
git remote add upstream https://github.com/sugarlabs/sugar.git
git fetch upstream
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;branching&quot; tabindex=&quot;-1&quot;&gt;Branching&lt;/h3&gt;
&lt;p&gt;Create a branch per set of changes; e.g. to fix a problem or add a feature;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b BRANCH-NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your BRANCH-NAME can be anything, other than master.  The scope is your forked repository.  The branch name will be shown on pull-requests.&lt;/p&gt;
&lt;h3 id=&quot;making-commits&quot; tabindex=&quot;-1&quot;&gt;Making commits&lt;/h3&gt;
&lt;p&gt;Change files, and commit.  Commit messages are kept by git, and are used later when problems are being solved.  When writing a commit message;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start with a one line summary of the change;&lt;/li&gt;
&lt;li&gt;leave a blank line after the summary;&lt;/li&gt;
&lt;li&gt;explain the problem that is solved, unless the summary makes it obvious;&lt;/li&gt;
&lt;li&gt;when the problem was introduced by a previous commit, mention the hash;&lt;/li&gt;
&lt;li&gt;when the problem is in an issue or ticket, add &amp;quot;Fixes &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#1234&quot;&gt;#1234&lt;/a&gt;&amp;quot;;&lt;/li&gt;
&lt;li&gt;avoid mentioning GitHub or other pull-requests, as these are not kept in git;&lt;/li&gt;
&lt;li&gt;avoid mentioning any contest tasks or mentors; use pull-request comments instead; and&lt;/li&gt;
&lt;li&gt;use imperative mood, like &amp;quot;add foo&amp;quot;, or &amp;quot;port to bar&amp;quot;; (if English is not your first language, see &lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_mood&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;imperative mood&lt;/a&gt;, &lt;a href=&quot;https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/SubmittingPatches#n133&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;git documentation&lt;/a&gt; and &lt;a href=&quot;https://www.danclarke.com/git-tense&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;blog post by Dan Clarke&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Make one or more commits and push the branch to your repository;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin BRANCH-NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;sending-a-pull-request&quot; tabindex=&quot;-1&quot;&gt;Sending a pull-request&lt;/h3&gt;
&lt;p&gt;Send a pull-request for your branch.&lt;br /&gt;
Navigate to your repository page in GitHub, switch to the branch you made, and then press the &lt;strong&gt;Pull Request&lt;/strong&gt; button.&lt;/p&gt;
&lt;p&gt;When writing a pull-request message;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if there is only one commit, begin with the GitHub default of the commit message, otherwise write a summary of the series of commits;&lt;/li&gt;
&lt;li&gt;link to any relevant pull-requests, issues, or tickets; and&lt;/li&gt;
&lt;li&gt;link to any contest tasks, and name your @mentors to subscribe them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A review will happen in the pull-request, and a reviewer will either;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;merge, squash, or rebase your commits;&lt;/li&gt;
&lt;li&gt;merge your commits with their own changes;&lt;/li&gt;
&lt;li&gt;ask you to make changes; or&lt;/li&gt;
&lt;li&gt;close and reject your pull-request giving reasons.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When they ask you for changes, you may have to change both files, commits or commit messages.&lt;/p&gt;
&lt;p&gt;When squashing commits to different files, use interactive rebase.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase -i master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After resolving any conflicts, push the changes to the same branch;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push --force origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then respond on the pull-request.&lt;/p&gt;
&lt;h3 id=&quot;keep-your-pull-request-up-to-date&quot; tabindex=&quot;-1&quot;&gt;Keep your pull-request up to date&lt;/h3&gt;
&lt;p&gt;When there have been upstream commits while your pull-request was open, you should rebase your pull-request;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git pull --rebase upstream
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then push the changes to the same branch;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push --force origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pull-request will be updated.&lt;/p&gt;
&lt;h3 id=&quot;keep-your-fork-up-to-date&quot; tabindex=&quot;-1&quot;&gt;Keep your fork up to date&lt;/h3&gt;
&lt;p&gt;When there have been upstream commits since your fork was made, you should bring these into your fork:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git pull upstream
git checkout BRANCH-NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;review&quot; tabindex=&quot;-1&quot;&gt;Review&lt;/h3&gt;
&lt;p&gt;We encourage &lt;a href=&quot;https://sugardocs.vercel.app/#testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;testing&lt;/a&gt; before merging a pull-request.&lt;/p&gt;
&lt;p&gt;So instead of merging directly with the &amp;quot;merge&amp;quot; button on GitHub, we may do a local merge, then test, then push.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://help.github.com/articles/merging-a-pull-request&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub help on merging a pull-request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The GitHub page for the pull-request will provide you the right commands to do the local merge, similar to the following.&lt;/p&gt;
&lt;p&gt;Get the changes from that branch to a new local branch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b SOME-USER-topic1 master
git pull https://github.com/SOME-USER/sugar.git topic1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://sugardocs.vercel.app/#testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Test&lt;/a&gt;! If everything is fine, merge:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git rebase SOME-USER-topic1
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;close-issue&quot; tabindex=&quot;-1&quot;&gt;Close Issue&lt;/h3&gt;
&lt;p&gt;Once your pull-request is merged, you should close any issue or ticket.  GitHub issues named as &amp;quot;Fixes&amp;quot; in a commit message may be automatically closed.&lt;/p&gt;
&lt;p&gt;Be sure to thank everyone who helped you out along the way.&lt;/p&gt;
&lt;h2 id=&quot;testing&quot; tabindex=&quot;-1&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;When testing activities;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;activity must start,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;activity must refresh entire display when focus is restored,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;activity must behave predictably (except where randomness is designed),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;activity must save data to journal,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;activity must restore the saved data from journal (click on the journal entry),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;other activities must be able to use saved data, if it is declared with the relevant content type,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;every coded feature should either work properly, or be removed if it cannot be fixed,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;collaboration support, if present, must function properly between two or more systems,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;activity should not consume all available battery power (e.g. pygame clock rate too high),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;activity should not contain any security vulnerabilities,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;activity should not reveal personal information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;guide-for-reviewers&quot; tabindex=&quot;-1&quot;&gt;Guide for Reviewers&lt;/h2&gt;
&lt;h3 id=&quot;goals&quot; tabindex=&quot;-1&quot;&gt;Goals&lt;/h3&gt;
&lt;p&gt;Goals for review are to;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;detect trivial mistakes,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;maintain consistent and good code quality,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reproduce &lt;a href=&quot;https://sugardocs.vercel.app/#testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;test&lt;/a&gt; results, (especially for critical repositories),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;maintain a useful git commit history for use by git bisect, and developers who read it,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;maintain other records, such as issues, tickets, and documentation,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not waste the time of the contributor, by doing anything trivial that otherwise the contributor might have to do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;checklist&quot; tabindex=&quot;-1&quot;&gt;Checklist&lt;/h3&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_30&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_30&quot;&gt; does the change have consensus of the community, see also &lt;a href=&quot;https://sugardocs.vercel.app/code-of-conduct.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;code of conduct&lt;/a&gt; (if a reviewer is in doubt, seek opinions by @mentioning people),&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_31&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_31&quot;&gt; does the commit message explain the summary, problem, and solution, so that it can be used in future analysis, see also &lt;a href=&quot;https://sugardocs.vercel.app/#making-commits&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;making commits&lt;/a&gt; (if a reviewer can fix it by squash or manual rebase, do so),&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_32&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_32&quot;&gt; does the commit message reference any issue, &lt;a href=&quot;http://bugs.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;bugs.sugarlabs.org&lt;/a&gt; ticket number, or downstream ticket numbers, (if a reviewer can fix it by squash or manual rebase, do so),&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_33&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_33&quot;&gt; are the number of commits excessive for future analysis, (a reviewer may squash or rebase if necessary),&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_34&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_34&quot;&gt; is the changed code consistent in style with the existing code, see also &lt;a href=&quot;https://sugardocs.vercel.app/desktop-activity.md#coding-standards&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;coding standards&lt;/a&gt;, (on the other hand, expect flake8 changes to be in separate commits),&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cbx_35&quot; disabled=&quot;true&quot; /&gt;&lt;label for=&quot;cbx_35&quot;&gt; for critical repositories, does the change work properly on our latest version of Sugar on either Fedora, Debian, or Ubuntu.&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;critical-repositories&quot; tabindex=&quot;-1&quot;&gt;Critical repositories&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sugar, sugar-toolkit, sugar-toolkit-gtk3, sugar-artwork, sugar-datastore, gst-plugins-espeak,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;each of the &lt;a href=&quot;https://wiki.sugarlabs.org/go/Development_Team/Release/Modules#Fructose&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Fructose&lt;/a&gt; activity set repositories,&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;frequently-asked-questions&quot; tabindex=&quot;-1&quot;&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;h3 id=&quot;i-ve-used-the-git-hub-editor-how-can-i-rebase-or-amend-commits&quot; tabindex=&quot;-1&quot;&gt;I&#39;ve used the GitHub editor, how can I rebase or amend commits?&lt;/h3&gt;
&lt;p&gt;Make a local clone of your GitHub repository, use &lt;code&gt;git commit --amend&lt;/code&gt; or the other advanced CLI features, then &lt;code&gt;git push&lt;/code&gt; back to GitHub.&lt;/p&gt;
&lt;h3 id=&quot;error-403-on-code-git-push-code&quot; tabindex=&quot;-1&quot;&gt;Error 403 on &lt;code&gt;git push&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Most likely you have cloned someone else&#39;s repository, and you should&lt;br /&gt;
instead fork their repository, clone your own repository, make your&lt;br /&gt;
changes, then push.  See &lt;a href=&quot;http://lists.sugarlabs.org/archive/sugar-devel/2017-March/053926.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Getting error 403 while submitting&lt;br /&gt;
PR&lt;/a&gt;&lt;br /&gt;
and &lt;a href=&quot;http://lists.sugarlabs.org/archive/sugar-devel/2017-March/053929.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;D. Joe&#39;s&lt;br /&gt;
reply&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/contributing/" />
        </entry>
        <entry>
            <title>
                contact
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/contact/</id>
            <content type="html">
                &lt;h1 id=&quot;contact&quot; tabindex=&quot;-1&quot;&gt;Contact&lt;/h1&gt;
&lt;p&gt;Join us at Sugar-devel mailing list&lt;br /&gt;
&lt;a href=&quot;http://lists.sugarlabs.org/listinfo/sugar-devel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://lists.sugarlabs.org/listinfo/sugar-devel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We have a &lt;a href=&quot;https://www.matrix.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Matrix channel&lt;/a&gt; where real time discussions mostly happen.&lt;/p&gt;
&lt;p&gt;Some important channels are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://matrix.to/#/#sugar:matrix.org&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#sugar&quot;&gt;#sugar&lt;/a&gt;:matrix.org&lt;/a&gt;: General Sugar Labs discussion&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://matrix.to/#/#sugar-systems:matrix.org&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#sugar-systems&quot;&gt;#sugar-systems&lt;/a&gt;:matrix.org&lt;/a&gt;: Questions and discussion about Sugar Labs Infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://matrix.to/#/#music-blocks:matrix.org&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#music-blocks&quot;&gt;#music-blocks&lt;/a&gt;:matrix.org&lt;/a&gt;: Share your projects and asks questions about Music Blocks (&lt;a href=&quot;http://musicblocks.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;musicblocks.sugarlabs.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://matrix.to/#/#musicblocksdev:matrix.org&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#musicblocksdev&quot;&gt;#musicblocksdev&lt;/a&gt;:matrix.org&lt;/a&gt;: Development for Music Blocks visual programming language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Sugarizer specific discussions, join the &lt;a href=&quot;https://discord.gg/Djeqr8xAdM&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Discord server&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/contact/" />
        </entry>
        <entry>
            <title>
                code-of-conduct
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/code-of-conduct/</id>
            <content type="html">
                &lt;h1 id=&quot;code-of-conduct&quot; tabindex=&quot;-1&quot;&gt;Code of Conduct&lt;/h1&gt;
&lt;p&gt;To be effective, the members of the Sugar Labs community must work&lt;br /&gt;
together; our code of conduct lays down the &amp;quot;ground rules&amp;quot; for our&lt;br /&gt;
cooperative efforts.&lt;/p&gt;
&lt;p&gt;The Sugar Labs community supports the educators and software&lt;br /&gt;
developers who use and develop the Sugar Learning Platform. Sugar is a&lt;br /&gt;
place for children to explore, learn, teach, and reflect. Sugar Labs&lt;br /&gt;
is a place where we all can explore, learn, teach, and reflect. The&lt;br /&gt;
same underlying principles that make Sugar great—discovery,&lt;br /&gt;
collaboration, and reflection—are central to the way the Sugar&lt;br /&gt;
community operates.&lt;/p&gt;
&lt;p&gt;We chose the name Sugar Labs, plural, because we are more than one&lt;br /&gt;
lab, one person, or one idea. Plurality captures the spirit of&lt;br /&gt;
sharing, cooperation, and criticism that is at the heart of the free&lt;br /&gt;
software/open-source movement. We collaborate freely on a volunteer&lt;br /&gt;
basis to build software for everyone&#39;s benefit. We improve on the work&lt;br /&gt;
of others, which we have been given freely, and then share our&lt;br /&gt;
improvements on the same basis.&lt;/p&gt;
&lt;p&gt;That collaboration depends on good relationships between developers&lt;br /&gt;
(and end-users). We have agreed upon the following Code of Conduct as&lt;br /&gt;
a guide to our collaboration and cooperation.&lt;/p&gt;
&lt;p&gt;This Code of Conduct covers your behavior as a member of the Sugar&lt;br /&gt;
Labs community, in any forum, mailing list, wiki, web site, IRC&lt;br /&gt;
channel, code-sprint, public meeting, or private correspondence. The&lt;br /&gt;
Oversight Board will arbitrate in any dispute over the conduct of a&lt;br /&gt;
member of the community.&lt;/p&gt;
&lt;h2 id=&quot;be-considerate&quot; tabindex=&quot;-1&quot;&gt;Be considerate&lt;/h2&gt;
&lt;p&gt;Your work will be used by other people, and you in turn will depend on&lt;br /&gt;
the work of others. Any decision you take will affect users and&lt;br /&gt;
colleagues, and we expect you to take those consequences into account&lt;br /&gt;
when making decisions. For example, when we are in a feature freeze,&lt;br /&gt;
please don&#39;t upload dramatically new versions of critical system&lt;br /&gt;
software, as other people will be testing the frozen system and not be&lt;br /&gt;
expecting big changes.&lt;/p&gt;
&lt;h2 id=&quot;be-respectful&quot; tabindex=&quot;-1&quot;&gt;Be respectful&lt;/h2&gt;
&lt;p&gt;The Sugar Labs community and its members treat one another with&lt;br /&gt;
respect. Everyone can make a valuable contribution to Sugar. We may&lt;br /&gt;
not always agree, but disagreement is no excuse for poor behavior and&lt;br /&gt;
poor manners. We might all experience some frustration now and then,&lt;br /&gt;
but we cannot allow that frustration to turn into a personal&lt;br /&gt;
attack. It&#39;s important to remember that a community where people feel&lt;br /&gt;
uncomfortable or threatened is not a productive one. We expect members&lt;br /&gt;
of the Sugar community to be respectful when dealing with other&lt;br /&gt;
contributors as well as with people outside the Sugar project, and&lt;br /&gt;
with users of Sugar.&lt;/p&gt;
&lt;h2 id=&quot;be-collaborative&quot; tabindex=&quot;-1&quot;&gt;Be collaborative&lt;/h2&gt;
&lt;p&gt;Sugar Labs and Free Software are about collaboration and working&lt;br /&gt;
together. Collaboration reduces redundancy of work done in the Free&lt;br /&gt;
Software world, and improves the quality of the software produced. You&lt;br /&gt;
should aim to collaborate with other Sugar contributors, as well as&lt;br /&gt;
with the entire Sugar ecosystem that is interested in the work you&lt;br /&gt;
do. Your work should be done transparently and patches from Sugar&lt;br /&gt;
should be given back to the community when they are made, not just&lt;br /&gt;
when the distribution releases. If you wish to work on new code for&lt;br /&gt;
existing upstream projects, at least keep those projects informed of&lt;br /&gt;
your ideas and progress. It may not be possible to get consensus from&lt;br /&gt;
upstream or even from your colleagues about the correct implementation&lt;br /&gt;
of an idea, so don&#39;t feel obliged to have that agreement before you&lt;br /&gt;
begin, but at least keep the outside world informed of your work, and&lt;br /&gt;
publish your work in a way that allows outsiders to test, discuss and&lt;br /&gt;
contribute to your efforts.&lt;/p&gt;
&lt;h2 id=&quot;be-flexible&quot; tabindex=&quot;-1&quot;&gt;Be flexible&lt;/h2&gt;
&lt;p&gt;The Sugar Labs community and its members come from various backgrounds&lt;br /&gt;
and cultures.  It is important to remember that Sugar Labs is a place&lt;br /&gt;
for educators and developers; parents, teachers, and children; and&lt;br /&gt;
speakers of many languages to work together.  Try to find the&lt;br /&gt;
appropriate forum for your topic, level or expertises, or language.&lt;br /&gt;
If you come across a post that is in an incorrect forum, please&lt;br /&gt;
respectfully redirect the poster to the appropriate.  However, a&lt;br /&gt;
project such as Sugar Labs requires communication between groups and&lt;br /&gt;
languages.&lt;/p&gt;
&lt;h2 id=&quot;when-you-disagree-consult-others&quot; tabindex=&quot;-1&quot;&gt;When you disagree, consult others&lt;/h2&gt;
&lt;p&gt;The Sugar community is not immune to disagreements—both political and&lt;br /&gt;
technical. We do not try to avoid disagreements or differing views,&lt;br /&gt;
but we do try to resolve them constructively. Turn to the community&lt;br /&gt;
and to community processes to seek advice and to mediate and resolve&lt;br /&gt;
disagreements. Community resources include an Oversight Board which&lt;br /&gt;
will help to decide the right course for Sugar Labs, project teams and&lt;br /&gt;
team leaders who may be able to help you, and an ombudsman who will&lt;br /&gt;
investigate complaints and, where possible, resolve them by making&lt;br /&gt;
recommendations to the community. We welcome you to fork the Sugar&lt;br /&gt;
code base if you are determined to go your own way; enabling the&lt;br /&gt;
community to test your ideas and possibly merge them back into the&lt;br /&gt;
mainstream.&lt;/p&gt;
&lt;h2 id=&quot;when-you-are-unsure-ask-for-help&quot; tabindex=&quot;-1&quot;&gt;When you are unsure, ask for help&lt;/h2&gt;
&lt;p&gt;Nobody knows everything, and nobody is expected to be perfect in the&lt;br /&gt;
Sugar community. Asking questions avoids many problems down the road,&lt;br /&gt;
and so questions are encouraged. Those who are asked should be&lt;br /&gt;
responsive and helpful. However, when asking a question, care must be&lt;br /&gt;
taken to do so in an appropriate forum.&lt;/p&gt;
&lt;h2 id=&quot;step-down-considerately&quot; tabindex=&quot;-1&quot;&gt;Step down considerately&lt;/h2&gt;
&lt;p&gt;Developers on every project come and go and Sugar Labs is no&lt;br /&gt;
different. When you leave or disengage from the project, in whole or&lt;br /&gt;
in part, we ask that you do so in a way that minimizes disruption to&lt;br /&gt;
the project. This means you should tell people you are leaving and&lt;br /&gt;
take the proper steps to ensure that others can pick up where you&lt;br /&gt;
leave off.&lt;/p&gt;
&lt;h2 id=&quot;mailing-lists-and-web-forums&quot; tabindex=&quot;-1&quot;&gt;Mailing lists and web forums&lt;/h2&gt;
&lt;p&gt;This code of conduct applies very much to your behavior in mailing&lt;br /&gt;
lists and web forums.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Please watch your language.  The Sugar community is a family-friendly place.&lt;/li&gt;
&lt;li&gt;Please use a valid email address to which direct responses can be made.&lt;/li&gt;
&lt;li&gt;Please avoid flamewars, trolling, personal attacks, and repetitive arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Sugar Labs Code of Conduct is based on the &lt;a href=&quot;http://www.ubuntu.com/community/conduct&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ubuntu Code of&lt;br /&gt;
Conduct&lt;/a&gt;. It is licensed&lt;br /&gt;
under the Creative Commons Attribution-Share Alike 3.0 license. You&lt;br /&gt;
may re-use it for your own project, and modify it as you wish, just&lt;br /&gt;
please allow others to use your modifications and give credit to the&lt;br /&gt;
Ubuntu Project!&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/code-of-conduct/" />
        </entry>
        <entry>
            <title>
                android
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//src/android/</id>
            <content type="html">
                &lt;h1 id=&quot;sugar-on-android&quot; tabindex=&quot;-1&quot;&gt;Sugar on Android&lt;/h1&gt;
&lt;h2 id=&quot;web-activity-on-android&quot; tabindex=&quot;-1&quot;&gt;Web activity on Android&lt;/h2&gt;
&lt;p&gt;Currently there are several manual steps that need to be executed in&lt;br /&gt;
order to create a web activity for Android. When things stabilize the&lt;br /&gt;
process can be automated, ideally we would enhance the &lt;a href=&quot;http://setup.py/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;setup.py&lt;/a&gt;&lt;br /&gt;
command to build an Android application package file (APK) ready for&lt;br /&gt;
distribution and installation on a device running Android.&lt;/p&gt;
&lt;p&gt;./setup.py dist-apk&lt;/p&gt;
&lt;p&gt;The APK could be built using the android sdk and after that, an APK&lt;br /&gt;
would appear in the activity dist/ directory.&lt;/p&gt;
&lt;h3 id=&quot;activity-icon&quot; tabindex=&quot;-1&quot;&gt;Activity icon&lt;/h3&gt;
&lt;p&gt;Android stores app icons in different sizes: : 512x512, 144x144,&lt;br /&gt;
96x96, 72x72, 48x48 . For details see&lt;br /&gt;
&lt;a href=&quot;http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To convert an SVG icon to a PNG suitable as a launcher icon you can&lt;br /&gt;
use the &#39;convert&#39; command from &lt;a href=&quot;http://www.imagemagick.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://www.imagemagick.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;convert -background none -density 1200 -resize 512x512 activity/activity-icon.svg activity-icon.png&lt;/p&gt;
&lt;h3 id=&quot;android-project&quot; tabindex=&quot;-1&quot;&gt;Android project&lt;/h3&gt;
&lt;p&gt;Make an Android app with one android.app.Activity inside, which is the&lt;br /&gt;
default project the IDE creates. See&lt;br /&gt;
&lt;a href=&quot;https://developer.android.com/training/basics/firstapp/creating-project.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://developer.android.com/training/basics/firstapp/creating-project.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the icon, select the converted PNG icon in the Activity icon&lt;br /&gt;
section above.&lt;/p&gt;
&lt;p&gt;Copy all the web activity contents to the &lt;strong&gt;assets&lt;/strong&gt; directory.  You&lt;br /&gt;
can copy the boilerplate and adjust from&lt;br /&gt;
&lt;a href=&quot;https://github.com/manuq/clockjs-android&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/manuq/clockjs-android&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;android-shell&quot; tabindex=&quot;-1&quot;&gt;Android shell&lt;/h2&gt;
&lt;p&gt;Here is an Android project that contains a bound service to which&lt;br /&gt;
other apps can bind to: &lt;a href=&quot;https://github.com/manuq/aboutmejs-android/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/manuq/aboutmejs-android/&lt;/a&gt;.&lt;br /&gt;
This service needs to be separated in its own app.  The important bits&lt;br /&gt;
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the Intent filter in&lt;br /&gt;
&lt;a href=&quot;https://github.com/manuq/aboutmejs-android/blob/master/AndroidManifest.xml&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;AndroidManifest.xml&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/manuq/aboutmejs-android/blob/master/src/org/sugarlabs/aboutme/SugarService.java&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;SugarService.java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;an-activity-launcher-for-android-shell&quot; tabindex=&quot;-1&quot;&gt;An activity launcher for Android shell&lt;/h2&gt;
&lt;p&gt;In Android is possible to replace the default launcher. A launcher is&lt;br /&gt;
basically a normal app, that has an Intent with a category&lt;br /&gt;
&lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html#CATEGORY_HOME&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CATEGORY_HOME&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Being a normal Android app, it can be a web activity.  And it would be&lt;br /&gt;
possible to put colors to the launcher SVG icons and organize them in&lt;br /&gt;
a spiral, just like the GTK+ Sugar desktop home.&lt;/p&gt;
&lt;p&gt;There is a Home screen replacement sample in the&lt;br /&gt;
&lt;a href=&quot;http://developer.android.com/tools/samples/index.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;android-sdk samples&lt;/a&gt;. It&lt;br /&gt;
can be built and installed as any other app, following the steps at&lt;br /&gt;
&lt;a href=&quot;https://developer.android.com/training/basics/firstapp/creating-project.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://developer.android.com/training/basics/firstapp/creating-project.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;debugging-web-activities-on-android&quot; tabindex=&quot;-1&quot;&gt;Debugging web activities on Android&lt;/h2&gt;
&lt;p&gt;To get the inspector in your web activity using Chrome, see &lt;a href=&quot;https://developers.google.com/chrome-developer-tools/docs/remote-debugging&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Remote&lt;br /&gt;
Debugging on&lt;br /&gt;
Android&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://sugardocs.vercel.app//src/android/" />
        </entry>
        <entry>
            <title>
                notes
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//index/</id>
            <content type="html">
                &lt;h1 id=&quot;page-moved&quot; tabindex=&quot;-1&quot;&gt;Page Moved&lt;/h1&gt;
&lt;p&gt;We have moved this page to &lt;a href=&quot;https://github.com/sugarlabs/sugar-docs/blob/master/README.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How did you get here?  Please &lt;a href=&quot;https://github.com/sugarlabs/sugar-docs/issues&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;report&lt;/a&gt; any lingering links.&lt;/p&gt;
&lt;p&gt;2018-02-14&lt;/p&gt;
&lt;!-- file to exist while developers.sugarlabs.org continues to be rendered from this repository --&gt;

            </content>
            <link href="https://sugardocs.vercel.app//index/" />
        </entry>
        <entry>
            <title>
                README
                
            </title>
            <updated>2025-02-27T13:14:42Z</updated>
            <id>https://sugardocs.vercel.app//</id>
            <content type="html">
                &lt;h1 id=&quot;sugar-labs&quot; tabindex=&quot;-1&quot;&gt;Sugar Labs&lt;/h1&gt;
&lt;p&gt;Welcome to documentation for contributors and developers.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot; tabindex=&quot;-1&quot;&gt;Getting started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/code-of-conduct/&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/how-can-i-help/&quot;&gt;How can I help?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/contributing/&quot;&gt;Contribute code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/languages/&quot;&gt;Programming Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/contact/&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;design&quot; tabindex=&quot;-1&quot;&gt;Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/hig/&quot;&gt;Human Interface Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/sugar-iconify/&quot;&gt;Sugar Iconify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sugar-desktop&quot; tabindex=&quot;-1&quot;&gt;Sugar Desktop&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sugarlabs/sugar/blob/master/docs/development-environment&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Setup a development environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/desktop-activity/&quot;&gt;Write your own Sugar desktop activity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/python-style/&quot;&gt;Python code style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/memory-leaks/&quot;&gt;Memory leaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/gtk3-porting-guide/&quot;&gt;GTK 3 Porting Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/python-porting-guide/&quot;&gt;Python 3 Porting Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/python-coverage-guide/&quot;&gt;Python Coverage Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/sugar-on-debian/&quot;&gt;Guide to installing Sugar on Debian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sugar-web&quot; tabindex=&quot;-1&quot;&gt;Sugar Web&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/web-activity/&quot;&gt;Write your own Sugar web activity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/web-architecture/&quot;&gt;Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/javascript-style/&quot;&gt;JavaScript style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/web-style/&quot;&gt;Web code style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sugarlabs.github.io/sugar-web-samples/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Components showcase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sugar-android&quot; tabindex=&quot;-1&quot;&gt;Sugar Android&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/llaske/sugarizer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sugarizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/android/&quot;&gt;Web activity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;documentation&quot; tabindex=&quot;-1&quot;&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://sugardocs.vercel.app/src/docs/&quot;&gt;Improving this documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;translation&quot; tabindex=&quot;-1&quot;&gt;Translation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://weblate.sugarlabs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Weblate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://sugardocs.vercel.app//" />
        </entry>
</feed>
